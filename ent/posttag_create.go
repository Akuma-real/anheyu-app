// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/anzhiyu-c/anheyu-app/ent/article"
	"github.com/anzhiyu-c/anheyu-app/ent/posttag"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostTagCreate is the builder for creating a PostTag entity.
type PostTagCreate struct {
	config
	mutation *PostTagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (ptc *PostTagCreate) SetDeletedAt(t time.Time) *PostTagCreate {
	ptc.mutation.SetDeletedAt(t)
	return ptc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptc *PostTagCreate) SetNillableDeletedAt(t *time.Time) *PostTagCreate {
	if t != nil {
		ptc.SetDeletedAt(*t)
	}
	return ptc
}

// SetCreatedAt sets the "created_at" field.
func (ptc *PostTagCreate) SetCreatedAt(t time.Time) *PostTagCreate {
	ptc.mutation.SetCreatedAt(t)
	return ptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptc *PostTagCreate) SetNillableCreatedAt(t *time.Time) *PostTagCreate {
	if t != nil {
		ptc.SetCreatedAt(*t)
	}
	return ptc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptc *PostTagCreate) SetUpdatedAt(t time.Time) *PostTagCreate {
	ptc.mutation.SetUpdatedAt(t)
	return ptc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptc *PostTagCreate) SetNillableUpdatedAt(t *time.Time) *PostTagCreate {
	if t != nil {
		ptc.SetUpdatedAt(*t)
	}
	return ptc
}

// SetName sets the "name" field.
func (ptc *PostTagCreate) SetName(s string) *PostTagCreate {
	ptc.mutation.SetName(s)
	return ptc
}

// SetCount sets the "count" field.
func (ptc *PostTagCreate) SetCount(i int) *PostTagCreate {
	ptc.mutation.SetCount(i)
	return ptc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (ptc *PostTagCreate) SetNillableCount(i *int) *PostTagCreate {
	if i != nil {
		ptc.SetCount(*i)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *PostTagCreate) SetID(u uint) *PostTagCreate {
	ptc.mutation.SetID(u)
	return ptc
}

// AddArticleIDs adds the "articles" edge to the Article entity by IDs.
func (ptc *PostTagCreate) AddArticleIDs(ids ...uint) *PostTagCreate {
	ptc.mutation.AddArticleIDs(ids...)
	return ptc
}

// AddArticles adds the "articles" edges to the Article entity.
func (ptc *PostTagCreate) AddArticles(a ...*Article) *PostTagCreate {
	ids := make([]uint, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ptc.AddArticleIDs(ids...)
}

// Mutation returns the PostTagMutation object of the builder.
func (ptc *PostTagCreate) Mutation() *PostTagMutation {
	return ptc.mutation
}

// Save creates the PostTag in the database.
func (ptc *PostTagCreate) Save(ctx context.Context) (*PostTag, error) {
	if err := ptc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PostTagCreate) SaveX(ctx context.Context) *PostTag {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PostTagCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PostTagCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *PostTagCreate) defaults() error {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		if posttag.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized posttag.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := posttag.DefaultCreatedAt()
		ptc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		if posttag.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized posttag.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := posttag.DefaultUpdatedAt()
		ptc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ptc.mutation.Count(); !ok {
		v := posttag.DefaultCount
		ptc.mutation.SetCount(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PostTagCreate) check() error {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PostTag.created_at"`)}
	}
	if _, ok := ptc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PostTag.updated_at"`)}
	}
	if _, ok := ptc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PostTag.name"`)}
	}
	if v, ok := ptc.mutation.Name(); ok {
		if err := posttag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PostTag.name": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "PostTag.count"`)}
	}
	if v, ok := ptc.mutation.Count(); ok {
		if err := posttag.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`ent: validator failed for field "PostTag.count": %w`, err)}
		}
	}
	return nil
}

func (ptc *PostTagCreate) sqlSave(ctx context.Context) (*PostTag, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *PostTagCreate) createSpec() (*PostTag, *sqlgraph.CreateSpec) {
	var (
		_node = &PostTag{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(posttag.Table, sqlgraph.NewFieldSpec(posttag.FieldID, field.TypeUint))
	)
	_spec.OnConflict = ptc.conflict
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptc.mutation.DeletedAt(); ok {
		_spec.SetField(posttag.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.SetField(posttag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ptc.mutation.UpdatedAt(); ok {
		_spec.SetField(posttag.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ptc.mutation.Name(); ok {
		_spec.SetField(posttag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ptc.mutation.Count(); ok {
		_spec.SetField(posttag.FieldCount, field.TypeInt, value)
		_node.Count = value
	}
	if nodes := ptc.mutation.ArticlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   posttag.ArticlesTable,
			Columns: posttag.ArticlesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PostTag.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostTagUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (ptc *PostTagCreate) OnConflict(opts ...sql.ConflictOption) *PostTagUpsertOne {
	ptc.conflict = opts
	return &PostTagUpsertOne{
		create: ptc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PostTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptc *PostTagCreate) OnConflictColumns(columns ...string) *PostTagUpsertOne {
	ptc.conflict = append(ptc.conflict, sql.ConflictColumns(columns...))
	return &PostTagUpsertOne{
		create: ptc,
	}
}

type (
	// PostTagUpsertOne is the builder for "upsert"-ing
	//  one PostTag node.
	PostTagUpsertOne struct {
		create *PostTagCreate
	}

	// PostTagUpsert is the "OnConflict" setter.
	PostTagUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *PostTagUpsert) SetDeletedAt(v time.Time) *PostTagUpsert {
	u.Set(posttag.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PostTagUpsert) UpdateDeletedAt() *PostTagUpsert {
	u.SetExcluded(posttag.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PostTagUpsert) ClearDeletedAt() *PostTagUpsert {
	u.SetNull(posttag.FieldDeletedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostTagUpsert) SetUpdatedAt(v time.Time) *PostTagUpsert {
	u.Set(posttag.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostTagUpsert) UpdateUpdatedAt() *PostTagUpsert {
	u.SetExcluded(posttag.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *PostTagUpsert) SetName(v string) *PostTagUpsert {
	u.Set(posttag.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostTagUpsert) UpdateName() *PostTagUpsert {
	u.SetExcluded(posttag.FieldName)
	return u
}

// SetCount sets the "count" field.
func (u *PostTagUpsert) SetCount(v int) *PostTagUpsert {
	u.Set(posttag.FieldCount, v)
	return u
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *PostTagUpsert) UpdateCount() *PostTagUpsert {
	u.SetExcluded(posttag.FieldCount)
	return u
}

// AddCount adds v to the "count" field.
func (u *PostTagUpsert) AddCount(v int) *PostTagUpsert {
	u.Add(posttag.FieldCount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PostTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(posttag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostTagUpsertOne) UpdateNewValues() *PostTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(posttag.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(posttag.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PostTag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PostTagUpsertOne) Ignore() *PostTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostTagUpsertOne) DoNothing() *PostTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostTagCreate.OnConflict
// documentation for more info.
func (u *PostTagUpsertOne) Update(set func(*PostTagUpsert)) *PostTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PostTagUpsertOne) SetDeletedAt(v time.Time) *PostTagUpsertOne {
	return u.Update(func(s *PostTagUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PostTagUpsertOne) UpdateDeletedAt() *PostTagUpsertOne {
	return u.Update(func(s *PostTagUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PostTagUpsertOne) ClearDeletedAt() *PostTagUpsertOne {
	return u.Update(func(s *PostTagUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostTagUpsertOne) SetUpdatedAt(v time.Time) *PostTagUpsertOne {
	return u.Update(func(s *PostTagUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostTagUpsertOne) UpdateUpdatedAt() *PostTagUpsertOne {
	return u.Update(func(s *PostTagUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *PostTagUpsertOne) SetName(v string) *PostTagUpsertOne {
	return u.Update(func(s *PostTagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostTagUpsertOne) UpdateName() *PostTagUpsertOne {
	return u.Update(func(s *PostTagUpsert) {
		s.UpdateName()
	})
}

// SetCount sets the "count" field.
func (u *PostTagUpsertOne) SetCount(v int) *PostTagUpsertOne {
	return u.Update(func(s *PostTagUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *PostTagUpsertOne) AddCount(v int) *PostTagUpsertOne {
	return u.Update(func(s *PostTagUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *PostTagUpsertOne) UpdateCount() *PostTagUpsertOne {
	return u.Update(func(s *PostTagUpsert) {
		s.UpdateCount()
	})
}

// Exec executes the query.
func (u *PostTagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostTagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostTagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PostTagUpsertOne) ID(ctx context.Context) (id uint, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PostTagUpsertOne) IDX(ctx context.Context) uint {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PostTagCreateBulk is the builder for creating many PostTag entities in bulk.
type PostTagCreateBulk struct {
	config
	err      error
	builders []*PostTagCreate
	conflict []sql.ConflictOption
}

// Save creates the PostTag entities in the database.
func (ptcb *PostTagCreateBulk) Save(ctx context.Context) ([]*PostTag, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PostTag, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PostTagCreateBulk) SaveX(ctx context.Context) []*PostTag {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PostTagCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PostTagCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PostTag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostTagUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (ptcb *PostTagCreateBulk) OnConflict(opts ...sql.ConflictOption) *PostTagUpsertBulk {
	ptcb.conflict = opts
	return &PostTagUpsertBulk{
		create: ptcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PostTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptcb *PostTagCreateBulk) OnConflictColumns(columns ...string) *PostTagUpsertBulk {
	ptcb.conflict = append(ptcb.conflict, sql.ConflictColumns(columns...))
	return &PostTagUpsertBulk{
		create: ptcb,
	}
}

// PostTagUpsertBulk is the builder for "upsert"-ing
// a bulk of PostTag nodes.
type PostTagUpsertBulk struct {
	create *PostTagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PostTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(posttag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostTagUpsertBulk) UpdateNewValues() *PostTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(posttag.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(posttag.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PostTag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PostTagUpsertBulk) Ignore() *PostTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostTagUpsertBulk) DoNothing() *PostTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostTagCreateBulk.OnConflict
// documentation for more info.
func (u *PostTagUpsertBulk) Update(set func(*PostTagUpsert)) *PostTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PostTagUpsertBulk) SetDeletedAt(v time.Time) *PostTagUpsertBulk {
	return u.Update(func(s *PostTagUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PostTagUpsertBulk) UpdateDeletedAt() *PostTagUpsertBulk {
	return u.Update(func(s *PostTagUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PostTagUpsertBulk) ClearDeletedAt() *PostTagUpsertBulk {
	return u.Update(func(s *PostTagUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostTagUpsertBulk) SetUpdatedAt(v time.Time) *PostTagUpsertBulk {
	return u.Update(func(s *PostTagUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostTagUpsertBulk) UpdateUpdatedAt() *PostTagUpsertBulk {
	return u.Update(func(s *PostTagUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *PostTagUpsertBulk) SetName(v string) *PostTagUpsertBulk {
	return u.Update(func(s *PostTagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostTagUpsertBulk) UpdateName() *PostTagUpsertBulk {
	return u.Update(func(s *PostTagUpsert) {
		s.UpdateName()
	})
}

// SetCount sets the "count" field.
func (u *PostTagUpsertBulk) SetCount(v int) *PostTagUpsertBulk {
	return u.Update(func(s *PostTagUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *PostTagUpsertBulk) AddCount(v int) *PostTagUpsertBulk {
	return u.Update(func(s *PostTagUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *PostTagUpsertBulk) UpdateCount() *PostTagUpsertBulk {
	return u.Update(func(s *PostTagUpsert) {
		s.UpdateCount()
	})
}

// Exec executes the query.
func (u *PostTagUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PostTagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostTagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostTagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
