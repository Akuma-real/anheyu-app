// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/entity"
	"github.com/anzhiyu-c/anheyu-app/ent/file"
	"github.com/anzhiyu-c/anheyu-app/ent/fileentity"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
)

// FileEntityQuery is the builder for querying FileEntity entities.
type FileEntityQuery struct {
	config
	ctx        *QueryContext
	order      []fileentity.OrderOption
	inters     []Interceptor
	predicates []predicate.FileEntity
	withFile   *FileQuery
	withEntity *EntityQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FileEntityQuery builder.
func (feq *FileEntityQuery) Where(ps ...predicate.FileEntity) *FileEntityQuery {
	feq.predicates = append(feq.predicates, ps...)
	return feq
}

// Limit the number of records to be returned by this query.
func (feq *FileEntityQuery) Limit(limit int) *FileEntityQuery {
	feq.ctx.Limit = &limit
	return feq
}

// Offset to start from.
func (feq *FileEntityQuery) Offset(offset int) *FileEntityQuery {
	feq.ctx.Offset = &offset
	return feq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (feq *FileEntityQuery) Unique(unique bool) *FileEntityQuery {
	feq.ctx.Unique = &unique
	return feq
}

// Order specifies how the records should be ordered.
func (feq *FileEntityQuery) Order(o ...fileentity.OrderOption) *FileEntityQuery {
	feq.order = append(feq.order, o...)
	return feq
}

// QueryFile chains the current query on the "file" edge.
func (feq *FileEntityQuery) QueryFile() *FileQuery {
	query := (&FileClient{config: feq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := feq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := feq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fileentity.Table, fileentity.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fileentity.FileTable, fileentity.FileColumn),
		)
		fromU = sqlgraph.SetNeighbors(feq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntity chains the current query on the "entity" edge.
func (feq *FileEntityQuery) QueryEntity() *EntityQuery {
	query := (&EntityClient{config: feq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := feq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := feq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fileentity.Table, fileentity.FieldID, selector),
			sqlgraph.To(entity.Table, entity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fileentity.EntityTable, fileentity.EntityColumn),
		)
		fromU = sqlgraph.SetNeighbors(feq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FileEntity entity from the query.
// Returns a *NotFoundError when no FileEntity was found.
func (feq *FileEntityQuery) First(ctx context.Context) (*FileEntity, error) {
	nodes, err := feq.Limit(1).All(setContextOp(ctx, feq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{fileentity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (feq *FileEntityQuery) FirstX(ctx context.Context) *FileEntity {
	node, err := feq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FileEntity ID from the query.
// Returns a *NotFoundError when no FileEntity ID was found.
func (feq *FileEntityQuery) FirstID(ctx context.Context) (id uint, err error) {
	var ids []uint
	if ids, err = feq.Limit(1).IDs(setContextOp(ctx, feq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{fileentity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (feq *FileEntityQuery) FirstIDX(ctx context.Context) uint {
	id, err := feq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FileEntity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FileEntity entity is found.
// Returns a *NotFoundError when no FileEntity entities are found.
func (feq *FileEntityQuery) Only(ctx context.Context) (*FileEntity, error) {
	nodes, err := feq.Limit(2).All(setContextOp(ctx, feq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{fileentity.Label}
	default:
		return nil, &NotSingularError{fileentity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (feq *FileEntityQuery) OnlyX(ctx context.Context) *FileEntity {
	node, err := feq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FileEntity ID in the query.
// Returns a *NotSingularError when more than one FileEntity ID is found.
// Returns a *NotFoundError when no entities are found.
func (feq *FileEntityQuery) OnlyID(ctx context.Context) (id uint, err error) {
	var ids []uint
	if ids, err = feq.Limit(2).IDs(setContextOp(ctx, feq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{fileentity.Label}
	default:
		err = &NotSingularError{fileentity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (feq *FileEntityQuery) OnlyIDX(ctx context.Context) uint {
	id, err := feq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FileEntities.
func (feq *FileEntityQuery) All(ctx context.Context) ([]*FileEntity, error) {
	ctx = setContextOp(ctx, feq.ctx, ent.OpQueryAll)
	if err := feq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FileEntity, *FileEntityQuery]()
	return withInterceptors[[]*FileEntity](ctx, feq, qr, feq.inters)
}

// AllX is like All, but panics if an error occurs.
func (feq *FileEntityQuery) AllX(ctx context.Context) []*FileEntity {
	nodes, err := feq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FileEntity IDs.
func (feq *FileEntityQuery) IDs(ctx context.Context) (ids []uint, err error) {
	if feq.ctx.Unique == nil && feq.path != nil {
		feq.Unique(true)
	}
	ctx = setContextOp(ctx, feq.ctx, ent.OpQueryIDs)
	if err = feq.Select(fileentity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (feq *FileEntityQuery) IDsX(ctx context.Context) []uint {
	ids, err := feq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (feq *FileEntityQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, feq.ctx, ent.OpQueryCount)
	if err := feq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, feq, querierCount[*FileEntityQuery](), feq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (feq *FileEntityQuery) CountX(ctx context.Context) int {
	count, err := feq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (feq *FileEntityQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, feq.ctx, ent.OpQueryExist)
	switch _, err := feq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (feq *FileEntityQuery) ExistX(ctx context.Context) bool {
	exist, err := feq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FileEntityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (feq *FileEntityQuery) Clone() *FileEntityQuery {
	if feq == nil {
		return nil
	}
	return &FileEntityQuery{
		config:     feq.config,
		ctx:        feq.ctx.Clone(),
		order:      append([]fileentity.OrderOption{}, feq.order...),
		inters:     append([]Interceptor{}, feq.inters...),
		predicates: append([]predicate.FileEntity{}, feq.predicates...),
		withFile:   feq.withFile.Clone(),
		withEntity: feq.withEntity.Clone(),
		// clone intermediate query.
		sql:       feq.sql.Clone(),
		path:      feq.path,
		modifiers: append([]func(*sql.Selector){}, feq.modifiers...),
	}
}

// WithFile tells the query-builder to eager-load the nodes that are connected to
// the "file" edge. The optional arguments are used to configure the query builder of the edge.
func (feq *FileEntityQuery) WithFile(opts ...func(*FileQuery)) *FileEntityQuery {
	query := (&FileClient{config: feq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	feq.withFile = query
	return feq
}

// WithEntity tells the query-builder to eager-load the nodes that are connected to
// the "entity" edge. The optional arguments are used to configure the query builder of the edge.
func (feq *FileEntityQuery) WithEntity(opts ...func(*EntityQuery)) *FileEntityQuery {
	query := (&EntityClient{config: feq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	feq.withEntity = query
	return feq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FileEntity.Query().
//		GroupBy(fileentity.FieldDeletedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (feq *FileEntityQuery) GroupBy(field string, fields ...string) *FileEntityGroupBy {
	feq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FileEntityGroupBy{build: feq}
	grbuild.flds = &feq.ctx.Fields
	grbuild.label = fileentity.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//	}
//
//	client.FileEntity.Query().
//		Select(fileentity.FieldDeletedAt).
//		Scan(ctx, &v)
func (feq *FileEntityQuery) Select(fields ...string) *FileEntitySelect {
	feq.ctx.Fields = append(feq.ctx.Fields, fields...)
	sbuild := &FileEntitySelect{FileEntityQuery: feq}
	sbuild.label = fileentity.Label
	sbuild.flds, sbuild.scan = &feq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FileEntitySelect configured with the given aggregations.
func (feq *FileEntityQuery) Aggregate(fns ...AggregateFunc) *FileEntitySelect {
	return feq.Select().Aggregate(fns...)
}

func (feq *FileEntityQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range feq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, feq); err != nil {
				return err
			}
		}
	}
	for _, f := range feq.ctx.Fields {
		if !fileentity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if feq.path != nil {
		prev, err := feq.path(ctx)
		if err != nil {
			return err
		}
		feq.sql = prev
	}
	return nil
}

func (feq *FileEntityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FileEntity, error) {
	var (
		nodes       = []*FileEntity{}
		_spec       = feq.querySpec()
		loadedTypes = [2]bool{
			feq.withFile != nil,
			feq.withEntity != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FileEntity).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FileEntity{config: feq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(feq.modifiers) > 0 {
		_spec.Modifiers = feq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, feq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := feq.withFile; query != nil {
		if err := feq.loadFile(ctx, query, nodes, nil,
			func(n *FileEntity, e *File) { n.Edges.File = e }); err != nil {
			return nil, err
		}
	}
	if query := feq.withEntity; query != nil {
		if err := feq.loadEntity(ctx, query, nodes, nil,
			func(n *FileEntity, e *Entity) { n.Edges.Entity = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (feq *FileEntityQuery) loadFile(ctx context.Context, query *FileQuery, nodes []*FileEntity, init func(*FileEntity), assign func(*FileEntity, *File)) error {
	ids := make([]uint, 0, len(nodes))
	nodeids := make(map[uint][]*FileEntity)
	for i := range nodes {
		fk := nodes[i].FileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(file.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "file_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (feq *FileEntityQuery) loadEntity(ctx context.Context, query *EntityQuery, nodes []*FileEntity, init func(*FileEntity), assign func(*FileEntity, *Entity)) error {
	ids := make([]uint, 0, len(nodes))
	nodeids := make(map[uint][]*FileEntity)
	for i := range nodes {
		fk := nodes[i].EntityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(entity.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "entity_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (feq *FileEntityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := feq.querySpec()
	if len(feq.modifiers) > 0 {
		_spec.Modifiers = feq.modifiers
	}
	_spec.Node.Columns = feq.ctx.Fields
	if len(feq.ctx.Fields) > 0 {
		_spec.Unique = feq.ctx.Unique != nil && *feq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, feq.driver, _spec)
}

func (feq *FileEntityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(fileentity.Table, fileentity.Columns, sqlgraph.NewFieldSpec(fileentity.FieldID, field.TypeUint))
	_spec.From = feq.sql
	if unique := feq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if feq.path != nil {
		_spec.Unique = true
	}
	if fields := feq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fileentity.FieldID)
		for i := range fields {
			if fields[i] != fileentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if feq.withFile != nil {
			_spec.Node.AddColumnOnce(fileentity.FieldFileID)
		}
		if feq.withEntity != nil {
			_spec.Node.AddColumnOnce(fileentity.FieldEntityID)
		}
	}
	if ps := feq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := feq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := feq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := feq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (feq *FileEntityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(feq.driver.Dialect())
	t1 := builder.Table(fileentity.Table)
	columns := feq.ctx.Fields
	if len(columns) == 0 {
		columns = fileentity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if feq.sql != nil {
		selector = feq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if feq.ctx.Unique != nil && *feq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range feq.modifiers {
		m(selector)
	}
	for _, p := range feq.predicates {
		p(selector)
	}
	for _, p := range feq.order {
		p(selector)
	}
	if offset := feq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := feq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (feq *FileEntityQuery) Modify(modifiers ...func(s *sql.Selector)) *FileEntitySelect {
	feq.modifiers = append(feq.modifiers, modifiers...)
	return feq.Select()
}

// FileEntityGroupBy is the group-by builder for FileEntity entities.
type FileEntityGroupBy struct {
	selector
	build *FileEntityQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fegb *FileEntityGroupBy) Aggregate(fns ...AggregateFunc) *FileEntityGroupBy {
	fegb.fns = append(fegb.fns, fns...)
	return fegb
}

// Scan applies the selector query and scans the result into the given value.
func (fegb *FileEntityGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fegb.build.ctx, ent.OpQueryGroupBy)
	if err := fegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FileEntityQuery, *FileEntityGroupBy](ctx, fegb.build, fegb, fegb.build.inters, v)
}

func (fegb *FileEntityGroupBy) sqlScan(ctx context.Context, root *FileEntityQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fegb.fns))
	for _, fn := range fegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fegb.flds)+len(fegb.fns))
		for _, f := range *fegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FileEntitySelect is the builder for selecting fields of FileEntity entities.
type FileEntitySelect struct {
	*FileEntityQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fes *FileEntitySelect) Aggregate(fns ...AggregateFunc) *FileEntitySelect {
	fes.fns = append(fes.fns, fns...)
	return fes
}

// Scan applies the selector query and scans the result into the given value.
func (fes *FileEntitySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fes.ctx, ent.OpQuerySelect)
	if err := fes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FileEntityQuery, *FileEntitySelect](ctx, fes.FileEntityQuery, fes, fes.inters, v)
}

func (fes *FileEntitySelect) sqlScan(ctx context.Context, root *FileEntityQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fes.fns))
	for _, fn := range fes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (fes *FileEntitySelect) Modify(modifiers ...func(s *sql.Selector)) *FileEntitySelect {
	fes.modifiers = append(fes.modifiers, modifiers...)
	return fes
}
