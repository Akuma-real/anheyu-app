// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/anzhiyu-c/anheyu-app/ent/storagepolicy"
	"github.com/anzhiyu-c/anheyu-app/pkg/domain/model"
)

// StoragePolicy is the model entity for the StoragePolicy schema.
type StoragePolicy struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 策略名称，必须唯一
	Name string `json:"name,omitempty"`
	// 存储类型, 如 local, onedrive
	Type string `json:"type,omitempty"`
	// 策略标志，如 article_image, comment_image
	Flag string `json:"flag,omitempty"`
	// S3 Endpoint 或 Onedrive API URL
	Server string `json:"server,omitempty"`
	// 存储桶名称或 Onedrive Drive ID
	BucketName string `json:"bucket_name,omitempty"`
	// 存储空间是否为私有
	IsPrivate bool `json:"is_private,omitempty"`
	// 访问密钥 (Access Key)
	AccessKey string `json:"access_key,omitempty"`
	// 私有密钥 (Secret Key)
	SecretKey string `json:"secret_key,omitempty"`
	// 允许上传的最大文件尺寸 (Bytes)，0为不限制
	MaxSize int64 `json:"max_size,omitempty"`
	// 物理基础路径 (本地路径、云存储前缀等)
	BasePath string `json:"base_path,omitempty"`
	// 系统内的虚拟挂载路径
	VirtualPath string `json:"virtual_path,omitempty"`
	// 其他设置，以 JSON 格式存储
	Settings model.StoragePolicySettings `json:"settings,omitempty"`
	// 关联的挂载点 ID
	NodeID       *uint `json:"node_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StoragePolicy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case storagepolicy.FieldSettings:
			values[i] = new(model.StoragePolicySettings)
		case storagepolicy.FieldIsPrivate:
			values[i] = new(sql.NullBool)
		case storagepolicy.FieldID, storagepolicy.FieldMaxSize, storagepolicy.FieldNodeID:
			values[i] = new(sql.NullInt64)
		case storagepolicy.FieldName, storagepolicy.FieldType, storagepolicy.FieldFlag, storagepolicy.FieldServer, storagepolicy.FieldBucketName, storagepolicy.FieldAccessKey, storagepolicy.FieldSecretKey, storagepolicy.FieldBasePath, storagepolicy.FieldVirtualPath:
			values[i] = new(sql.NullString)
		case storagepolicy.FieldDeletedAt, storagepolicy.FieldCreatedAt, storagepolicy.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StoragePolicy fields.
func (sp *StoragePolicy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case storagepolicy.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = uint(value.Int64)
		case storagepolicy.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sp.DeletedAt = new(time.Time)
				*sp.DeletedAt = value.Time
			}
		case storagepolicy.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case storagepolicy.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case storagepolicy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sp.Name = value.String
			}
		case storagepolicy.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sp.Type = value.String
			}
		case storagepolicy.FieldFlag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flag", values[i])
			} else if value.Valid {
				sp.Flag = value.String
			}
		case storagepolicy.FieldServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server", values[i])
			} else if value.Valid {
				sp.Server = value.String
			}
		case storagepolicy.FieldBucketName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket_name", values[i])
			} else if value.Valid {
				sp.BucketName = value.String
			}
		case storagepolicy.FieldIsPrivate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_private", values[i])
			} else if value.Valid {
				sp.IsPrivate = value.Bool
			}
		case storagepolicy.FieldAccessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_key", values[i])
			} else if value.Valid {
				sp.AccessKey = value.String
			}
		case storagepolicy.FieldSecretKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_key", values[i])
			} else if value.Valid {
				sp.SecretKey = value.String
			}
		case storagepolicy.FieldMaxSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_size", values[i])
			} else if value.Valid {
				sp.MaxSize = value.Int64
			}
		case storagepolicy.FieldBasePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base_path", values[i])
			} else if value.Valid {
				sp.BasePath = value.String
			}
		case storagepolicy.FieldVirtualPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field virtual_path", values[i])
			} else if value.Valid {
				sp.VirtualPath = value.String
			}
		case storagepolicy.FieldSettings:
			if value, ok := values[i].(*model.StoragePolicySettings); !ok {
				return fmt.Errorf("unexpected type %T for field settings", values[i])
			} else if value != nil {
				sp.Settings = *value
			}
		case storagepolicy.FieldNodeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value.Valid {
				sp.NodeID = new(uint)
				*sp.NodeID = uint(value.Int64)
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StoragePolicy.
// This includes values selected through modifiers, order, etc.
func (sp *StoragePolicy) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// Update returns a builder for updating this StoragePolicy.
// Note that you need to call StoragePolicy.Unwrap() before calling this method if this StoragePolicy
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *StoragePolicy) Update() *StoragePolicyUpdateOne {
	return NewStoragePolicyClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the StoragePolicy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *StoragePolicy) Unwrap() *StoragePolicy {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: StoragePolicy is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *StoragePolicy) String() string {
	var builder strings.Builder
	builder.WriteString("StoragePolicy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	if v := sp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sp.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(sp.Type)
	builder.WriteString(", ")
	builder.WriteString("flag=")
	builder.WriteString(sp.Flag)
	builder.WriteString(", ")
	builder.WriteString("server=")
	builder.WriteString(sp.Server)
	builder.WriteString(", ")
	builder.WriteString("bucket_name=")
	builder.WriteString(sp.BucketName)
	builder.WriteString(", ")
	builder.WriteString("is_private=")
	builder.WriteString(fmt.Sprintf("%v", sp.IsPrivate))
	builder.WriteString(", ")
	builder.WriteString("access_key=")
	builder.WriteString(sp.AccessKey)
	builder.WriteString(", ")
	builder.WriteString("secret_key=")
	builder.WriteString(sp.SecretKey)
	builder.WriteString(", ")
	builder.WriteString("max_size=")
	builder.WriteString(fmt.Sprintf("%v", sp.MaxSize))
	builder.WriteString(", ")
	builder.WriteString("base_path=")
	builder.WriteString(sp.BasePath)
	builder.WriteString(", ")
	builder.WriteString("virtual_path=")
	builder.WriteString(sp.VirtualPath)
	builder.WriteString(", ")
	builder.WriteString("settings=")
	builder.WriteString(fmt.Sprintf("%v", sp.Settings))
	builder.WriteString(", ")
	if v := sp.NodeID; v != nil {
		builder.WriteString("node_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// StoragePolicies is a parsable slice of StoragePolicy.
type StoragePolicies []*StoragePolicy
