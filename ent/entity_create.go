// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/anzhiyu-c/anheyu-app/ent/entity"
	"github.com/anzhiyu-c/anheyu-app/ent/fileentity"
	"github.com/anzhiyu-c/anheyu-app/internal/domain/model"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntityCreate is the builder for creating a Entity entity.
type EntityCreate struct {
	config
	mutation *EntityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ec *EntityCreate) SetCreatedAt(t time.Time) *EntityCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EntityCreate) SetNillableCreatedAt(t *time.Time) *EntityCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EntityCreate) SetUpdatedAt(t time.Time) *EntityCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EntityCreate) SetNillableUpdatedAt(t *time.Time) *EntityCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetType sets the "type" field.
func (ec *EntityCreate) SetType(s string) *EntityCreate {
	ec.mutation.SetType(s)
	return ec
}

// SetSource sets the "source" field.
func (ec *EntityCreate) SetSource(s string) *EntityCreate {
	ec.mutation.SetSource(s)
	return ec
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (ec *EntityCreate) SetNillableSource(s *string) *EntityCreate {
	if s != nil {
		ec.SetSource(*s)
	}
	return ec
}

// SetSize sets the "size" field.
func (ec *EntityCreate) SetSize(i int64) *EntityCreate {
	ec.mutation.SetSize(i)
	return ec
}

// SetUploadSessionID sets the "upload_session_id" field.
func (ec *EntityCreate) SetUploadSessionID(s string) *EntityCreate {
	ec.mutation.SetUploadSessionID(s)
	return ec
}

// SetNillableUploadSessionID sets the "upload_session_id" field if the given value is not nil.
func (ec *EntityCreate) SetNillableUploadSessionID(s *string) *EntityCreate {
	if s != nil {
		ec.SetUploadSessionID(*s)
	}
	return ec
}

// SetRecycleOptions sets the "recycle_options" field.
func (ec *EntityCreate) SetRecycleOptions(s string) *EntityCreate {
	ec.mutation.SetRecycleOptions(s)
	return ec
}

// SetNillableRecycleOptions sets the "recycle_options" field if the given value is not nil.
func (ec *EntityCreate) SetNillableRecycleOptions(s *string) *EntityCreate {
	if s != nil {
		ec.SetRecycleOptions(*s)
	}
	return ec
}

// SetPolicyID sets the "policy_id" field.
func (ec *EntityCreate) SetPolicyID(u uint) *EntityCreate {
	ec.mutation.SetPolicyID(u)
	return ec
}

// SetCreatedBy sets the "created_by" field.
func (ec *EntityCreate) SetCreatedBy(u uint64) *EntityCreate {
	ec.mutation.SetCreatedBy(u)
	return ec
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ec *EntityCreate) SetNillableCreatedBy(u *uint64) *EntityCreate {
	if u != nil {
		ec.SetCreatedBy(*u)
	}
	return ec
}

// SetEtag sets the "etag" field.
func (ec *EntityCreate) SetEtag(s string) *EntityCreate {
	ec.mutation.SetEtag(s)
	return ec
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (ec *EntityCreate) SetNillableEtag(s *string) *EntityCreate {
	if s != nil {
		ec.SetEtag(*s)
	}
	return ec
}

// SetMimeType sets the "mime_type" field.
func (ec *EntityCreate) SetMimeType(s string) *EntityCreate {
	ec.mutation.SetMimeType(s)
	return ec
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (ec *EntityCreate) SetNillableMimeType(s *string) *EntityCreate {
	if s != nil {
		ec.SetMimeType(*s)
	}
	return ec
}

// SetDimension sets the "dimension" field.
func (ec *EntityCreate) SetDimension(s string) *EntityCreate {
	ec.mutation.SetDimension(s)
	return ec
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (ec *EntityCreate) SetNillableDimension(s *string) *EntityCreate {
	if s != nil {
		ec.SetDimension(*s)
	}
	return ec
}

// SetStorageMetadata sets the "storage_metadata" field.
func (ec *EntityCreate) SetStorageMetadata(mm model.JSONMap) *EntityCreate {
	ec.mutation.SetStorageMetadata(mm)
	return ec
}

// SetID sets the "id" field.
func (ec *EntityCreate) SetID(u uint) *EntityCreate {
	ec.mutation.SetID(u)
	return ec
}

// AddFileVersionIDs adds the "file_versions" edge to the FileEntity entity by IDs.
func (ec *EntityCreate) AddFileVersionIDs(ids ...uint) *EntityCreate {
	ec.mutation.AddFileVersionIDs(ids...)
	return ec
}

// AddFileVersions adds the "file_versions" edges to the FileEntity entity.
func (ec *EntityCreate) AddFileVersions(f ...*FileEntity) *EntityCreate {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ec.AddFileVersionIDs(ids...)
}

// Mutation returns the EntityMutation object of the builder.
func (ec *EntityCreate) Mutation() *EntityMutation {
	return ec.mutation
}

// Save creates the Entity in the database.
func (ec *EntityCreate) Save(ctx context.Context) (*Entity, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EntityCreate) SaveX(ctx context.Context) *Entity {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EntityCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EntityCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EntityCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := entity.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := entity.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EntityCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Entity.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Entity.updated_at"`)}
	}
	if _, ok := ec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Entity.type"`)}
	}
	if _, ok := ec.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Entity.size"`)}
	}
	if v, ok := ec.mutation.UploadSessionID(); ok {
		if err := entity.UploadSessionIDValidator(v); err != nil {
			return &ValidationError{Name: "upload_session_id", err: fmt.Errorf(`ent: validator failed for field "Entity.upload_session_id": %w`, err)}
		}
	}
	if _, ok := ec.mutation.PolicyID(); !ok {
		return &ValidationError{Name: "policy_id", err: errors.New(`ent: missing required field "Entity.policy_id"`)}
	}
	if v, ok := ec.mutation.Etag(); ok {
		if err := entity.EtagValidator(v); err != nil {
			return &ValidationError{Name: "etag", err: fmt.Errorf(`ent: validator failed for field "Entity.etag": %w`, err)}
		}
	}
	if v, ok := ec.mutation.MimeType(); ok {
		if err := entity.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "Entity.mime_type": %w`, err)}
		}
	}
	if v, ok := ec.mutation.Dimension(); ok {
		if err := entity.DimensionValidator(v); err != nil {
			return &ValidationError{Name: "dimension", err: fmt.Errorf(`ent: validator failed for field "Entity.dimension": %w`, err)}
		}
	}
	return nil
}

func (ec *EntityCreate) sqlSave(ctx context.Context) (*Entity, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EntityCreate) createSpec() (*Entity, *sqlgraph.CreateSpec) {
	var (
		_node = &Entity{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(entity.Table, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUint))
	)
	_spec.OnConflict = ec.conflict
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(entity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(entity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.GetType(); ok {
		_spec.SetField(entity.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ec.mutation.Source(); ok {
		_spec.SetField(entity.FieldSource, field.TypeString, value)
		_node.Source = &value
	}
	if value, ok := ec.mutation.Size(); ok {
		_spec.SetField(entity.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := ec.mutation.UploadSessionID(); ok {
		_spec.SetField(entity.FieldUploadSessionID, field.TypeString, value)
		_node.UploadSessionID = &value
	}
	if value, ok := ec.mutation.RecycleOptions(); ok {
		_spec.SetField(entity.FieldRecycleOptions, field.TypeString, value)
		_node.RecycleOptions = &value
	}
	if value, ok := ec.mutation.PolicyID(); ok {
		_spec.SetField(entity.FieldPolicyID, field.TypeUint, value)
		_node.PolicyID = value
	}
	if value, ok := ec.mutation.CreatedBy(); ok {
		_spec.SetField(entity.FieldCreatedBy, field.TypeUint64, value)
		_node.CreatedBy = &value
	}
	if value, ok := ec.mutation.Etag(); ok {
		_spec.SetField(entity.FieldEtag, field.TypeString, value)
		_node.Etag = &value
	}
	if value, ok := ec.mutation.MimeType(); ok {
		_spec.SetField(entity.FieldMimeType, field.TypeString, value)
		_node.MimeType = &value
	}
	if value, ok := ec.mutation.Dimension(); ok {
		_spec.SetField(entity.FieldDimension, field.TypeString, value)
		_node.Dimension = &value
	}
	if value, ok := ec.mutation.StorageMetadata(); ok {
		_spec.SetField(entity.FieldStorageMetadata, field.TypeOther, value)
		_node.StorageMetadata = value
	}
	if nodes := ec.mutation.FileVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.FileVersionsTable,
			Columns: []string{entity.FileVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileentity.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Entity.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EntityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ec *EntityCreate) OnConflict(opts ...sql.ConflictOption) *EntityUpsertOne {
	ec.conflict = opts
	return &EntityUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Entity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EntityCreate) OnConflictColumns(columns ...string) *EntityUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EntityUpsertOne{
		create: ec,
	}
}

type (
	// EntityUpsertOne is the builder for "upsert"-ing
	//  one Entity node.
	EntityUpsertOne struct {
		create *EntityCreate
	}

	// EntityUpsert is the "OnConflict" setter.
	EntityUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EntityUpsert) SetUpdatedAt(v time.Time) *EntityUpsert {
	u.Set(entity.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EntityUpsert) UpdateUpdatedAt() *EntityUpsert {
	u.SetExcluded(entity.FieldUpdatedAt)
	return u
}

// SetType sets the "type" field.
func (u *EntityUpsert) SetType(v string) *EntityUpsert {
	u.Set(entity.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EntityUpsert) UpdateType() *EntityUpsert {
	u.SetExcluded(entity.FieldType)
	return u
}

// SetSource sets the "source" field.
func (u *EntityUpsert) SetSource(v string) *EntityUpsert {
	u.Set(entity.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *EntityUpsert) UpdateSource() *EntityUpsert {
	u.SetExcluded(entity.FieldSource)
	return u
}

// ClearSource clears the value of the "source" field.
func (u *EntityUpsert) ClearSource() *EntityUpsert {
	u.SetNull(entity.FieldSource)
	return u
}

// SetSize sets the "size" field.
func (u *EntityUpsert) SetSize(v int64) *EntityUpsert {
	u.Set(entity.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *EntityUpsert) UpdateSize() *EntityUpsert {
	u.SetExcluded(entity.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *EntityUpsert) AddSize(v int64) *EntityUpsert {
	u.Add(entity.FieldSize, v)
	return u
}

// SetUploadSessionID sets the "upload_session_id" field.
func (u *EntityUpsert) SetUploadSessionID(v string) *EntityUpsert {
	u.Set(entity.FieldUploadSessionID, v)
	return u
}

// UpdateUploadSessionID sets the "upload_session_id" field to the value that was provided on create.
func (u *EntityUpsert) UpdateUploadSessionID() *EntityUpsert {
	u.SetExcluded(entity.FieldUploadSessionID)
	return u
}

// ClearUploadSessionID clears the value of the "upload_session_id" field.
func (u *EntityUpsert) ClearUploadSessionID() *EntityUpsert {
	u.SetNull(entity.FieldUploadSessionID)
	return u
}

// SetRecycleOptions sets the "recycle_options" field.
func (u *EntityUpsert) SetRecycleOptions(v string) *EntityUpsert {
	u.Set(entity.FieldRecycleOptions, v)
	return u
}

// UpdateRecycleOptions sets the "recycle_options" field to the value that was provided on create.
func (u *EntityUpsert) UpdateRecycleOptions() *EntityUpsert {
	u.SetExcluded(entity.FieldRecycleOptions)
	return u
}

// ClearRecycleOptions clears the value of the "recycle_options" field.
func (u *EntityUpsert) ClearRecycleOptions() *EntityUpsert {
	u.SetNull(entity.FieldRecycleOptions)
	return u
}

// SetPolicyID sets the "policy_id" field.
func (u *EntityUpsert) SetPolicyID(v uint) *EntityUpsert {
	u.Set(entity.FieldPolicyID, v)
	return u
}

// UpdatePolicyID sets the "policy_id" field to the value that was provided on create.
func (u *EntityUpsert) UpdatePolicyID() *EntityUpsert {
	u.SetExcluded(entity.FieldPolicyID)
	return u
}

// AddPolicyID adds v to the "policy_id" field.
func (u *EntityUpsert) AddPolicyID(v uint) *EntityUpsert {
	u.Add(entity.FieldPolicyID, v)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *EntityUpsert) SetCreatedBy(v uint64) *EntityUpsert {
	u.Set(entity.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *EntityUpsert) UpdateCreatedBy() *EntityUpsert {
	u.SetExcluded(entity.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *EntityUpsert) AddCreatedBy(v uint64) *EntityUpsert {
	u.Add(entity.FieldCreatedBy, v)
	return u
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *EntityUpsert) ClearCreatedBy() *EntityUpsert {
	u.SetNull(entity.FieldCreatedBy)
	return u
}

// SetEtag sets the "etag" field.
func (u *EntityUpsert) SetEtag(v string) *EntityUpsert {
	u.Set(entity.FieldEtag, v)
	return u
}

// UpdateEtag sets the "etag" field to the value that was provided on create.
func (u *EntityUpsert) UpdateEtag() *EntityUpsert {
	u.SetExcluded(entity.FieldEtag)
	return u
}

// ClearEtag clears the value of the "etag" field.
func (u *EntityUpsert) ClearEtag() *EntityUpsert {
	u.SetNull(entity.FieldEtag)
	return u
}

// SetMimeType sets the "mime_type" field.
func (u *EntityUpsert) SetMimeType(v string) *EntityUpsert {
	u.Set(entity.FieldMimeType, v)
	return u
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *EntityUpsert) UpdateMimeType() *EntityUpsert {
	u.SetExcluded(entity.FieldMimeType)
	return u
}

// ClearMimeType clears the value of the "mime_type" field.
func (u *EntityUpsert) ClearMimeType() *EntityUpsert {
	u.SetNull(entity.FieldMimeType)
	return u
}

// SetDimension sets the "dimension" field.
func (u *EntityUpsert) SetDimension(v string) *EntityUpsert {
	u.Set(entity.FieldDimension, v)
	return u
}

// UpdateDimension sets the "dimension" field to the value that was provided on create.
func (u *EntityUpsert) UpdateDimension() *EntityUpsert {
	u.SetExcluded(entity.FieldDimension)
	return u
}

// ClearDimension clears the value of the "dimension" field.
func (u *EntityUpsert) ClearDimension() *EntityUpsert {
	u.SetNull(entity.FieldDimension)
	return u
}

// SetStorageMetadata sets the "storage_metadata" field.
func (u *EntityUpsert) SetStorageMetadata(v model.JSONMap) *EntityUpsert {
	u.Set(entity.FieldStorageMetadata, v)
	return u
}

// UpdateStorageMetadata sets the "storage_metadata" field to the value that was provided on create.
func (u *EntityUpsert) UpdateStorageMetadata() *EntityUpsert {
	u.SetExcluded(entity.FieldStorageMetadata)
	return u
}

// ClearStorageMetadata clears the value of the "storage_metadata" field.
func (u *EntityUpsert) ClearStorageMetadata() *EntityUpsert {
	u.SetNull(entity.FieldStorageMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Entity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(entity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EntityUpsertOne) UpdateNewValues() *EntityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(entity.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(entity.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Entity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EntityUpsertOne) Ignore() *EntityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EntityUpsertOne) DoNothing() *EntityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EntityCreate.OnConflict
// documentation for more info.
func (u *EntityUpsertOne) Update(set func(*EntityUpsert)) *EntityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EntityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EntityUpsertOne) SetUpdatedAt(v time.Time) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdateUpdatedAt() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *EntityUpsertOne) SetType(v string) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdateType() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateType()
	})
}

// SetSource sets the "source" field.
func (u *EntityUpsertOne) SetSource(v string) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdateSource() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *EntityUpsertOne) ClearSource() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.ClearSource()
	})
}

// SetSize sets the "size" field.
func (u *EntityUpsertOne) SetSize(v int64) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *EntityUpsertOne) AddSize(v int64) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdateSize() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateSize()
	})
}

// SetUploadSessionID sets the "upload_session_id" field.
func (u *EntityUpsertOne) SetUploadSessionID(v string) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetUploadSessionID(v)
	})
}

// UpdateUploadSessionID sets the "upload_session_id" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdateUploadSessionID() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateUploadSessionID()
	})
}

// ClearUploadSessionID clears the value of the "upload_session_id" field.
func (u *EntityUpsertOne) ClearUploadSessionID() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.ClearUploadSessionID()
	})
}

// SetRecycleOptions sets the "recycle_options" field.
func (u *EntityUpsertOne) SetRecycleOptions(v string) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetRecycleOptions(v)
	})
}

// UpdateRecycleOptions sets the "recycle_options" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdateRecycleOptions() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateRecycleOptions()
	})
}

// ClearRecycleOptions clears the value of the "recycle_options" field.
func (u *EntityUpsertOne) ClearRecycleOptions() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.ClearRecycleOptions()
	})
}

// SetPolicyID sets the "policy_id" field.
func (u *EntityUpsertOne) SetPolicyID(v uint) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetPolicyID(v)
	})
}

// AddPolicyID adds v to the "policy_id" field.
func (u *EntityUpsertOne) AddPolicyID(v uint) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.AddPolicyID(v)
	})
}

// UpdatePolicyID sets the "policy_id" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdatePolicyID() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdatePolicyID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *EntityUpsertOne) SetCreatedBy(v uint64) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *EntityUpsertOne) AddCreatedBy(v uint64) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdateCreatedBy() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *EntityUpsertOne) ClearCreatedBy() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.ClearCreatedBy()
	})
}

// SetEtag sets the "etag" field.
func (u *EntityUpsertOne) SetEtag(v string) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetEtag(v)
	})
}

// UpdateEtag sets the "etag" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdateEtag() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateEtag()
	})
}

// ClearEtag clears the value of the "etag" field.
func (u *EntityUpsertOne) ClearEtag() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.ClearEtag()
	})
}

// SetMimeType sets the "mime_type" field.
func (u *EntityUpsertOne) SetMimeType(v string) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetMimeType(v)
	})
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdateMimeType() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateMimeType()
	})
}

// ClearMimeType clears the value of the "mime_type" field.
func (u *EntityUpsertOne) ClearMimeType() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.ClearMimeType()
	})
}

// SetDimension sets the "dimension" field.
func (u *EntityUpsertOne) SetDimension(v string) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetDimension(v)
	})
}

// UpdateDimension sets the "dimension" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdateDimension() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateDimension()
	})
}

// ClearDimension clears the value of the "dimension" field.
func (u *EntityUpsertOne) ClearDimension() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.ClearDimension()
	})
}

// SetStorageMetadata sets the "storage_metadata" field.
func (u *EntityUpsertOne) SetStorageMetadata(v model.JSONMap) *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.SetStorageMetadata(v)
	})
}

// UpdateStorageMetadata sets the "storage_metadata" field to the value that was provided on create.
func (u *EntityUpsertOne) UpdateStorageMetadata() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateStorageMetadata()
	})
}

// ClearStorageMetadata clears the value of the "storage_metadata" field.
func (u *EntityUpsertOne) ClearStorageMetadata() *EntityUpsertOne {
	return u.Update(func(s *EntityUpsert) {
		s.ClearStorageMetadata()
	})
}

// Exec executes the query.
func (u *EntityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EntityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EntityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EntityUpsertOne) ID(ctx context.Context) (id uint, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EntityUpsertOne) IDX(ctx context.Context) uint {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EntityCreateBulk is the builder for creating many Entity entities in bulk.
type EntityCreateBulk struct {
	config
	err      error
	builders []*EntityCreate
	conflict []sql.ConflictOption
}

// Save creates the Entity entities in the database.
func (ecb *EntityCreateBulk) Save(ctx context.Context) ([]*Entity, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Entity, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EntityCreateBulk) SaveX(ctx context.Context) []*Entity {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EntityCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EntityCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Entity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EntityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ecb *EntityCreateBulk) OnConflict(opts ...sql.ConflictOption) *EntityUpsertBulk {
	ecb.conflict = opts
	return &EntityUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Entity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EntityCreateBulk) OnConflictColumns(columns ...string) *EntityUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EntityUpsertBulk{
		create: ecb,
	}
}

// EntityUpsertBulk is the builder for "upsert"-ing
// a bulk of Entity nodes.
type EntityUpsertBulk struct {
	create *EntityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Entity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(entity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EntityUpsertBulk) UpdateNewValues() *EntityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(entity.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(entity.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Entity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EntityUpsertBulk) Ignore() *EntityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EntityUpsertBulk) DoNothing() *EntityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EntityCreateBulk.OnConflict
// documentation for more info.
func (u *EntityUpsertBulk) Update(set func(*EntityUpsert)) *EntityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EntityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EntityUpsertBulk) SetUpdatedAt(v time.Time) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdateUpdatedAt() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetType sets the "type" field.
func (u *EntityUpsertBulk) SetType(v string) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdateType() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateType()
	})
}

// SetSource sets the "source" field.
func (u *EntityUpsertBulk) SetSource(v string) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdateSource() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *EntityUpsertBulk) ClearSource() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.ClearSource()
	})
}

// SetSize sets the "size" field.
func (u *EntityUpsertBulk) SetSize(v int64) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *EntityUpsertBulk) AddSize(v int64) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdateSize() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateSize()
	})
}

// SetUploadSessionID sets the "upload_session_id" field.
func (u *EntityUpsertBulk) SetUploadSessionID(v string) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetUploadSessionID(v)
	})
}

// UpdateUploadSessionID sets the "upload_session_id" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdateUploadSessionID() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateUploadSessionID()
	})
}

// ClearUploadSessionID clears the value of the "upload_session_id" field.
func (u *EntityUpsertBulk) ClearUploadSessionID() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.ClearUploadSessionID()
	})
}

// SetRecycleOptions sets the "recycle_options" field.
func (u *EntityUpsertBulk) SetRecycleOptions(v string) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetRecycleOptions(v)
	})
}

// UpdateRecycleOptions sets the "recycle_options" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdateRecycleOptions() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateRecycleOptions()
	})
}

// ClearRecycleOptions clears the value of the "recycle_options" field.
func (u *EntityUpsertBulk) ClearRecycleOptions() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.ClearRecycleOptions()
	})
}

// SetPolicyID sets the "policy_id" field.
func (u *EntityUpsertBulk) SetPolicyID(v uint) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetPolicyID(v)
	})
}

// AddPolicyID adds v to the "policy_id" field.
func (u *EntityUpsertBulk) AddPolicyID(v uint) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.AddPolicyID(v)
	})
}

// UpdatePolicyID sets the "policy_id" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdatePolicyID() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdatePolicyID()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *EntityUpsertBulk) SetCreatedBy(v uint64) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *EntityUpsertBulk) AddCreatedBy(v uint64) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdateCreatedBy() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateCreatedBy()
	})
}

// ClearCreatedBy clears the value of the "created_by" field.
func (u *EntityUpsertBulk) ClearCreatedBy() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.ClearCreatedBy()
	})
}

// SetEtag sets the "etag" field.
func (u *EntityUpsertBulk) SetEtag(v string) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetEtag(v)
	})
}

// UpdateEtag sets the "etag" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdateEtag() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateEtag()
	})
}

// ClearEtag clears the value of the "etag" field.
func (u *EntityUpsertBulk) ClearEtag() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.ClearEtag()
	})
}

// SetMimeType sets the "mime_type" field.
func (u *EntityUpsertBulk) SetMimeType(v string) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetMimeType(v)
	})
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdateMimeType() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateMimeType()
	})
}

// ClearMimeType clears the value of the "mime_type" field.
func (u *EntityUpsertBulk) ClearMimeType() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.ClearMimeType()
	})
}

// SetDimension sets the "dimension" field.
func (u *EntityUpsertBulk) SetDimension(v string) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetDimension(v)
	})
}

// UpdateDimension sets the "dimension" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdateDimension() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateDimension()
	})
}

// ClearDimension clears the value of the "dimension" field.
func (u *EntityUpsertBulk) ClearDimension() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.ClearDimension()
	})
}

// SetStorageMetadata sets the "storage_metadata" field.
func (u *EntityUpsertBulk) SetStorageMetadata(v model.JSONMap) *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.SetStorageMetadata(v)
	})
}

// UpdateStorageMetadata sets the "storage_metadata" field to the value that was provided on create.
func (u *EntityUpsertBulk) UpdateStorageMetadata() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.UpdateStorageMetadata()
	})
}

// ClearStorageMetadata clears the value of the "storage_metadata" field.
func (u *EntityUpsertBulk) ClearStorageMetadata() *EntityUpsertBulk {
	return u.Update(func(s *EntityUpsert) {
		s.ClearStorageMetadata()
	})
}

// Exec executes the query.
func (u *EntityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EntityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EntityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EntityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
