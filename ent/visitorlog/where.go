// Code generated by ent, DO NOT EDIT.

package visitorlog

import (
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldCreatedAt, v))
}

// VisitorID applies equality check predicate on the "visitor_id" field. It's identical to VisitorIDEQ.
func VisitorID(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldVisitorID, v))
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldSessionID, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldIPAddress, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldUserAgent, v))
}

// Referer applies equality check predicate on the "referer" field. It's identical to RefererEQ.
func Referer(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldReferer, v))
}

// URLPath applies equality check predicate on the "url_path" field. It's identical to URLPathEQ.
func URLPath(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldURLPath, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldCountry, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldRegion, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldCity, v))
}

// Browser applies equality check predicate on the "browser" field. It's identical to BrowserEQ.
func Browser(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldBrowser, v))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldOs, v))
}

// Device applies equality check predicate on the "device" field. It's identical to DeviceEQ.
func Device(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldDevice, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldDuration, v))
}

// IsBounce applies equality check predicate on the "is_bounce" field. It's identical to IsBounceEQ.
func IsBounce(v bool) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldIsBounce, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldCreatedAt, v))
}

// VisitorIDEQ applies the EQ predicate on the "visitor_id" field.
func VisitorIDEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldVisitorID, v))
}

// VisitorIDNEQ applies the NEQ predicate on the "visitor_id" field.
func VisitorIDNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldVisitorID, v))
}

// VisitorIDIn applies the In predicate on the "visitor_id" field.
func VisitorIDIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldVisitorID, vs...))
}

// VisitorIDNotIn applies the NotIn predicate on the "visitor_id" field.
func VisitorIDNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldVisitorID, vs...))
}

// VisitorIDGT applies the GT predicate on the "visitor_id" field.
func VisitorIDGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldVisitorID, v))
}

// VisitorIDGTE applies the GTE predicate on the "visitor_id" field.
func VisitorIDGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldVisitorID, v))
}

// VisitorIDLT applies the LT predicate on the "visitor_id" field.
func VisitorIDLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldVisitorID, v))
}

// VisitorIDLTE applies the LTE predicate on the "visitor_id" field.
func VisitorIDLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldVisitorID, v))
}

// VisitorIDContains applies the Contains predicate on the "visitor_id" field.
func VisitorIDContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldVisitorID, v))
}

// VisitorIDHasPrefix applies the HasPrefix predicate on the "visitor_id" field.
func VisitorIDHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldVisitorID, v))
}

// VisitorIDHasSuffix applies the HasSuffix predicate on the "visitor_id" field.
func VisitorIDHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldVisitorID, v))
}

// VisitorIDEqualFold applies the EqualFold predicate on the "visitor_id" field.
func VisitorIDEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldVisitorID, v))
}

// VisitorIDContainsFold applies the ContainsFold predicate on the "visitor_id" field.
func VisitorIDContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldVisitorID, v))
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldSessionID, v))
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldSessionID, v))
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldSessionID, vs...))
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldSessionID, vs...))
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldSessionID, v))
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldSessionID, v))
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldSessionID, v))
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldSessionID, v))
}

// SessionIDContains applies the Contains predicate on the "session_id" field.
func SessionIDContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldSessionID, v))
}

// SessionIDHasPrefix applies the HasPrefix predicate on the "session_id" field.
func SessionIDHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldSessionID, v))
}

// SessionIDHasSuffix applies the HasSuffix predicate on the "session_id" field.
func SessionIDHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldSessionID, v))
}

// SessionIDIsNil applies the IsNil predicate on the "session_id" field.
func SessionIDIsNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIsNull(FieldSessionID))
}

// SessionIDNotNil applies the NotNil predicate on the "session_id" field.
func SessionIDNotNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotNull(FieldSessionID))
}

// SessionIDEqualFold applies the EqualFold predicate on the "session_id" field.
func SessionIDEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldSessionID, v))
}

// SessionIDContainsFold applies the ContainsFold predicate on the "session_id" field.
func SessionIDContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldSessionID, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldIPAddress, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldUserAgent, v))
}

// RefererEQ applies the EQ predicate on the "referer" field.
func RefererEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldReferer, v))
}

// RefererNEQ applies the NEQ predicate on the "referer" field.
func RefererNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldReferer, v))
}

// RefererIn applies the In predicate on the "referer" field.
func RefererIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldReferer, vs...))
}

// RefererNotIn applies the NotIn predicate on the "referer" field.
func RefererNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldReferer, vs...))
}

// RefererGT applies the GT predicate on the "referer" field.
func RefererGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldReferer, v))
}

// RefererGTE applies the GTE predicate on the "referer" field.
func RefererGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldReferer, v))
}

// RefererLT applies the LT predicate on the "referer" field.
func RefererLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldReferer, v))
}

// RefererLTE applies the LTE predicate on the "referer" field.
func RefererLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldReferer, v))
}

// RefererContains applies the Contains predicate on the "referer" field.
func RefererContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldReferer, v))
}

// RefererHasPrefix applies the HasPrefix predicate on the "referer" field.
func RefererHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldReferer, v))
}

// RefererHasSuffix applies the HasSuffix predicate on the "referer" field.
func RefererHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldReferer, v))
}

// RefererIsNil applies the IsNil predicate on the "referer" field.
func RefererIsNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIsNull(FieldReferer))
}

// RefererNotNil applies the NotNil predicate on the "referer" field.
func RefererNotNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotNull(FieldReferer))
}

// RefererEqualFold applies the EqualFold predicate on the "referer" field.
func RefererEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldReferer, v))
}

// RefererContainsFold applies the ContainsFold predicate on the "referer" field.
func RefererContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldReferer, v))
}

// URLPathEQ applies the EQ predicate on the "url_path" field.
func URLPathEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldURLPath, v))
}

// URLPathNEQ applies the NEQ predicate on the "url_path" field.
func URLPathNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldURLPath, v))
}

// URLPathIn applies the In predicate on the "url_path" field.
func URLPathIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldURLPath, vs...))
}

// URLPathNotIn applies the NotIn predicate on the "url_path" field.
func URLPathNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldURLPath, vs...))
}

// URLPathGT applies the GT predicate on the "url_path" field.
func URLPathGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldURLPath, v))
}

// URLPathGTE applies the GTE predicate on the "url_path" field.
func URLPathGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldURLPath, v))
}

// URLPathLT applies the LT predicate on the "url_path" field.
func URLPathLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldURLPath, v))
}

// URLPathLTE applies the LTE predicate on the "url_path" field.
func URLPathLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldURLPath, v))
}

// URLPathContains applies the Contains predicate on the "url_path" field.
func URLPathContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldURLPath, v))
}

// URLPathHasPrefix applies the HasPrefix predicate on the "url_path" field.
func URLPathHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldURLPath, v))
}

// URLPathHasSuffix applies the HasSuffix predicate on the "url_path" field.
func URLPathHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldURLPath, v))
}

// URLPathEqualFold applies the EqualFold predicate on the "url_path" field.
func URLPathEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldURLPath, v))
}

// URLPathContainsFold applies the ContainsFold predicate on the "url_path" field.
func URLPathContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldURLPath, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIsNull(FieldCountry))
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotNull(FieldCountry))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldCountry, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionIsNil applies the IsNil predicate on the "region" field.
func RegionIsNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIsNull(FieldRegion))
}

// RegionNotNil applies the NotNil predicate on the "region" field.
func RegionNotNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotNull(FieldRegion))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldRegion, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldCity, v))
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIsNull(FieldCity))
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotNull(FieldCity))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldCity, v))
}

// BrowserEQ applies the EQ predicate on the "browser" field.
func BrowserEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldBrowser, v))
}

// BrowserNEQ applies the NEQ predicate on the "browser" field.
func BrowserNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldBrowser, v))
}

// BrowserIn applies the In predicate on the "browser" field.
func BrowserIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldBrowser, vs...))
}

// BrowserNotIn applies the NotIn predicate on the "browser" field.
func BrowserNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldBrowser, vs...))
}

// BrowserGT applies the GT predicate on the "browser" field.
func BrowserGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldBrowser, v))
}

// BrowserGTE applies the GTE predicate on the "browser" field.
func BrowserGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldBrowser, v))
}

// BrowserLT applies the LT predicate on the "browser" field.
func BrowserLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldBrowser, v))
}

// BrowserLTE applies the LTE predicate on the "browser" field.
func BrowserLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldBrowser, v))
}

// BrowserContains applies the Contains predicate on the "browser" field.
func BrowserContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldBrowser, v))
}

// BrowserHasPrefix applies the HasPrefix predicate on the "browser" field.
func BrowserHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldBrowser, v))
}

// BrowserHasSuffix applies the HasSuffix predicate on the "browser" field.
func BrowserHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldBrowser, v))
}

// BrowserIsNil applies the IsNil predicate on the "browser" field.
func BrowserIsNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIsNull(FieldBrowser))
}

// BrowserNotNil applies the NotNil predicate on the "browser" field.
func BrowserNotNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotNull(FieldBrowser))
}

// BrowserEqualFold applies the EqualFold predicate on the "browser" field.
func BrowserEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldBrowser, v))
}

// BrowserContainsFold applies the ContainsFold predicate on the "browser" field.
func BrowserContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldBrowser, v))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldOs, v))
}

// OsIsNil applies the IsNil predicate on the "os" field.
func OsIsNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIsNull(FieldOs))
}

// OsNotNil applies the NotNil predicate on the "os" field.
func OsNotNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotNull(FieldOs))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldOs, v))
}

// DeviceEQ applies the EQ predicate on the "device" field.
func DeviceEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldDevice, v))
}

// DeviceNEQ applies the NEQ predicate on the "device" field.
func DeviceNEQ(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldDevice, v))
}

// DeviceIn applies the In predicate on the "device" field.
func DeviceIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldDevice, vs...))
}

// DeviceNotIn applies the NotIn predicate on the "device" field.
func DeviceNotIn(vs ...string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldDevice, vs...))
}

// DeviceGT applies the GT predicate on the "device" field.
func DeviceGT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldDevice, v))
}

// DeviceGTE applies the GTE predicate on the "device" field.
func DeviceGTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldDevice, v))
}

// DeviceLT applies the LT predicate on the "device" field.
func DeviceLT(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldDevice, v))
}

// DeviceLTE applies the LTE predicate on the "device" field.
func DeviceLTE(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldDevice, v))
}

// DeviceContains applies the Contains predicate on the "device" field.
func DeviceContains(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContains(FieldDevice, v))
}

// DeviceHasPrefix applies the HasPrefix predicate on the "device" field.
func DeviceHasPrefix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasPrefix(FieldDevice, v))
}

// DeviceHasSuffix applies the HasSuffix predicate on the "device" field.
func DeviceHasSuffix(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldHasSuffix(FieldDevice, v))
}

// DeviceIsNil applies the IsNil predicate on the "device" field.
func DeviceIsNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIsNull(FieldDevice))
}

// DeviceNotNil applies the NotNil predicate on the "device" field.
func DeviceNotNil() predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotNull(FieldDevice))
}

// DeviceEqualFold applies the EqualFold predicate on the "device" field.
func DeviceEqualFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEqualFold(FieldDevice, v))
}

// DeviceContainsFold applies the ContainsFold predicate on the "device" field.
func DeviceContainsFold(v string) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldContainsFold(FieldDevice, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldLTE(FieldDuration, v))
}

// IsBounceEQ applies the EQ predicate on the "is_bounce" field.
func IsBounceEQ(v bool) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldEQ(FieldIsBounce, v))
}

// IsBounceNEQ applies the NEQ predicate on the "is_bounce" field.
func IsBounceNEQ(v bool) predicate.VisitorLog {
	return predicate.VisitorLog(sql.FieldNEQ(FieldIsBounce, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VisitorLog) predicate.VisitorLog {
	return predicate.VisitorLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VisitorLog) predicate.VisitorLog {
	return predicate.VisitorLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VisitorLog) predicate.VisitorLog {
	return predicate.VisitorLog(sql.NotPredicates(p))
}
