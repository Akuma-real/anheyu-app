// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/anzhiyu-c/anheyu-app/ent/comment"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
	"github.com/anzhiyu-c/anheyu-app/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks     []Hook
	mutation  *CommentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CommentUpdate builder.
func (cu *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CommentUpdate) SetDeletedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableDeletedAt(t *time.Time) *CommentUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CommentUpdate) ClearDeletedAt() *CommentUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommentUpdate) SetUpdatedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetTargetPath sets the "target_path" field.
func (cu *CommentUpdate) SetTargetPath(s string) *CommentUpdate {
	cu.mutation.SetTargetPath(s)
	return cu
}

// SetNillableTargetPath sets the "target_path" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableTargetPath(s *string) *CommentUpdate {
	if s != nil {
		cu.SetTargetPath(*s)
	}
	return cu
}

// SetTargetTitle sets the "target_title" field.
func (cu *CommentUpdate) SetTargetTitle(s string) *CommentUpdate {
	cu.mutation.SetTargetTitle(s)
	return cu
}

// SetNillableTargetTitle sets the "target_title" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableTargetTitle(s *string) *CommentUpdate {
	if s != nil {
		cu.SetTargetTitle(*s)
	}
	return cu
}

// ClearTargetTitle clears the value of the "target_title" field.
func (cu *CommentUpdate) ClearTargetTitle() *CommentUpdate {
	cu.mutation.ClearTargetTitle()
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CommentUpdate) SetUserID(u uint) *CommentUpdate {
	cu.mutation.SetUserID(u)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUserID(u *uint) *CommentUpdate {
	if u != nil {
		cu.SetUserID(*u)
	}
	return cu
}

// ClearUserID clears the value of the "user_id" field.
func (cu *CommentUpdate) ClearUserID() *CommentUpdate {
	cu.mutation.ClearUserID()
	return cu
}

// SetParentID sets the "parent_id" field.
func (cu *CommentUpdate) SetParentID(u uint) *CommentUpdate {
	cu.mutation.SetParentID(u)
	return cu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableParentID(u *uint) *CommentUpdate {
	if u != nil {
		cu.SetParentID(*u)
	}
	return cu
}

// ClearParentID clears the value of the "parent_id" field.
func (cu *CommentUpdate) ClearParentID() *CommentUpdate {
	cu.mutation.ClearParentID()
	return cu
}

// SetNickname sets the "nickname" field.
func (cu *CommentUpdate) SetNickname(s string) *CommentUpdate {
	cu.mutation.SetNickname(s)
	return cu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableNickname(s *string) *CommentUpdate {
	if s != nil {
		cu.SetNickname(*s)
	}
	return cu
}

// SetEmail sets the "email" field.
func (cu *CommentUpdate) SetEmail(s string) *CommentUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableEmail(s *string) *CommentUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// ClearEmail clears the value of the "email" field.
func (cu *CommentUpdate) ClearEmail() *CommentUpdate {
	cu.mutation.ClearEmail()
	return cu
}

// SetEmailMd5 sets the "email_md5" field.
func (cu *CommentUpdate) SetEmailMd5(s string) *CommentUpdate {
	cu.mutation.SetEmailMd5(s)
	return cu
}

// SetNillableEmailMd5 sets the "email_md5" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableEmailMd5(s *string) *CommentUpdate {
	if s != nil {
		cu.SetEmailMd5(*s)
	}
	return cu
}

// SetWebsite sets the "website" field.
func (cu *CommentUpdate) SetWebsite(s string) *CommentUpdate {
	cu.mutation.SetWebsite(s)
	return cu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableWebsite(s *string) *CommentUpdate {
	if s != nil {
		cu.SetWebsite(*s)
	}
	return cu
}

// ClearWebsite clears the value of the "website" field.
func (cu *CommentUpdate) ClearWebsite() *CommentUpdate {
	cu.mutation.ClearWebsite()
	return cu
}

// SetContent sets the "content" field.
func (cu *CommentUpdate) SetContent(s string) *CommentUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableContent(s *string) *CommentUpdate {
	if s != nil {
		cu.SetContent(*s)
	}
	return cu
}

// SetContentHTML sets the "content_html" field.
func (cu *CommentUpdate) SetContentHTML(s string) *CommentUpdate {
	cu.mutation.SetContentHTML(s)
	return cu
}

// SetNillableContentHTML sets the "content_html" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableContentHTML(s *string) *CommentUpdate {
	if s != nil {
		cu.SetContentHTML(*s)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *CommentUpdate) SetStatus(i int) *CommentUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(i)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableStatus(i *int) *CommentUpdate {
	if i != nil {
		cu.SetStatus(*i)
	}
	return cu
}

// AddStatus adds i to the "status" field.
func (cu *CommentUpdate) AddStatus(i int) *CommentUpdate {
	cu.mutation.AddStatus(i)
	return cu
}

// SetIsAdminComment sets the "is_admin_comment" field.
func (cu *CommentUpdate) SetIsAdminComment(b bool) *CommentUpdate {
	cu.mutation.SetIsAdminComment(b)
	return cu
}

// SetNillableIsAdminComment sets the "is_admin_comment" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableIsAdminComment(b *bool) *CommentUpdate {
	if b != nil {
		cu.SetIsAdminComment(*b)
	}
	return cu
}

// SetAllowNotification sets the "allow_notification" field.
func (cu *CommentUpdate) SetAllowNotification(b bool) *CommentUpdate {
	cu.mutation.SetAllowNotification(b)
	return cu
}

// SetNillableAllowNotification sets the "allow_notification" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableAllowNotification(b *bool) *CommentUpdate {
	if b != nil {
		cu.SetAllowNotification(*b)
	}
	return cu
}

// SetUserAgent sets the "user_agent" field.
func (cu *CommentUpdate) SetUserAgent(s string) *CommentUpdate {
	cu.mutation.SetUserAgent(s)
	return cu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableUserAgent(s *string) *CommentUpdate {
	if s != nil {
		cu.SetUserAgent(*s)
	}
	return cu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (cu *CommentUpdate) ClearUserAgent() *CommentUpdate {
	cu.mutation.ClearUserAgent()
	return cu
}

// SetIPAddress sets the "ip_address" field.
func (cu *CommentUpdate) SetIPAddress(s string) *CommentUpdate {
	cu.mutation.SetIPAddress(s)
	return cu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableIPAddress(s *string) *CommentUpdate {
	if s != nil {
		cu.SetIPAddress(*s)
	}
	return cu
}

// SetIPLocation sets the "ip_location" field.
func (cu *CommentUpdate) SetIPLocation(s string) *CommentUpdate {
	cu.mutation.SetIPLocation(s)
	return cu
}

// SetNillableIPLocation sets the "ip_location" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableIPLocation(s *string) *CommentUpdate {
	if s != nil {
		cu.SetIPLocation(*s)
	}
	return cu
}

// ClearIPLocation clears the value of the "ip_location" field.
func (cu *CommentUpdate) ClearIPLocation() *CommentUpdate {
	cu.mutation.ClearIPLocation()
	return cu
}

// SetLikeCount sets the "like_count" field.
func (cu *CommentUpdate) SetLikeCount(i int) *CommentUpdate {
	cu.mutation.ResetLikeCount()
	cu.mutation.SetLikeCount(i)
	return cu
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (cu *CommentUpdate) SetNillableLikeCount(i *int) *CommentUpdate {
	if i != nil {
		cu.SetLikeCount(*i)
	}
	return cu
}

// AddLikeCount adds i to the "like_count" field.
func (cu *CommentUpdate) AddLikeCount(i int) *CommentUpdate {
	cu.mutation.AddLikeCount(i)
	return cu
}

// SetPinnedAt sets the "pinned_at" field.
func (cu *CommentUpdate) SetPinnedAt(t time.Time) *CommentUpdate {
	cu.mutation.SetPinnedAt(t)
	return cu
}

// SetNillablePinnedAt sets the "pinned_at" field if the given value is not nil.
func (cu *CommentUpdate) SetNillablePinnedAt(t *time.Time) *CommentUpdate {
	if t != nil {
		cu.SetPinnedAt(*t)
	}
	return cu
}

// ClearPinnedAt clears the value of the "pinned_at" field.
func (cu *CommentUpdate) ClearPinnedAt() *CommentUpdate {
	cu.mutation.ClearPinnedAt()
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *CommentUpdate) SetUser(u *User) *CommentUpdate {
	return cu.SetUserID(u.ID)
}

// SetChildrenID sets the "children" edge to the Comment entity by ID.
func (cu *CommentUpdate) SetChildrenID(id uint) *CommentUpdate {
	cu.mutation.SetChildrenID(id)
	return cu
}

// SetNillableChildrenID sets the "children" edge to the Comment entity by ID if the given value is not nil.
func (cu *CommentUpdate) SetNillableChildrenID(id *uint) *CommentUpdate {
	if id != nil {
		cu = cu.SetChildrenID(*id)
	}
	return cu
}

// SetChildren sets the "children" edge to the Comment entity.
func (cu *CommentUpdate) SetChildren(c *Comment) *CommentUpdate {
	return cu.SetChildrenID(c.ID)
}

// AddParentIDs adds the "parent" edge to the Comment entity by IDs.
func (cu *CommentUpdate) AddParentIDs(ids ...uint) *CommentUpdate {
	cu.mutation.AddParentIDs(ids...)
	return cu
}

// AddParent adds the "parent" edges to the Comment entity.
func (cu *CommentUpdate) AddParent(c ...*Comment) *CommentUpdate {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddParentIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cu *CommentUpdate) Mutation() *CommentMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CommentUpdate) ClearUser() *CommentUpdate {
	cu.mutation.ClearUser()
	return cu
}

// ClearChildren clears the "children" edge to the Comment entity.
func (cu *CommentUpdate) ClearChildren() *CommentUpdate {
	cu.mutation.ClearChildren()
	return cu
}

// ClearParent clears all "parent" edges to the Comment entity.
func (cu *CommentUpdate) ClearParent() *CommentUpdate {
	cu.mutation.ClearParent()
	return cu
}

// RemoveParentIDs removes the "parent" edge to Comment entities by IDs.
func (cu *CommentUpdate) RemoveParentIDs(ids ...uint) *CommentUpdate {
	cu.mutation.RemoveParentIDs(ids...)
	return cu
}

// RemoveParent removes "parent" edges to Comment entities.
func (cu *CommentUpdate) RemoveParent(c ...*Comment) *CommentUpdate {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveParentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommentUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if comment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized comment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := comment.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommentUpdate) check() error {
	if v, ok := cu.mutation.TargetPath(); ok {
		if err := comment.TargetPathValidator(v); err != nil {
			return &ValidationError{Name: "target_path", err: fmt.Errorf(`ent: validator failed for field "Comment.target_path": %w`, err)}
		}
	}
	if v, ok := cu.mutation.TargetTitle(); ok {
		if err := comment.TargetTitleValidator(v); err != nil {
			return &ValidationError{Name: "target_title", err: fmt.Errorf(`ent: validator failed for field "Comment.target_title": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Nickname(); ok {
		if err := comment.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Comment.nickname": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Email(); ok {
		if err := comment.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Comment.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.EmailMd5(); ok {
		if err := comment.EmailMd5Validator(v); err != nil {
			return &ValidationError{Name: "email_md5", err: fmt.Errorf(`ent: validator failed for field "Comment.email_md5": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Website(); ok {
		if err := comment.WebsiteValidator(v); err != nil {
			return &ValidationError{Name: "website", err: fmt.Errorf(`ent: validator failed for field "Comment.website": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ContentHTML(); ok {
		if err := comment.ContentHTMLValidator(v); err != nil {
			return &ValidationError{Name: "content_html", err: fmt.Errorf(`ent: validator failed for field "Comment.content_html": %w`, err)}
		}
	}
	if v, ok := cu.mutation.UserAgent(); ok {
		if err := comment.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "Comment.user_agent": %w`, err)}
		}
	}
	if v, ok := cu.mutation.IPAddress(); ok {
		if err := comment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_address": %w`, err)}
		}
	}
	if v, ok := cu.mutation.IPLocation(); ok {
		if err := comment.IPLocationValidator(v); err != nil {
			return &ValidationError{Name: "ip_location", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_location": %w`, err)}
		}
	}
	if v, ok := cu.mutation.LikeCount(); ok {
		if err := comment.LikeCountValidator(v); err != nil {
			return &ValidationError{Name: "like_count", err: fmt.Errorf(`ent: validator failed for field "Comment.like_count": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CommentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommentUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(comment.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(comment.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.TargetPath(); ok {
		_spec.SetField(comment.FieldTargetPath, field.TypeString, value)
	}
	if value, ok := cu.mutation.TargetTitle(); ok {
		_spec.SetField(comment.FieldTargetTitle, field.TypeString, value)
	}
	if cu.mutation.TargetTitleCleared() {
		_spec.ClearField(comment.FieldTargetTitle, field.TypeString)
	}
	if value, ok := cu.mutation.Nickname(); ok {
		_spec.SetField(comment.FieldNickname, field.TypeString, value)
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(comment.FieldEmail, field.TypeString, value)
	}
	if cu.mutation.EmailCleared() {
		_spec.ClearField(comment.FieldEmail, field.TypeString)
	}
	if value, ok := cu.mutation.EmailMd5(); ok {
		_spec.SetField(comment.FieldEmailMd5, field.TypeString, value)
	}
	if value, ok := cu.mutation.Website(); ok {
		_spec.SetField(comment.FieldWebsite, field.TypeString, value)
	}
	if cu.mutation.WebsiteCleared() {
		_spec.ClearField(comment.FieldWebsite, field.TypeString)
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := cu.mutation.ContentHTML(); ok {
		_spec.SetField(comment.FieldContentHTML, field.TypeString, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cu.mutation.IsAdminComment(); ok {
		_spec.SetField(comment.FieldIsAdminComment, field.TypeBool, value)
	}
	if value, ok := cu.mutation.AllowNotification(); ok {
		_spec.SetField(comment.FieldAllowNotification, field.TypeBool, value)
	}
	if value, ok := cu.mutation.UserAgent(); ok {
		_spec.SetField(comment.FieldUserAgent, field.TypeString, value)
	}
	if cu.mutation.UserAgentCleared() {
		_spec.ClearField(comment.FieldUserAgent, field.TypeString)
	}
	if value, ok := cu.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := cu.mutation.IPLocation(); ok {
		_spec.SetField(comment.FieldIPLocation, field.TypeString, value)
	}
	if cu.mutation.IPLocationCleared() {
		_spec.ClearField(comment.FieldIPLocation, field.TypeString)
	}
	if value, ok := cu.mutation.LikeCount(); ok {
		_spec.SetField(comment.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLikeCount(); ok {
		_spec.AddField(comment.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.PinnedAt(); ok {
		_spec.SetField(comment.FieldPinnedAt, field.TypeTime, value)
	}
	if cu.mutation.PinnedAtCleared() {
		_spec.ClearField(comment.FieldPinnedAt, field.TypeTime)
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: []string{comment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: []string{comment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ChildrenTable,
			Columns: []string{comment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ChildrenTable,
			Columns: []string{comment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedParentIDs(); len(nodes) > 0 && !cu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CommentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CommentUpdateOne) SetDeletedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableDeletedAt(t *time.Time) *CommentUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CommentUpdateOne) ClearDeletedAt() *CommentUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommentUpdateOne) SetUpdatedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetTargetPath sets the "target_path" field.
func (cuo *CommentUpdateOne) SetTargetPath(s string) *CommentUpdateOne {
	cuo.mutation.SetTargetPath(s)
	return cuo
}

// SetNillableTargetPath sets the "target_path" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableTargetPath(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetTargetPath(*s)
	}
	return cuo
}

// SetTargetTitle sets the "target_title" field.
func (cuo *CommentUpdateOne) SetTargetTitle(s string) *CommentUpdateOne {
	cuo.mutation.SetTargetTitle(s)
	return cuo
}

// SetNillableTargetTitle sets the "target_title" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableTargetTitle(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetTargetTitle(*s)
	}
	return cuo
}

// ClearTargetTitle clears the value of the "target_title" field.
func (cuo *CommentUpdateOne) ClearTargetTitle() *CommentUpdateOne {
	cuo.mutation.ClearTargetTitle()
	return cuo
}

// SetUserID sets the "user_id" field.
func (cuo *CommentUpdateOne) SetUserID(u uint) *CommentUpdateOne {
	cuo.mutation.SetUserID(u)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUserID(u *uint) *CommentUpdateOne {
	if u != nil {
		cuo.SetUserID(*u)
	}
	return cuo
}

// ClearUserID clears the value of the "user_id" field.
func (cuo *CommentUpdateOne) ClearUserID() *CommentUpdateOne {
	cuo.mutation.ClearUserID()
	return cuo
}

// SetParentID sets the "parent_id" field.
func (cuo *CommentUpdateOne) SetParentID(u uint) *CommentUpdateOne {
	cuo.mutation.SetParentID(u)
	return cuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableParentID(u *uint) *CommentUpdateOne {
	if u != nil {
		cuo.SetParentID(*u)
	}
	return cuo
}

// ClearParentID clears the value of the "parent_id" field.
func (cuo *CommentUpdateOne) ClearParentID() *CommentUpdateOne {
	cuo.mutation.ClearParentID()
	return cuo
}

// SetNickname sets the "nickname" field.
func (cuo *CommentUpdateOne) SetNickname(s string) *CommentUpdateOne {
	cuo.mutation.SetNickname(s)
	return cuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableNickname(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetNickname(*s)
	}
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CommentUpdateOne) SetEmail(s string) *CommentUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableEmail(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// ClearEmail clears the value of the "email" field.
func (cuo *CommentUpdateOne) ClearEmail() *CommentUpdateOne {
	cuo.mutation.ClearEmail()
	return cuo
}

// SetEmailMd5 sets the "email_md5" field.
func (cuo *CommentUpdateOne) SetEmailMd5(s string) *CommentUpdateOne {
	cuo.mutation.SetEmailMd5(s)
	return cuo
}

// SetNillableEmailMd5 sets the "email_md5" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableEmailMd5(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetEmailMd5(*s)
	}
	return cuo
}

// SetWebsite sets the "website" field.
func (cuo *CommentUpdateOne) SetWebsite(s string) *CommentUpdateOne {
	cuo.mutation.SetWebsite(s)
	return cuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableWebsite(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetWebsite(*s)
	}
	return cuo
}

// ClearWebsite clears the value of the "website" field.
func (cuo *CommentUpdateOne) ClearWebsite() *CommentUpdateOne {
	cuo.mutation.ClearWebsite()
	return cuo
}

// SetContent sets the "content" field.
func (cuo *CommentUpdateOne) SetContent(s string) *CommentUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableContent(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetContent(*s)
	}
	return cuo
}

// SetContentHTML sets the "content_html" field.
func (cuo *CommentUpdateOne) SetContentHTML(s string) *CommentUpdateOne {
	cuo.mutation.SetContentHTML(s)
	return cuo
}

// SetNillableContentHTML sets the "content_html" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableContentHTML(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetContentHTML(*s)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CommentUpdateOne) SetStatus(i int) *CommentUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(i)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableStatus(i *int) *CommentUpdateOne {
	if i != nil {
		cuo.SetStatus(*i)
	}
	return cuo
}

// AddStatus adds i to the "status" field.
func (cuo *CommentUpdateOne) AddStatus(i int) *CommentUpdateOne {
	cuo.mutation.AddStatus(i)
	return cuo
}

// SetIsAdminComment sets the "is_admin_comment" field.
func (cuo *CommentUpdateOne) SetIsAdminComment(b bool) *CommentUpdateOne {
	cuo.mutation.SetIsAdminComment(b)
	return cuo
}

// SetNillableIsAdminComment sets the "is_admin_comment" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableIsAdminComment(b *bool) *CommentUpdateOne {
	if b != nil {
		cuo.SetIsAdminComment(*b)
	}
	return cuo
}

// SetAllowNotification sets the "allow_notification" field.
func (cuo *CommentUpdateOne) SetAllowNotification(b bool) *CommentUpdateOne {
	cuo.mutation.SetAllowNotification(b)
	return cuo
}

// SetNillableAllowNotification sets the "allow_notification" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableAllowNotification(b *bool) *CommentUpdateOne {
	if b != nil {
		cuo.SetAllowNotification(*b)
	}
	return cuo
}

// SetUserAgent sets the "user_agent" field.
func (cuo *CommentUpdateOne) SetUserAgent(s string) *CommentUpdateOne {
	cuo.mutation.SetUserAgent(s)
	return cuo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableUserAgent(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetUserAgent(*s)
	}
	return cuo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (cuo *CommentUpdateOne) ClearUserAgent() *CommentUpdateOne {
	cuo.mutation.ClearUserAgent()
	return cuo
}

// SetIPAddress sets the "ip_address" field.
func (cuo *CommentUpdateOne) SetIPAddress(s string) *CommentUpdateOne {
	cuo.mutation.SetIPAddress(s)
	return cuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableIPAddress(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetIPAddress(*s)
	}
	return cuo
}

// SetIPLocation sets the "ip_location" field.
func (cuo *CommentUpdateOne) SetIPLocation(s string) *CommentUpdateOne {
	cuo.mutation.SetIPLocation(s)
	return cuo
}

// SetNillableIPLocation sets the "ip_location" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableIPLocation(s *string) *CommentUpdateOne {
	if s != nil {
		cuo.SetIPLocation(*s)
	}
	return cuo
}

// ClearIPLocation clears the value of the "ip_location" field.
func (cuo *CommentUpdateOne) ClearIPLocation() *CommentUpdateOne {
	cuo.mutation.ClearIPLocation()
	return cuo
}

// SetLikeCount sets the "like_count" field.
func (cuo *CommentUpdateOne) SetLikeCount(i int) *CommentUpdateOne {
	cuo.mutation.ResetLikeCount()
	cuo.mutation.SetLikeCount(i)
	return cuo
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableLikeCount(i *int) *CommentUpdateOne {
	if i != nil {
		cuo.SetLikeCount(*i)
	}
	return cuo
}

// AddLikeCount adds i to the "like_count" field.
func (cuo *CommentUpdateOne) AddLikeCount(i int) *CommentUpdateOne {
	cuo.mutation.AddLikeCount(i)
	return cuo
}

// SetPinnedAt sets the "pinned_at" field.
func (cuo *CommentUpdateOne) SetPinnedAt(t time.Time) *CommentUpdateOne {
	cuo.mutation.SetPinnedAt(t)
	return cuo
}

// SetNillablePinnedAt sets the "pinned_at" field if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillablePinnedAt(t *time.Time) *CommentUpdateOne {
	if t != nil {
		cuo.SetPinnedAt(*t)
	}
	return cuo
}

// ClearPinnedAt clears the value of the "pinned_at" field.
func (cuo *CommentUpdateOne) ClearPinnedAt() *CommentUpdateOne {
	cuo.mutation.ClearPinnedAt()
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CommentUpdateOne) SetUser(u *User) *CommentUpdateOne {
	return cuo.SetUserID(u.ID)
}

// SetChildrenID sets the "children" edge to the Comment entity by ID.
func (cuo *CommentUpdateOne) SetChildrenID(id uint) *CommentUpdateOne {
	cuo.mutation.SetChildrenID(id)
	return cuo
}

// SetNillableChildrenID sets the "children" edge to the Comment entity by ID if the given value is not nil.
func (cuo *CommentUpdateOne) SetNillableChildrenID(id *uint) *CommentUpdateOne {
	if id != nil {
		cuo = cuo.SetChildrenID(*id)
	}
	return cuo
}

// SetChildren sets the "children" edge to the Comment entity.
func (cuo *CommentUpdateOne) SetChildren(c *Comment) *CommentUpdateOne {
	return cuo.SetChildrenID(c.ID)
}

// AddParentIDs adds the "parent" edge to the Comment entity by IDs.
func (cuo *CommentUpdateOne) AddParentIDs(ids ...uint) *CommentUpdateOne {
	cuo.mutation.AddParentIDs(ids...)
	return cuo
}

// AddParent adds the "parent" edges to the Comment entity.
func (cuo *CommentUpdateOne) AddParent(c ...*Comment) *CommentUpdateOne {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddParentIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cuo *CommentUpdateOne) Mutation() *CommentMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CommentUpdateOne) ClearUser() *CommentUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// ClearChildren clears the "children" edge to the Comment entity.
func (cuo *CommentUpdateOne) ClearChildren() *CommentUpdateOne {
	cuo.mutation.ClearChildren()
	return cuo
}

// ClearParent clears all "parent" edges to the Comment entity.
func (cuo *CommentUpdateOne) ClearParent() *CommentUpdateOne {
	cuo.mutation.ClearParent()
	return cuo
}

// RemoveParentIDs removes the "parent" edge to Comment entities by IDs.
func (cuo *CommentUpdateOne) RemoveParentIDs(ids ...uint) *CommentUpdateOne {
	cuo.mutation.RemoveParentIDs(ids...)
	return cuo
}

// RemoveParent removes "parent" edges to Comment entities.
func (cuo *CommentUpdateOne) RemoveParent(c ...*Comment) *CommentUpdateOne {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveParentIDs(ids...)
}

// Where appends a list predicates to the CommentUpdate builder.
func (cuo *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comment entity.
func (cuo *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommentUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if comment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized comment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := comment.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommentUpdateOne) check() error {
	if v, ok := cuo.mutation.TargetPath(); ok {
		if err := comment.TargetPathValidator(v); err != nil {
			return &ValidationError{Name: "target_path", err: fmt.Errorf(`ent: validator failed for field "Comment.target_path": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.TargetTitle(); ok {
		if err := comment.TargetTitleValidator(v); err != nil {
			return &ValidationError{Name: "target_title", err: fmt.Errorf(`ent: validator failed for field "Comment.target_title": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Nickname(); ok {
		if err := comment.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Comment.nickname": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Email(); ok {
		if err := comment.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Comment.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.EmailMd5(); ok {
		if err := comment.EmailMd5Validator(v); err != nil {
			return &ValidationError{Name: "email_md5", err: fmt.Errorf(`ent: validator failed for field "Comment.email_md5": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Website(); ok {
		if err := comment.WebsiteValidator(v); err != nil {
			return &ValidationError{Name: "website", err: fmt.Errorf(`ent: validator failed for field "Comment.website": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ContentHTML(); ok {
		if err := comment.ContentHTMLValidator(v); err != nil {
			return &ValidationError{Name: "content_html", err: fmt.Errorf(`ent: validator failed for field "Comment.content_html": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.UserAgent(); ok {
		if err := comment.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "Comment.user_agent": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.IPAddress(); ok {
		if err := comment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_address": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.IPLocation(); ok {
		if err := comment.IPLocationValidator(v); err != nil {
			return &ValidationError{Name: "ip_location", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_location": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.LikeCount(); ok {
		if err := comment.LikeCountValidator(v); err != nil {
			return &ValidationError{Name: "like_count", err: fmt.Errorf(`ent: validator failed for field "Comment.like_count": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CommentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommentUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CommentUpdateOne) sqlSave(ctx context.Context) (_node *Comment, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(comment.Table, comment.Columns, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comment.FieldID)
		for _, f := range fields {
			if !comment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(comment.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(comment.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.TargetPath(); ok {
		_spec.SetField(comment.FieldTargetPath, field.TypeString, value)
	}
	if value, ok := cuo.mutation.TargetTitle(); ok {
		_spec.SetField(comment.FieldTargetTitle, field.TypeString, value)
	}
	if cuo.mutation.TargetTitleCleared() {
		_spec.ClearField(comment.FieldTargetTitle, field.TypeString)
	}
	if value, ok := cuo.mutation.Nickname(); ok {
		_spec.SetField(comment.FieldNickname, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(comment.FieldEmail, field.TypeString, value)
	}
	if cuo.mutation.EmailCleared() {
		_spec.ClearField(comment.FieldEmail, field.TypeString)
	}
	if value, ok := cuo.mutation.EmailMd5(); ok {
		_spec.SetField(comment.FieldEmailMd5, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Website(); ok {
		_spec.SetField(comment.FieldWebsite, field.TypeString, value)
	}
	if cuo.mutation.WebsiteCleared() {
		_spec.ClearField(comment.FieldWebsite, field.TypeString)
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ContentHTML(); ok {
		_spec.SetField(comment.FieldContentHTML, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(comment.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.IsAdminComment(); ok {
		_spec.SetField(comment.FieldIsAdminComment, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.AllowNotification(); ok {
		_spec.SetField(comment.FieldAllowNotification, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.UserAgent(); ok {
		_spec.SetField(comment.FieldUserAgent, field.TypeString, value)
	}
	if cuo.mutation.UserAgentCleared() {
		_spec.ClearField(comment.FieldUserAgent, field.TypeString)
	}
	if value, ok := cuo.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IPLocation(); ok {
		_spec.SetField(comment.FieldIPLocation, field.TypeString, value)
	}
	if cuo.mutation.IPLocationCleared() {
		_spec.ClearField(comment.FieldIPLocation, field.TypeString)
	}
	if value, ok := cuo.mutation.LikeCount(); ok {
		_spec.SetField(comment.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLikeCount(); ok {
		_spec.AddField(comment.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.PinnedAt(); ok {
		_spec.SetField(comment.FieldPinnedAt, field.TypeTime, value)
	}
	if cuo.mutation.PinnedAtCleared() {
		_spec.ClearField(comment.FieldPinnedAt, field.TypeTime)
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: []string{comment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: []string{comment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ChildrenTable,
			Columns: []string{comment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ChildrenTable,
			Columns: []string{comment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedParentIDs(); len(nodes) > 0 && !cuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Comment{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
