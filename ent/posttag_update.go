// Code generated by ent, DO NOT EDIT.

package ent

import (
	"anheyu-app/ent/article"
	"anheyu-app/ent/posttag"
	"anheyu-app/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostTagUpdate is the builder for updating PostTag entities.
type PostTagUpdate struct {
	config
	hooks     []Hook
	mutation  *PostTagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostTagUpdate builder.
func (ptu *PostTagUpdate) Where(ps ...predicate.PostTag) *PostTagUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetDeletedAt sets the "deleted_at" field.
func (ptu *PostTagUpdate) SetDeletedAt(t time.Time) *PostTagUpdate {
	ptu.mutation.SetDeletedAt(t)
	return ptu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptu *PostTagUpdate) SetNillableDeletedAt(t *time.Time) *PostTagUpdate {
	if t != nil {
		ptu.SetDeletedAt(*t)
	}
	return ptu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ptu *PostTagUpdate) ClearDeletedAt() *PostTagUpdate {
	ptu.mutation.ClearDeletedAt()
	return ptu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptu *PostTagUpdate) SetUpdatedAt(t time.Time) *PostTagUpdate {
	ptu.mutation.SetUpdatedAt(t)
	return ptu
}

// SetName sets the "name" field.
func (ptu *PostTagUpdate) SetName(s string) *PostTagUpdate {
	ptu.mutation.SetName(s)
	return ptu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptu *PostTagUpdate) SetNillableName(s *string) *PostTagUpdate {
	if s != nil {
		ptu.SetName(*s)
	}
	return ptu
}

// SetCount sets the "count" field.
func (ptu *PostTagUpdate) SetCount(i int) *PostTagUpdate {
	ptu.mutation.ResetCount()
	ptu.mutation.SetCount(i)
	return ptu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (ptu *PostTagUpdate) SetNillableCount(i *int) *PostTagUpdate {
	if i != nil {
		ptu.SetCount(*i)
	}
	return ptu
}

// AddCount adds i to the "count" field.
func (ptu *PostTagUpdate) AddCount(i int) *PostTagUpdate {
	ptu.mutation.AddCount(i)
	return ptu
}

// AddArticleIDs adds the "articles" edge to the Article entity by IDs.
func (ptu *PostTagUpdate) AddArticleIDs(ids ...uint) *PostTagUpdate {
	ptu.mutation.AddArticleIDs(ids...)
	return ptu
}

// AddArticles adds the "articles" edges to the Article entity.
func (ptu *PostTagUpdate) AddArticles(a ...*Article) *PostTagUpdate {
	ids := make([]uint, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ptu.AddArticleIDs(ids...)
}

// Mutation returns the PostTagMutation object of the builder.
func (ptu *PostTagUpdate) Mutation() *PostTagMutation {
	return ptu.mutation
}

// ClearArticles clears all "articles" edges to the Article entity.
func (ptu *PostTagUpdate) ClearArticles() *PostTagUpdate {
	ptu.mutation.ClearArticles()
	return ptu
}

// RemoveArticleIDs removes the "articles" edge to Article entities by IDs.
func (ptu *PostTagUpdate) RemoveArticleIDs(ids ...uint) *PostTagUpdate {
	ptu.mutation.RemoveArticleIDs(ids...)
	return ptu
}

// RemoveArticles removes "articles" edges to Article entities.
func (ptu *PostTagUpdate) RemoveArticles(a ...*Article) *PostTagUpdate {
	ids := make([]uint, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ptu.RemoveArticleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PostTagUpdate) Save(ctx context.Context) (int, error) {
	if err := ptu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PostTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PostTagUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PostTagUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *PostTagUpdate) defaults() error {
	if _, ok := ptu.mutation.UpdatedAt(); !ok {
		if posttag.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized posttag.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := posttag.UpdateDefaultUpdatedAt()
		ptu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptu *PostTagUpdate) check() error {
	if v, ok := ptu.mutation.Name(); ok {
		if err := posttag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PostTag.name": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.Count(); ok {
		if err := posttag.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`ent: validator failed for field "PostTag.count": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptu *PostTagUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostTagUpdate {
	ptu.modifiers = append(ptu.modifiers, modifiers...)
	return ptu
}

func (ptu *PostTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(posttag.Table, posttag.Columns, sqlgraph.NewFieldSpec(posttag.FieldID, field.TypeUint))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.DeletedAt(); ok {
		_spec.SetField(posttag.FieldDeletedAt, field.TypeTime, value)
	}
	if ptu.mutation.DeletedAtCleared() {
		_spec.ClearField(posttag.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ptu.mutation.UpdatedAt(); ok {
		_spec.SetField(posttag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ptu.mutation.Name(); ok {
		_spec.SetField(posttag.FieldName, field.TypeString, value)
	}
	if value, ok := ptu.mutation.Count(); ok {
		_spec.SetField(posttag.FieldCount, field.TypeInt, value)
	}
	if value, ok := ptu.mutation.AddedCount(); ok {
		_spec.AddField(posttag.FieldCount, field.TypeInt, value)
	}
	if ptu.mutation.ArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   posttag.ArticlesTable,
			Columns: posttag.ArticlesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedArticlesIDs(); len(nodes) > 0 && !ptu.mutation.ArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   posttag.ArticlesTable,
			Columns: posttag.ArticlesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.ArticlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   posttag.ArticlesTable,
			Columns: posttag.ArticlesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posttag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PostTagUpdateOne is the builder for updating a single PostTag entity.
type PostTagUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostTagMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (ptuo *PostTagUpdateOne) SetDeletedAt(t time.Time) *PostTagUpdateOne {
	ptuo.mutation.SetDeletedAt(t)
	return ptuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptuo *PostTagUpdateOne) SetNillableDeletedAt(t *time.Time) *PostTagUpdateOne {
	if t != nil {
		ptuo.SetDeletedAt(*t)
	}
	return ptuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ptuo *PostTagUpdateOne) ClearDeletedAt() *PostTagUpdateOne {
	ptuo.mutation.ClearDeletedAt()
	return ptuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ptuo *PostTagUpdateOne) SetUpdatedAt(t time.Time) *PostTagUpdateOne {
	ptuo.mutation.SetUpdatedAt(t)
	return ptuo
}

// SetName sets the "name" field.
func (ptuo *PostTagUpdateOne) SetName(s string) *PostTagUpdateOne {
	ptuo.mutation.SetName(s)
	return ptuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptuo *PostTagUpdateOne) SetNillableName(s *string) *PostTagUpdateOne {
	if s != nil {
		ptuo.SetName(*s)
	}
	return ptuo
}

// SetCount sets the "count" field.
func (ptuo *PostTagUpdateOne) SetCount(i int) *PostTagUpdateOne {
	ptuo.mutation.ResetCount()
	ptuo.mutation.SetCount(i)
	return ptuo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (ptuo *PostTagUpdateOne) SetNillableCount(i *int) *PostTagUpdateOne {
	if i != nil {
		ptuo.SetCount(*i)
	}
	return ptuo
}

// AddCount adds i to the "count" field.
func (ptuo *PostTagUpdateOne) AddCount(i int) *PostTagUpdateOne {
	ptuo.mutation.AddCount(i)
	return ptuo
}

// AddArticleIDs adds the "articles" edge to the Article entity by IDs.
func (ptuo *PostTagUpdateOne) AddArticleIDs(ids ...uint) *PostTagUpdateOne {
	ptuo.mutation.AddArticleIDs(ids...)
	return ptuo
}

// AddArticles adds the "articles" edges to the Article entity.
func (ptuo *PostTagUpdateOne) AddArticles(a ...*Article) *PostTagUpdateOne {
	ids := make([]uint, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ptuo.AddArticleIDs(ids...)
}

// Mutation returns the PostTagMutation object of the builder.
func (ptuo *PostTagUpdateOne) Mutation() *PostTagMutation {
	return ptuo.mutation
}

// ClearArticles clears all "articles" edges to the Article entity.
func (ptuo *PostTagUpdateOne) ClearArticles() *PostTagUpdateOne {
	ptuo.mutation.ClearArticles()
	return ptuo
}

// RemoveArticleIDs removes the "articles" edge to Article entities by IDs.
func (ptuo *PostTagUpdateOne) RemoveArticleIDs(ids ...uint) *PostTagUpdateOne {
	ptuo.mutation.RemoveArticleIDs(ids...)
	return ptuo
}

// RemoveArticles removes "articles" edges to Article entities.
func (ptuo *PostTagUpdateOne) RemoveArticles(a ...*Article) *PostTagUpdateOne {
	ids := make([]uint, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ptuo.RemoveArticleIDs(ids...)
}

// Where appends a list predicates to the PostTagUpdate builder.
func (ptuo *PostTagUpdateOne) Where(ps ...predicate.PostTag) *PostTagUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PostTagUpdateOne) Select(field string, fields ...string) *PostTagUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PostTag entity.
func (ptuo *PostTagUpdateOne) Save(ctx context.Context) (*PostTag, error) {
	if err := ptuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PostTagUpdateOne) SaveX(ctx context.Context) *PostTag {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PostTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PostTagUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *PostTagUpdateOne) defaults() error {
	if _, ok := ptuo.mutation.UpdatedAt(); !ok {
		if posttag.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized posttag.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := posttag.UpdateDefaultUpdatedAt()
		ptuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *PostTagUpdateOne) check() error {
	if v, ok := ptuo.mutation.Name(); ok {
		if err := posttag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "PostTag.name": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.Count(); ok {
		if err := posttag.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`ent: validator failed for field "PostTag.count": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptuo *PostTagUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostTagUpdateOne {
	ptuo.modifiers = append(ptuo.modifiers, modifiers...)
	return ptuo
}

func (ptuo *PostTagUpdateOne) sqlSave(ctx context.Context) (_node *PostTag, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(posttag.Table, posttag.Columns, sqlgraph.NewFieldSpec(posttag.FieldID, field.TypeUint))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PostTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, posttag.FieldID)
		for _, f := range fields {
			if !posttag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != posttag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.DeletedAt(); ok {
		_spec.SetField(posttag.FieldDeletedAt, field.TypeTime, value)
	}
	if ptuo.mutation.DeletedAtCleared() {
		_spec.ClearField(posttag.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ptuo.mutation.UpdatedAt(); ok {
		_spec.SetField(posttag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ptuo.mutation.Name(); ok {
		_spec.SetField(posttag.FieldName, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.Count(); ok {
		_spec.SetField(posttag.FieldCount, field.TypeInt, value)
	}
	if value, ok := ptuo.mutation.AddedCount(); ok {
		_spec.AddField(posttag.FieldCount, field.TypeInt, value)
	}
	if ptuo.mutation.ArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   posttag.ArticlesTable,
			Columns: posttag.ArticlesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedArticlesIDs(); len(nodes) > 0 && !ptuo.mutation.ArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   posttag.ArticlesTable,
			Columns: posttag.ArticlesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.ArticlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   posttag.ArticlesTable,
			Columns: posttag.ArticlesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptuo.modifiers...)
	_node = &PostTag{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posttag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
