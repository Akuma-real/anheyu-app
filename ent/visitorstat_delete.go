// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
	"github.com/anzhiyu-c/anheyu-app/ent/visitorstat"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VisitorStatDelete is the builder for deleting a VisitorStat entity.
type VisitorStatDelete struct {
	config
	hooks    []Hook
	mutation *VisitorStatMutation
}

// Where appends a list predicates to the VisitorStatDelete builder.
func (vsd *VisitorStatDelete) Where(ps ...predicate.VisitorStat) *VisitorStatDelete {
	vsd.mutation.Where(ps...)
	return vsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vsd *VisitorStatDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vsd.sqlExec, vsd.mutation, vsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vsd *VisitorStatDelete) ExecX(ctx context.Context) int {
	n, err := vsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vsd *VisitorStatDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(visitorstat.Table, sqlgraph.NewFieldSpec(visitorstat.FieldID, field.TypeUint))
	if ps := vsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vsd.mutation.done = true
	return affected, err
}

// VisitorStatDeleteOne is the builder for deleting a single VisitorStat entity.
type VisitorStatDeleteOne struct {
	vsd *VisitorStatDelete
}

// Where appends a list predicates to the VisitorStatDelete builder.
func (vsdo *VisitorStatDeleteOne) Where(ps ...predicate.VisitorStat) *VisitorStatDeleteOne {
	vsdo.vsd.mutation.Where(ps...)
	return vsdo
}

// Exec executes the deletion query.
func (vsdo *VisitorStatDeleteOne) Exec(ctx context.Context) error {
	n, err := vsdo.vsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{visitorstat.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vsdo *VisitorStatDeleteOne) ExecX(ctx context.Context) {
	if err := vsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
