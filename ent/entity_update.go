// Code generated by ent, DO NOT EDIT.

package ent

import (
	"anheyu-app/ent/entity"
	"anheyu-app/ent/fileentity"
	"anheyu-app/ent/predicate"
	"anheyu-app/internal/domain/model"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EntityUpdate is the builder for updating Entity entities.
type EntityUpdate struct {
	config
	hooks     []Hook
	mutation  *EntityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EntityUpdate builder.
func (eu *EntityUpdate) Where(ps ...predicate.Entity) *EntityUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EntityUpdate) SetUpdatedAt(t time.Time) *EntityUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetType sets the "type" field.
func (eu *EntityUpdate) SetType(s string) *EntityUpdate {
	eu.mutation.SetType(s)
	return eu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableType(s *string) *EntityUpdate {
	if s != nil {
		eu.SetType(*s)
	}
	return eu
}

// SetSource sets the "source" field.
func (eu *EntityUpdate) SetSource(s string) *EntityUpdate {
	eu.mutation.SetSource(s)
	return eu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableSource(s *string) *EntityUpdate {
	if s != nil {
		eu.SetSource(*s)
	}
	return eu
}

// ClearSource clears the value of the "source" field.
func (eu *EntityUpdate) ClearSource() *EntityUpdate {
	eu.mutation.ClearSource()
	return eu
}

// SetSize sets the "size" field.
func (eu *EntityUpdate) SetSize(i int64) *EntityUpdate {
	eu.mutation.ResetSize()
	eu.mutation.SetSize(i)
	return eu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableSize(i *int64) *EntityUpdate {
	if i != nil {
		eu.SetSize(*i)
	}
	return eu
}

// AddSize adds i to the "size" field.
func (eu *EntityUpdate) AddSize(i int64) *EntityUpdate {
	eu.mutation.AddSize(i)
	return eu
}

// SetUploadSessionID sets the "upload_session_id" field.
func (eu *EntityUpdate) SetUploadSessionID(s string) *EntityUpdate {
	eu.mutation.SetUploadSessionID(s)
	return eu
}

// SetNillableUploadSessionID sets the "upload_session_id" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableUploadSessionID(s *string) *EntityUpdate {
	if s != nil {
		eu.SetUploadSessionID(*s)
	}
	return eu
}

// ClearUploadSessionID clears the value of the "upload_session_id" field.
func (eu *EntityUpdate) ClearUploadSessionID() *EntityUpdate {
	eu.mutation.ClearUploadSessionID()
	return eu
}

// SetRecycleOptions sets the "recycle_options" field.
func (eu *EntityUpdate) SetRecycleOptions(s string) *EntityUpdate {
	eu.mutation.SetRecycleOptions(s)
	return eu
}

// SetNillableRecycleOptions sets the "recycle_options" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableRecycleOptions(s *string) *EntityUpdate {
	if s != nil {
		eu.SetRecycleOptions(*s)
	}
	return eu
}

// ClearRecycleOptions clears the value of the "recycle_options" field.
func (eu *EntityUpdate) ClearRecycleOptions() *EntityUpdate {
	eu.mutation.ClearRecycleOptions()
	return eu
}

// SetPolicyID sets the "policy_id" field.
func (eu *EntityUpdate) SetPolicyID(u uint) *EntityUpdate {
	eu.mutation.ResetPolicyID()
	eu.mutation.SetPolicyID(u)
	return eu
}

// SetNillablePolicyID sets the "policy_id" field if the given value is not nil.
func (eu *EntityUpdate) SetNillablePolicyID(u *uint) *EntityUpdate {
	if u != nil {
		eu.SetPolicyID(*u)
	}
	return eu
}

// AddPolicyID adds u to the "policy_id" field.
func (eu *EntityUpdate) AddPolicyID(u int) *EntityUpdate {
	eu.mutation.AddPolicyID(u)
	return eu
}

// SetCreatedBy sets the "created_by" field.
func (eu *EntityUpdate) SetCreatedBy(u uint64) *EntityUpdate {
	eu.mutation.ResetCreatedBy()
	eu.mutation.SetCreatedBy(u)
	return eu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableCreatedBy(u *uint64) *EntityUpdate {
	if u != nil {
		eu.SetCreatedBy(*u)
	}
	return eu
}

// AddCreatedBy adds u to the "created_by" field.
func (eu *EntityUpdate) AddCreatedBy(u int64) *EntityUpdate {
	eu.mutation.AddCreatedBy(u)
	return eu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (eu *EntityUpdate) ClearCreatedBy() *EntityUpdate {
	eu.mutation.ClearCreatedBy()
	return eu
}

// SetEtag sets the "etag" field.
func (eu *EntityUpdate) SetEtag(s string) *EntityUpdate {
	eu.mutation.SetEtag(s)
	return eu
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableEtag(s *string) *EntityUpdate {
	if s != nil {
		eu.SetEtag(*s)
	}
	return eu
}

// ClearEtag clears the value of the "etag" field.
func (eu *EntityUpdate) ClearEtag() *EntityUpdate {
	eu.mutation.ClearEtag()
	return eu
}

// SetMimeType sets the "mime_type" field.
func (eu *EntityUpdate) SetMimeType(s string) *EntityUpdate {
	eu.mutation.SetMimeType(s)
	return eu
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableMimeType(s *string) *EntityUpdate {
	if s != nil {
		eu.SetMimeType(*s)
	}
	return eu
}

// ClearMimeType clears the value of the "mime_type" field.
func (eu *EntityUpdate) ClearMimeType() *EntityUpdate {
	eu.mutation.ClearMimeType()
	return eu
}

// SetDimension sets the "dimension" field.
func (eu *EntityUpdate) SetDimension(s string) *EntityUpdate {
	eu.mutation.SetDimension(s)
	return eu
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableDimension(s *string) *EntityUpdate {
	if s != nil {
		eu.SetDimension(*s)
	}
	return eu
}

// ClearDimension clears the value of the "dimension" field.
func (eu *EntityUpdate) ClearDimension() *EntityUpdate {
	eu.mutation.ClearDimension()
	return eu
}

// SetStorageMetadata sets the "storage_metadata" field.
func (eu *EntityUpdate) SetStorageMetadata(mm model.JSONMap) *EntityUpdate {
	eu.mutation.SetStorageMetadata(mm)
	return eu
}

// ClearStorageMetadata clears the value of the "storage_metadata" field.
func (eu *EntityUpdate) ClearStorageMetadata() *EntityUpdate {
	eu.mutation.ClearStorageMetadata()
	return eu
}

// AddFileVersionIDs adds the "file_versions" edge to the FileEntity entity by IDs.
func (eu *EntityUpdate) AddFileVersionIDs(ids ...uint) *EntityUpdate {
	eu.mutation.AddFileVersionIDs(ids...)
	return eu
}

// AddFileVersions adds the "file_versions" edges to the FileEntity entity.
func (eu *EntityUpdate) AddFileVersions(f ...*FileEntity) *EntityUpdate {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddFileVersionIDs(ids...)
}

// Mutation returns the EntityMutation object of the builder.
func (eu *EntityUpdate) Mutation() *EntityMutation {
	return eu.mutation
}

// ClearFileVersions clears all "file_versions" edges to the FileEntity entity.
func (eu *EntityUpdate) ClearFileVersions() *EntityUpdate {
	eu.mutation.ClearFileVersions()
	return eu
}

// RemoveFileVersionIDs removes the "file_versions" edge to FileEntity entities by IDs.
func (eu *EntityUpdate) RemoveFileVersionIDs(ids ...uint) *EntityUpdate {
	eu.mutation.RemoveFileVersionIDs(ids...)
	return eu
}

// RemoveFileVersions removes "file_versions" edges to FileEntity entities.
func (eu *EntityUpdate) RemoveFileVersions(f ...*FileEntity) *EntityUpdate {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveFileVersionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntityUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntityUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntityUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntityUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EntityUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := entity.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EntityUpdate) check() error {
	if v, ok := eu.mutation.UploadSessionID(); ok {
		if err := entity.UploadSessionIDValidator(v); err != nil {
			return &ValidationError{Name: "upload_session_id", err: fmt.Errorf(`ent: validator failed for field "Entity.upload_session_id": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Etag(); ok {
		if err := entity.EtagValidator(v); err != nil {
			return &ValidationError{Name: "etag", err: fmt.Errorf(`ent: validator failed for field "Entity.etag": %w`, err)}
		}
	}
	if v, ok := eu.mutation.MimeType(); ok {
		if err := entity.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "Entity.mime_type": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Dimension(); ok {
		if err := entity.DimensionValidator(v); err != nil {
			return &ValidationError{Name: "dimension", err: fmt.Errorf(`ent: validator failed for field "Entity.dimension": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EntityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntityUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(entity.Table, entity.Columns, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUint))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(entity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.GetType(); ok {
		_spec.SetField(entity.FieldType, field.TypeString, value)
	}
	if value, ok := eu.mutation.Source(); ok {
		_spec.SetField(entity.FieldSource, field.TypeString, value)
	}
	if eu.mutation.SourceCleared() {
		_spec.ClearField(entity.FieldSource, field.TypeString)
	}
	if value, ok := eu.mutation.Size(); ok {
		_spec.SetField(entity.FieldSize, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.AddedSize(); ok {
		_spec.AddField(entity.FieldSize, field.TypeInt64, value)
	}
	if value, ok := eu.mutation.UploadSessionID(); ok {
		_spec.SetField(entity.FieldUploadSessionID, field.TypeString, value)
	}
	if eu.mutation.UploadSessionIDCleared() {
		_spec.ClearField(entity.FieldUploadSessionID, field.TypeString)
	}
	if value, ok := eu.mutation.RecycleOptions(); ok {
		_spec.SetField(entity.FieldRecycleOptions, field.TypeString, value)
	}
	if eu.mutation.RecycleOptionsCleared() {
		_spec.ClearField(entity.FieldRecycleOptions, field.TypeString)
	}
	if value, ok := eu.mutation.PolicyID(); ok {
		_spec.SetField(entity.FieldPolicyID, field.TypeUint, value)
	}
	if value, ok := eu.mutation.AddedPolicyID(); ok {
		_spec.AddField(entity.FieldPolicyID, field.TypeUint, value)
	}
	if value, ok := eu.mutation.CreatedBy(); ok {
		_spec.SetField(entity.FieldCreatedBy, field.TypeUint64, value)
	}
	if value, ok := eu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(entity.FieldCreatedBy, field.TypeUint64, value)
	}
	if eu.mutation.CreatedByCleared() {
		_spec.ClearField(entity.FieldCreatedBy, field.TypeUint64)
	}
	if value, ok := eu.mutation.Etag(); ok {
		_spec.SetField(entity.FieldEtag, field.TypeString, value)
	}
	if eu.mutation.EtagCleared() {
		_spec.ClearField(entity.FieldEtag, field.TypeString)
	}
	if value, ok := eu.mutation.MimeType(); ok {
		_spec.SetField(entity.FieldMimeType, field.TypeString, value)
	}
	if eu.mutation.MimeTypeCleared() {
		_spec.ClearField(entity.FieldMimeType, field.TypeString)
	}
	if value, ok := eu.mutation.Dimension(); ok {
		_spec.SetField(entity.FieldDimension, field.TypeString, value)
	}
	if eu.mutation.DimensionCleared() {
		_spec.ClearField(entity.FieldDimension, field.TypeString)
	}
	if value, ok := eu.mutation.StorageMetadata(); ok {
		_spec.SetField(entity.FieldStorageMetadata, field.TypeOther, value)
	}
	if eu.mutation.StorageMetadataCleared() {
		_spec.ClearField(entity.FieldStorageMetadata, field.TypeOther)
	}
	if eu.mutation.FileVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.FileVersionsTable,
			Columns: []string{entity.FileVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileentity.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedFileVersionsIDs(); len(nodes) > 0 && !eu.mutation.FileVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.FileVersionsTable,
			Columns: []string{entity.FileVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileentity.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FileVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.FileVersionsTable,
			Columns: []string{entity.FileVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileentity.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EntityUpdateOne is the builder for updating a single Entity entity.
type EntityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EntityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EntityUpdateOne) SetUpdatedAt(t time.Time) *EntityUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetType sets the "type" field.
func (euo *EntityUpdateOne) SetType(s string) *EntityUpdateOne {
	euo.mutation.SetType(s)
	return euo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableType(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetType(*s)
	}
	return euo
}

// SetSource sets the "source" field.
func (euo *EntityUpdateOne) SetSource(s string) *EntityUpdateOne {
	euo.mutation.SetSource(s)
	return euo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableSource(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetSource(*s)
	}
	return euo
}

// ClearSource clears the value of the "source" field.
func (euo *EntityUpdateOne) ClearSource() *EntityUpdateOne {
	euo.mutation.ClearSource()
	return euo
}

// SetSize sets the "size" field.
func (euo *EntityUpdateOne) SetSize(i int64) *EntityUpdateOne {
	euo.mutation.ResetSize()
	euo.mutation.SetSize(i)
	return euo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableSize(i *int64) *EntityUpdateOne {
	if i != nil {
		euo.SetSize(*i)
	}
	return euo
}

// AddSize adds i to the "size" field.
func (euo *EntityUpdateOne) AddSize(i int64) *EntityUpdateOne {
	euo.mutation.AddSize(i)
	return euo
}

// SetUploadSessionID sets the "upload_session_id" field.
func (euo *EntityUpdateOne) SetUploadSessionID(s string) *EntityUpdateOne {
	euo.mutation.SetUploadSessionID(s)
	return euo
}

// SetNillableUploadSessionID sets the "upload_session_id" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableUploadSessionID(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetUploadSessionID(*s)
	}
	return euo
}

// ClearUploadSessionID clears the value of the "upload_session_id" field.
func (euo *EntityUpdateOne) ClearUploadSessionID() *EntityUpdateOne {
	euo.mutation.ClearUploadSessionID()
	return euo
}

// SetRecycleOptions sets the "recycle_options" field.
func (euo *EntityUpdateOne) SetRecycleOptions(s string) *EntityUpdateOne {
	euo.mutation.SetRecycleOptions(s)
	return euo
}

// SetNillableRecycleOptions sets the "recycle_options" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableRecycleOptions(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetRecycleOptions(*s)
	}
	return euo
}

// ClearRecycleOptions clears the value of the "recycle_options" field.
func (euo *EntityUpdateOne) ClearRecycleOptions() *EntityUpdateOne {
	euo.mutation.ClearRecycleOptions()
	return euo
}

// SetPolicyID sets the "policy_id" field.
func (euo *EntityUpdateOne) SetPolicyID(u uint) *EntityUpdateOne {
	euo.mutation.ResetPolicyID()
	euo.mutation.SetPolicyID(u)
	return euo
}

// SetNillablePolicyID sets the "policy_id" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillablePolicyID(u *uint) *EntityUpdateOne {
	if u != nil {
		euo.SetPolicyID(*u)
	}
	return euo
}

// AddPolicyID adds u to the "policy_id" field.
func (euo *EntityUpdateOne) AddPolicyID(u int) *EntityUpdateOne {
	euo.mutation.AddPolicyID(u)
	return euo
}

// SetCreatedBy sets the "created_by" field.
func (euo *EntityUpdateOne) SetCreatedBy(u uint64) *EntityUpdateOne {
	euo.mutation.ResetCreatedBy()
	euo.mutation.SetCreatedBy(u)
	return euo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableCreatedBy(u *uint64) *EntityUpdateOne {
	if u != nil {
		euo.SetCreatedBy(*u)
	}
	return euo
}

// AddCreatedBy adds u to the "created_by" field.
func (euo *EntityUpdateOne) AddCreatedBy(u int64) *EntityUpdateOne {
	euo.mutation.AddCreatedBy(u)
	return euo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (euo *EntityUpdateOne) ClearCreatedBy() *EntityUpdateOne {
	euo.mutation.ClearCreatedBy()
	return euo
}

// SetEtag sets the "etag" field.
func (euo *EntityUpdateOne) SetEtag(s string) *EntityUpdateOne {
	euo.mutation.SetEtag(s)
	return euo
}

// SetNillableEtag sets the "etag" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableEtag(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetEtag(*s)
	}
	return euo
}

// ClearEtag clears the value of the "etag" field.
func (euo *EntityUpdateOne) ClearEtag() *EntityUpdateOne {
	euo.mutation.ClearEtag()
	return euo
}

// SetMimeType sets the "mime_type" field.
func (euo *EntityUpdateOne) SetMimeType(s string) *EntityUpdateOne {
	euo.mutation.SetMimeType(s)
	return euo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableMimeType(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetMimeType(*s)
	}
	return euo
}

// ClearMimeType clears the value of the "mime_type" field.
func (euo *EntityUpdateOne) ClearMimeType() *EntityUpdateOne {
	euo.mutation.ClearMimeType()
	return euo
}

// SetDimension sets the "dimension" field.
func (euo *EntityUpdateOne) SetDimension(s string) *EntityUpdateOne {
	euo.mutation.SetDimension(s)
	return euo
}

// SetNillableDimension sets the "dimension" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableDimension(s *string) *EntityUpdateOne {
	if s != nil {
		euo.SetDimension(*s)
	}
	return euo
}

// ClearDimension clears the value of the "dimension" field.
func (euo *EntityUpdateOne) ClearDimension() *EntityUpdateOne {
	euo.mutation.ClearDimension()
	return euo
}

// SetStorageMetadata sets the "storage_metadata" field.
func (euo *EntityUpdateOne) SetStorageMetadata(mm model.JSONMap) *EntityUpdateOne {
	euo.mutation.SetStorageMetadata(mm)
	return euo
}

// ClearStorageMetadata clears the value of the "storage_metadata" field.
func (euo *EntityUpdateOne) ClearStorageMetadata() *EntityUpdateOne {
	euo.mutation.ClearStorageMetadata()
	return euo
}

// AddFileVersionIDs adds the "file_versions" edge to the FileEntity entity by IDs.
func (euo *EntityUpdateOne) AddFileVersionIDs(ids ...uint) *EntityUpdateOne {
	euo.mutation.AddFileVersionIDs(ids...)
	return euo
}

// AddFileVersions adds the "file_versions" edges to the FileEntity entity.
func (euo *EntityUpdateOne) AddFileVersions(f ...*FileEntity) *EntityUpdateOne {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddFileVersionIDs(ids...)
}

// Mutation returns the EntityMutation object of the builder.
func (euo *EntityUpdateOne) Mutation() *EntityMutation {
	return euo.mutation
}

// ClearFileVersions clears all "file_versions" edges to the FileEntity entity.
func (euo *EntityUpdateOne) ClearFileVersions() *EntityUpdateOne {
	euo.mutation.ClearFileVersions()
	return euo
}

// RemoveFileVersionIDs removes the "file_versions" edge to FileEntity entities by IDs.
func (euo *EntityUpdateOne) RemoveFileVersionIDs(ids ...uint) *EntityUpdateOne {
	euo.mutation.RemoveFileVersionIDs(ids...)
	return euo
}

// RemoveFileVersions removes "file_versions" edges to FileEntity entities.
func (euo *EntityUpdateOne) RemoveFileVersions(f ...*FileEntity) *EntityUpdateOne {
	ids := make([]uint, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveFileVersionIDs(ids...)
}

// Where appends a list predicates to the EntityUpdate builder.
func (euo *EntityUpdateOne) Where(ps ...predicate.Entity) *EntityUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntityUpdateOne) Select(field string, fields ...string) *EntityUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entity entity.
func (euo *EntityUpdateOne) Save(ctx context.Context) (*Entity, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntityUpdateOne) SaveX(ctx context.Context) *Entity {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntityUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntityUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EntityUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := entity.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EntityUpdateOne) check() error {
	if v, ok := euo.mutation.UploadSessionID(); ok {
		if err := entity.UploadSessionIDValidator(v); err != nil {
			return &ValidationError{Name: "upload_session_id", err: fmt.Errorf(`ent: validator failed for field "Entity.upload_session_id": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Etag(); ok {
		if err := entity.EtagValidator(v); err != nil {
			return &ValidationError{Name: "etag", err: fmt.Errorf(`ent: validator failed for field "Entity.etag": %w`, err)}
		}
	}
	if v, ok := euo.mutation.MimeType(); ok {
		if err := entity.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "Entity.mime_type": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Dimension(); ok {
		if err := entity.DimensionValidator(v); err != nil {
			return &ValidationError{Name: "dimension", err: fmt.Errorf(`ent: validator failed for field "Entity.dimension": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EntityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntityUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EntityUpdateOne) sqlSave(ctx context.Context) (_node *Entity, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entity.Table, entity.Columns, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUint))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Entity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entity.FieldID)
		for _, f := range fields {
			if !entity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(entity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.GetType(); ok {
		_spec.SetField(entity.FieldType, field.TypeString, value)
	}
	if value, ok := euo.mutation.Source(); ok {
		_spec.SetField(entity.FieldSource, field.TypeString, value)
	}
	if euo.mutation.SourceCleared() {
		_spec.ClearField(entity.FieldSource, field.TypeString)
	}
	if value, ok := euo.mutation.Size(); ok {
		_spec.SetField(entity.FieldSize, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.AddedSize(); ok {
		_spec.AddField(entity.FieldSize, field.TypeInt64, value)
	}
	if value, ok := euo.mutation.UploadSessionID(); ok {
		_spec.SetField(entity.FieldUploadSessionID, field.TypeString, value)
	}
	if euo.mutation.UploadSessionIDCleared() {
		_spec.ClearField(entity.FieldUploadSessionID, field.TypeString)
	}
	if value, ok := euo.mutation.RecycleOptions(); ok {
		_spec.SetField(entity.FieldRecycleOptions, field.TypeString, value)
	}
	if euo.mutation.RecycleOptionsCleared() {
		_spec.ClearField(entity.FieldRecycleOptions, field.TypeString)
	}
	if value, ok := euo.mutation.PolicyID(); ok {
		_spec.SetField(entity.FieldPolicyID, field.TypeUint, value)
	}
	if value, ok := euo.mutation.AddedPolicyID(); ok {
		_spec.AddField(entity.FieldPolicyID, field.TypeUint, value)
	}
	if value, ok := euo.mutation.CreatedBy(); ok {
		_spec.SetField(entity.FieldCreatedBy, field.TypeUint64, value)
	}
	if value, ok := euo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(entity.FieldCreatedBy, field.TypeUint64, value)
	}
	if euo.mutation.CreatedByCleared() {
		_spec.ClearField(entity.FieldCreatedBy, field.TypeUint64)
	}
	if value, ok := euo.mutation.Etag(); ok {
		_spec.SetField(entity.FieldEtag, field.TypeString, value)
	}
	if euo.mutation.EtagCleared() {
		_spec.ClearField(entity.FieldEtag, field.TypeString)
	}
	if value, ok := euo.mutation.MimeType(); ok {
		_spec.SetField(entity.FieldMimeType, field.TypeString, value)
	}
	if euo.mutation.MimeTypeCleared() {
		_spec.ClearField(entity.FieldMimeType, field.TypeString)
	}
	if value, ok := euo.mutation.Dimension(); ok {
		_spec.SetField(entity.FieldDimension, field.TypeString, value)
	}
	if euo.mutation.DimensionCleared() {
		_spec.ClearField(entity.FieldDimension, field.TypeString)
	}
	if value, ok := euo.mutation.StorageMetadata(); ok {
		_spec.SetField(entity.FieldStorageMetadata, field.TypeOther, value)
	}
	if euo.mutation.StorageMetadataCleared() {
		_spec.ClearField(entity.FieldStorageMetadata, field.TypeOther)
	}
	if euo.mutation.FileVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.FileVersionsTable,
			Columns: []string{entity.FileVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileentity.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedFileVersionsIDs(); len(nodes) > 0 && !euo.mutation.FileVersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.FileVersionsTable,
			Columns: []string{entity.FileVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileentity.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FileVersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.FileVersionsTable,
			Columns: []string{entity.FileVersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fileentity.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(euo.modifiers...)
	_node = &Entity{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
