// Code generated by ent, DO NOT EDIT.

package visitorstat

import (
	"anheyu-app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldUpdatedAt, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldDate, v))
}

// UniqueVisitors applies equality check predicate on the "unique_visitors" field. It's identical to UniqueVisitorsEQ.
func UniqueVisitors(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldUniqueVisitors, v))
}

// TotalViews applies equality check predicate on the "total_views" field. It's identical to TotalViewsEQ.
func TotalViews(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldTotalViews, v))
}

// PageViews applies equality check predicate on the "page_views" field. It's identical to PageViewsEQ.
func PageViews(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldPageViews, v))
}

// BounceCount applies equality check predicate on the "bounce_count" field. It's identical to BounceCountEQ.
func BounceCount(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldBounceCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLTE(FieldUpdatedAt, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLTE(FieldDate, v))
}

// UniqueVisitorsEQ applies the EQ predicate on the "unique_visitors" field.
func UniqueVisitorsEQ(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldUniqueVisitors, v))
}

// UniqueVisitorsNEQ applies the NEQ predicate on the "unique_visitors" field.
func UniqueVisitorsNEQ(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNEQ(FieldUniqueVisitors, v))
}

// UniqueVisitorsIn applies the In predicate on the "unique_visitors" field.
func UniqueVisitorsIn(vs ...int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldIn(FieldUniqueVisitors, vs...))
}

// UniqueVisitorsNotIn applies the NotIn predicate on the "unique_visitors" field.
func UniqueVisitorsNotIn(vs ...int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNotIn(FieldUniqueVisitors, vs...))
}

// UniqueVisitorsGT applies the GT predicate on the "unique_visitors" field.
func UniqueVisitorsGT(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGT(FieldUniqueVisitors, v))
}

// UniqueVisitorsGTE applies the GTE predicate on the "unique_visitors" field.
func UniqueVisitorsGTE(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGTE(FieldUniqueVisitors, v))
}

// UniqueVisitorsLT applies the LT predicate on the "unique_visitors" field.
func UniqueVisitorsLT(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLT(FieldUniqueVisitors, v))
}

// UniqueVisitorsLTE applies the LTE predicate on the "unique_visitors" field.
func UniqueVisitorsLTE(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLTE(FieldUniqueVisitors, v))
}

// TotalViewsEQ applies the EQ predicate on the "total_views" field.
func TotalViewsEQ(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldTotalViews, v))
}

// TotalViewsNEQ applies the NEQ predicate on the "total_views" field.
func TotalViewsNEQ(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNEQ(FieldTotalViews, v))
}

// TotalViewsIn applies the In predicate on the "total_views" field.
func TotalViewsIn(vs ...int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldIn(FieldTotalViews, vs...))
}

// TotalViewsNotIn applies the NotIn predicate on the "total_views" field.
func TotalViewsNotIn(vs ...int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNotIn(FieldTotalViews, vs...))
}

// TotalViewsGT applies the GT predicate on the "total_views" field.
func TotalViewsGT(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGT(FieldTotalViews, v))
}

// TotalViewsGTE applies the GTE predicate on the "total_views" field.
func TotalViewsGTE(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGTE(FieldTotalViews, v))
}

// TotalViewsLT applies the LT predicate on the "total_views" field.
func TotalViewsLT(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLT(FieldTotalViews, v))
}

// TotalViewsLTE applies the LTE predicate on the "total_views" field.
func TotalViewsLTE(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLTE(FieldTotalViews, v))
}

// PageViewsEQ applies the EQ predicate on the "page_views" field.
func PageViewsEQ(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldPageViews, v))
}

// PageViewsNEQ applies the NEQ predicate on the "page_views" field.
func PageViewsNEQ(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNEQ(FieldPageViews, v))
}

// PageViewsIn applies the In predicate on the "page_views" field.
func PageViewsIn(vs ...int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldIn(FieldPageViews, vs...))
}

// PageViewsNotIn applies the NotIn predicate on the "page_views" field.
func PageViewsNotIn(vs ...int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNotIn(FieldPageViews, vs...))
}

// PageViewsGT applies the GT predicate on the "page_views" field.
func PageViewsGT(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGT(FieldPageViews, v))
}

// PageViewsGTE applies the GTE predicate on the "page_views" field.
func PageViewsGTE(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGTE(FieldPageViews, v))
}

// PageViewsLT applies the LT predicate on the "page_views" field.
func PageViewsLT(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLT(FieldPageViews, v))
}

// PageViewsLTE applies the LTE predicate on the "page_views" field.
func PageViewsLTE(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLTE(FieldPageViews, v))
}

// BounceCountEQ applies the EQ predicate on the "bounce_count" field.
func BounceCountEQ(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldEQ(FieldBounceCount, v))
}

// BounceCountNEQ applies the NEQ predicate on the "bounce_count" field.
func BounceCountNEQ(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNEQ(FieldBounceCount, v))
}

// BounceCountIn applies the In predicate on the "bounce_count" field.
func BounceCountIn(vs ...int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldIn(FieldBounceCount, vs...))
}

// BounceCountNotIn applies the NotIn predicate on the "bounce_count" field.
func BounceCountNotIn(vs ...int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldNotIn(FieldBounceCount, vs...))
}

// BounceCountGT applies the GT predicate on the "bounce_count" field.
func BounceCountGT(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGT(FieldBounceCount, v))
}

// BounceCountGTE applies the GTE predicate on the "bounce_count" field.
func BounceCountGTE(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldGTE(FieldBounceCount, v))
}

// BounceCountLT applies the LT predicate on the "bounce_count" field.
func BounceCountLT(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLT(FieldBounceCount, v))
}

// BounceCountLTE applies the LTE predicate on the "bounce_count" field.
func BounceCountLTE(v int64) predicate.VisitorStat {
	return predicate.VisitorStat(sql.FieldLTE(FieldBounceCount, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VisitorStat) predicate.VisitorStat {
	return predicate.VisitorStat(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VisitorStat) predicate.VisitorStat {
	return predicate.VisitorStat(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VisitorStat) predicate.VisitorStat {
	return predicate.VisitorStat(sql.NotPredicates(p))
}
