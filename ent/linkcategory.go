// Code generated by ent, DO NOT EDIT.

package ent

import (
	"anheyu-app/ent/linkcategory"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LinkCategory is the model entity for the LinkCategory schema.
type LinkCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 分类名称
	Name string `json:"name,omitempty"`
	// 分类描述
	Description string `json:"description,omitempty"`
	// 分类样式 (card, list)
	Style linkcategory.Style `json:"style,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LinkCategoryQuery when eager-loading is set.
	Edges        LinkCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LinkCategoryEdges holds the relations/edges for other nodes in the graph.
type LinkCategoryEdges struct {
	// Links holds the value of the links edge.
	Links []*Link `json:"links,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LinksOrErr returns the Links value or an error if the edge
// was not loaded in eager-loading.
func (e LinkCategoryEdges) LinksOrErr() ([]*Link, error) {
	if e.loadedTypes[0] {
		return e.Links, nil
	}
	return nil, &NotLoadedError{edge: "links"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LinkCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case linkcategory.FieldID:
			values[i] = new(sql.NullInt64)
		case linkcategory.FieldName, linkcategory.FieldDescription, linkcategory.FieldStyle:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LinkCategory fields.
func (lc *LinkCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case linkcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lc.ID = int(value.Int64)
		case linkcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				lc.Name = value.String
			}
		case linkcategory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				lc.Description = value.String
			}
		case linkcategory.FieldStyle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field style", values[i])
			} else if value.Valid {
				lc.Style = linkcategory.Style(value.String)
			}
		default:
			lc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LinkCategory.
// This includes values selected through modifiers, order, etc.
func (lc *LinkCategory) Value(name string) (ent.Value, error) {
	return lc.selectValues.Get(name)
}

// QueryLinks queries the "links" edge of the LinkCategory entity.
func (lc *LinkCategory) QueryLinks() *LinkQuery {
	return NewLinkCategoryClient(lc.config).QueryLinks(lc)
}

// Update returns a builder for updating this LinkCategory.
// Note that you need to call LinkCategory.Unwrap() before calling this method if this LinkCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (lc *LinkCategory) Update() *LinkCategoryUpdateOne {
	return NewLinkCategoryClient(lc.config).UpdateOne(lc)
}

// Unwrap unwraps the LinkCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lc *LinkCategory) Unwrap() *LinkCategory {
	_tx, ok := lc.config.driver.(*txDriver)
	if !ok {
		panic("ent: LinkCategory is not a transactional entity")
	}
	lc.config.driver = _tx.drv
	return lc
}

// String implements the fmt.Stringer.
func (lc *LinkCategory) String() string {
	var builder strings.Builder
	builder.WriteString("LinkCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lc.ID))
	builder.WriteString("name=")
	builder.WriteString(lc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(lc.Description)
	builder.WriteString(", ")
	builder.WriteString("style=")
	builder.WriteString(fmt.Sprintf("%v", lc.Style))
	builder.WriteByte(')')
	return builder.String()
}

// LinkCategories is a parsable slice of LinkCategory.
type LinkCategories []*LinkCategory
