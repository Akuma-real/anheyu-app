// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/anzhiyu-c/anheyu-app/ent/posttag"
)

// PostTag is the model entity for the PostTag schema.
type PostTag struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 标签名称
	Name string `json:"name,omitempty"`
	// 引用该标签的文章数量
	Count int `json:"count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostTagQuery when eager-loading is set.
	Edges        PostTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PostTagEdges holds the relations/edges for other nodes in the graph.
type PostTagEdges struct {
	// Articles holds the value of the articles edge.
	Articles []*Article `json:"articles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ArticlesOrErr returns the Articles value or an error if the edge
// was not loaded in eager-loading.
func (e PostTagEdges) ArticlesOrErr() ([]*Article, error) {
	if e.loadedTypes[0] {
		return e.Articles, nil
	}
	return nil, &NotLoadedError{edge: "articles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case posttag.FieldID, posttag.FieldCount:
			values[i] = new(sql.NullInt64)
		case posttag.FieldName:
			values[i] = new(sql.NullString)
		case posttag.FieldDeletedAt, posttag.FieldCreatedAt, posttag.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostTag fields.
func (pt *PostTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case posttag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pt.ID = uint(value.Int64)
		case posttag.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pt.DeletedAt = new(time.Time)
				*pt.DeletedAt = value.Time
			}
		case posttag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Time
			}
		case posttag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pt.UpdatedAt = value.Time
			}
		case posttag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pt.Name = value.String
			}
		case posttag.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				pt.Count = int(value.Int64)
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PostTag.
// This includes values selected through modifiers, order, etc.
func (pt *PostTag) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryArticles queries the "articles" edge of the PostTag entity.
func (pt *PostTag) QueryArticles() *ArticleQuery {
	return NewPostTagClient(pt.config).QueryArticles(pt)
}

// Update returns a builder for updating this PostTag.
// Note that you need to call PostTag.Unwrap() before calling this method if this PostTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PostTag) Update() *PostTagUpdateOne {
	return NewPostTagClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PostTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PostTag) Unwrap() *PostTag {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostTag is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PostTag) String() string {
	var builder strings.Builder
	builder.WriteString("PostTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	if v := pt.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pt.Name)
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", pt.Count))
	builder.WriteByte(')')
	return builder.String()
}

// PostTags is a parsable slice of PostTag.
type PostTags []*PostTag
