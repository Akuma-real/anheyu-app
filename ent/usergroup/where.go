// Code generated by ent, DO NOT EDIT.

package usergroup

import (
	"time"

	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
	"github.com/anzhiyu-c/anheyu-app/pkg/domain/model"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldDescription, v))
}

// Permissions applies equality check predicate on the "permissions" field. It's identical to PermissionsEQ.
func Permissions(v model.Boolset) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldPermissions, v))
}

// MaxStorage applies equality check predicate on the "max_storage" field. It's identical to MaxStorageEQ.
func MaxStorage(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldMaxStorage, v))
}

// SpeedLimit applies equality check predicate on the "speed_limit" field. It's identical to SpeedLimitEQ.
func SpeedLimit(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldSpeedLimit, v))
}

// Settings applies equality check predicate on the "settings" field. It's identical to SettingsEQ.
func Settings(v *model.GroupSettings) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldSettings, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldContainsFold(FieldDescription, v))
}

// PermissionsEQ applies the EQ predicate on the "permissions" field.
func PermissionsEQ(v model.Boolset) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldPermissions, v))
}

// PermissionsNEQ applies the NEQ predicate on the "permissions" field.
func PermissionsNEQ(v model.Boolset) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNEQ(FieldPermissions, v))
}

// PermissionsIn applies the In predicate on the "permissions" field.
func PermissionsIn(vs ...model.Boolset) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIn(FieldPermissions, vs...))
}

// PermissionsNotIn applies the NotIn predicate on the "permissions" field.
func PermissionsNotIn(vs ...model.Boolset) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotIn(FieldPermissions, vs...))
}

// PermissionsGT applies the GT predicate on the "permissions" field.
func PermissionsGT(v model.Boolset) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGT(FieldPermissions, v))
}

// PermissionsGTE applies the GTE predicate on the "permissions" field.
func PermissionsGTE(v model.Boolset) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGTE(FieldPermissions, v))
}

// PermissionsLT applies the LT predicate on the "permissions" field.
func PermissionsLT(v model.Boolset) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLT(FieldPermissions, v))
}

// PermissionsLTE applies the LTE predicate on the "permissions" field.
func PermissionsLTE(v model.Boolset) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLTE(FieldPermissions, v))
}

// MaxStorageEQ applies the EQ predicate on the "max_storage" field.
func MaxStorageEQ(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldMaxStorage, v))
}

// MaxStorageNEQ applies the NEQ predicate on the "max_storage" field.
func MaxStorageNEQ(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNEQ(FieldMaxStorage, v))
}

// MaxStorageIn applies the In predicate on the "max_storage" field.
func MaxStorageIn(vs ...int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIn(FieldMaxStorage, vs...))
}

// MaxStorageNotIn applies the NotIn predicate on the "max_storage" field.
func MaxStorageNotIn(vs ...int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotIn(FieldMaxStorage, vs...))
}

// MaxStorageGT applies the GT predicate on the "max_storage" field.
func MaxStorageGT(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGT(FieldMaxStorage, v))
}

// MaxStorageGTE applies the GTE predicate on the "max_storage" field.
func MaxStorageGTE(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGTE(FieldMaxStorage, v))
}

// MaxStorageLT applies the LT predicate on the "max_storage" field.
func MaxStorageLT(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLT(FieldMaxStorage, v))
}

// MaxStorageLTE applies the LTE predicate on the "max_storage" field.
func MaxStorageLTE(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLTE(FieldMaxStorage, v))
}

// SpeedLimitEQ applies the EQ predicate on the "speed_limit" field.
func SpeedLimitEQ(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldSpeedLimit, v))
}

// SpeedLimitNEQ applies the NEQ predicate on the "speed_limit" field.
func SpeedLimitNEQ(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNEQ(FieldSpeedLimit, v))
}

// SpeedLimitIn applies the In predicate on the "speed_limit" field.
func SpeedLimitIn(vs ...int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIn(FieldSpeedLimit, vs...))
}

// SpeedLimitNotIn applies the NotIn predicate on the "speed_limit" field.
func SpeedLimitNotIn(vs ...int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotIn(FieldSpeedLimit, vs...))
}

// SpeedLimitGT applies the GT predicate on the "speed_limit" field.
func SpeedLimitGT(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGT(FieldSpeedLimit, v))
}

// SpeedLimitGTE applies the GTE predicate on the "speed_limit" field.
func SpeedLimitGTE(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGTE(FieldSpeedLimit, v))
}

// SpeedLimitLT applies the LT predicate on the "speed_limit" field.
func SpeedLimitLT(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLT(FieldSpeedLimit, v))
}

// SpeedLimitLTE applies the LTE predicate on the "speed_limit" field.
func SpeedLimitLTE(v int64) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLTE(FieldSpeedLimit, v))
}

// SettingsEQ applies the EQ predicate on the "settings" field.
func SettingsEQ(v *model.GroupSettings) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldEQ(FieldSettings, v))
}

// SettingsNEQ applies the NEQ predicate on the "settings" field.
func SettingsNEQ(v *model.GroupSettings) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNEQ(FieldSettings, v))
}

// SettingsIn applies the In predicate on the "settings" field.
func SettingsIn(vs ...*model.GroupSettings) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldIn(FieldSettings, vs...))
}

// SettingsNotIn applies the NotIn predicate on the "settings" field.
func SettingsNotIn(vs ...*model.GroupSettings) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldNotIn(FieldSettings, vs...))
}

// SettingsGT applies the GT predicate on the "settings" field.
func SettingsGT(v *model.GroupSettings) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGT(FieldSettings, v))
}

// SettingsGTE applies the GTE predicate on the "settings" field.
func SettingsGTE(v *model.GroupSettings) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldGTE(FieldSettings, v))
}

// SettingsLT applies the LT predicate on the "settings" field.
func SettingsLT(v *model.GroupSettings) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLT(FieldSettings, v))
}

// SettingsLTE applies the LTE predicate on the "settings" field.
func SettingsLTE(v *model.GroupSettings) predicate.UserGroup {
	return predicate.UserGroup(sql.FieldLTE(FieldSettings, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.UserGroup {
	return predicate.UserGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.UserGroup {
	return predicate.UserGroup(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserGroup) predicate.UserGroup {
	return predicate.UserGroup(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserGroup) predicate.UserGroup {
	return predicate.UserGroup(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserGroup) predicate.UserGroup {
	return predicate.UserGroup(sql.NotPredicates(p))
}
