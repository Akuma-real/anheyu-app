// Code generated by ent, DO NOT EDIT.

package ent

import (
	"anheyu-app/ent/predicate"
	"anheyu-app/ent/visitorlog"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VisitorLogUpdate is the builder for updating VisitorLog entities.
type VisitorLogUpdate struct {
	config
	hooks     []Hook
	mutation  *VisitorLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VisitorLogUpdate builder.
func (vlu *VisitorLogUpdate) Where(ps ...predicate.VisitorLog) *VisitorLogUpdate {
	vlu.mutation.Where(ps...)
	return vlu
}

// SetVisitorID sets the "visitor_id" field.
func (vlu *VisitorLogUpdate) SetVisitorID(s string) *VisitorLogUpdate {
	vlu.mutation.SetVisitorID(s)
	return vlu
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableVisitorID(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetVisitorID(*s)
	}
	return vlu
}

// SetSessionID sets the "session_id" field.
func (vlu *VisitorLogUpdate) SetSessionID(s string) *VisitorLogUpdate {
	vlu.mutation.SetSessionID(s)
	return vlu
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableSessionID(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetSessionID(*s)
	}
	return vlu
}

// ClearSessionID clears the value of the "session_id" field.
func (vlu *VisitorLogUpdate) ClearSessionID() *VisitorLogUpdate {
	vlu.mutation.ClearSessionID()
	return vlu
}

// SetIPAddress sets the "ip_address" field.
func (vlu *VisitorLogUpdate) SetIPAddress(s string) *VisitorLogUpdate {
	vlu.mutation.SetIPAddress(s)
	return vlu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableIPAddress(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetIPAddress(*s)
	}
	return vlu
}

// SetUserAgent sets the "user_agent" field.
func (vlu *VisitorLogUpdate) SetUserAgent(s string) *VisitorLogUpdate {
	vlu.mutation.SetUserAgent(s)
	return vlu
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableUserAgent(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetUserAgent(*s)
	}
	return vlu
}

// ClearUserAgent clears the value of the "user_agent" field.
func (vlu *VisitorLogUpdate) ClearUserAgent() *VisitorLogUpdate {
	vlu.mutation.ClearUserAgent()
	return vlu
}

// SetReferer sets the "referer" field.
func (vlu *VisitorLogUpdate) SetReferer(s string) *VisitorLogUpdate {
	vlu.mutation.SetReferer(s)
	return vlu
}

// SetNillableReferer sets the "referer" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableReferer(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetReferer(*s)
	}
	return vlu
}

// ClearReferer clears the value of the "referer" field.
func (vlu *VisitorLogUpdate) ClearReferer() *VisitorLogUpdate {
	vlu.mutation.ClearReferer()
	return vlu
}

// SetURLPath sets the "url_path" field.
func (vlu *VisitorLogUpdate) SetURLPath(s string) *VisitorLogUpdate {
	vlu.mutation.SetURLPath(s)
	return vlu
}

// SetNillableURLPath sets the "url_path" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableURLPath(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetURLPath(*s)
	}
	return vlu
}

// SetCountry sets the "country" field.
func (vlu *VisitorLogUpdate) SetCountry(s string) *VisitorLogUpdate {
	vlu.mutation.SetCountry(s)
	return vlu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableCountry(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetCountry(*s)
	}
	return vlu
}

// ClearCountry clears the value of the "country" field.
func (vlu *VisitorLogUpdate) ClearCountry() *VisitorLogUpdate {
	vlu.mutation.ClearCountry()
	return vlu
}

// SetRegion sets the "region" field.
func (vlu *VisitorLogUpdate) SetRegion(s string) *VisitorLogUpdate {
	vlu.mutation.SetRegion(s)
	return vlu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableRegion(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetRegion(*s)
	}
	return vlu
}

// ClearRegion clears the value of the "region" field.
func (vlu *VisitorLogUpdate) ClearRegion() *VisitorLogUpdate {
	vlu.mutation.ClearRegion()
	return vlu
}

// SetCity sets the "city" field.
func (vlu *VisitorLogUpdate) SetCity(s string) *VisitorLogUpdate {
	vlu.mutation.SetCity(s)
	return vlu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableCity(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetCity(*s)
	}
	return vlu
}

// ClearCity clears the value of the "city" field.
func (vlu *VisitorLogUpdate) ClearCity() *VisitorLogUpdate {
	vlu.mutation.ClearCity()
	return vlu
}

// SetBrowser sets the "browser" field.
func (vlu *VisitorLogUpdate) SetBrowser(s string) *VisitorLogUpdate {
	vlu.mutation.SetBrowser(s)
	return vlu
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableBrowser(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetBrowser(*s)
	}
	return vlu
}

// ClearBrowser clears the value of the "browser" field.
func (vlu *VisitorLogUpdate) ClearBrowser() *VisitorLogUpdate {
	vlu.mutation.ClearBrowser()
	return vlu
}

// SetOs sets the "os" field.
func (vlu *VisitorLogUpdate) SetOs(s string) *VisitorLogUpdate {
	vlu.mutation.SetOs(s)
	return vlu
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableOs(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetOs(*s)
	}
	return vlu
}

// ClearOs clears the value of the "os" field.
func (vlu *VisitorLogUpdate) ClearOs() *VisitorLogUpdate {
	vlu.mutation.ClearOs()
	return vlu
}

// SetDevice sets the "device" field.
func (vlu *VisitorLogUpdate) SetDevice(s string) *VisitorLogUpdate {
	vlu.mutation.SetDevice(s)
	return vlu
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableDevice(s *string) *VisitorLogUpdate {
	if s != nil {
		vlu.SetDevice(*s)
	}
	return vlu
}

// ClearDevice clears the value of the "device" field.
func (vlu *VisitorLogUpdate) ClearDevice() *VisitorLogUpdate {
	vlu.mutation.ClearDevice()
	return vlu
}

// SetDuration sets the "duration" field.
func (vlu *VisitorLogUpdate) SetDuration(i int) *VisitorLogUpdate {
	vlu.mutation.ResetDuration()
	vlu.mutation.SetDuration(i)
	return vlu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableDuration(i *int) *VisitorLogUpdate {
	if i != nil {
		vlu.SetDuration(*i)
	}
	return vlu
}

// AddDuration adds i to the "duration" field.
func (vlu *VisitorLogUpdate) AddDuration(i int) *VisitorLogUpdate {
	vlu.mutation.AddDuration(i)
	return vlu
}

// SetIsBounce sets the "is_bounce" field.
func (vlu *VisitorLogUpdate) SetIsBounce(b bool) *VisitorLogUpdate {
	vlu.mutation.SetIsBounce(b)
	return vlu
}

// SetNillableIsBounce sets the "is_bounce" field if the given value is not nil.
func (vlu *VisitorLogUpdate) SetNillableIsBounce(b *bool) *VisitorLogUpdate {
	if b != nil {
		vlu.SetIsBounce(*b)
	}
	return vlu
}

// Mutation returns the VisitorLogMutation object of the builder.
func (vlu *VisitorLogUpdate) Mutation() *VisitorLogMutation {
	return vlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vlu *VisitorLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vlu.sqlSave, vlu.mutation, vlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vlu *VisitorLogUpdate) SaveX(ctx context.Context) int {
	affected, err := vlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vlu *VisitorLogUpdate) Exec(ctx context.Context) error {
	_, err := vlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlu *VisitorLogUpdate) ExecX(ctx context.Context) {
	if err := vlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vlu *VisitorLogUpdate) check() error {
	if v, ok := vlu.mutation.VisitorID(); ok {
		if err := visitorlog.VisitorIDValidator(v); err != nil {
			return &ValidationError{Name: "visitor_id", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.visitor_id": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.SessionID(); ok {
		if err := visitorlog.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "session_id", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.session_id": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.IPAddress(); ok {
		if err := visitorlog.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.ip_address": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.UserAgent(); ok {
		if err := visitorlog.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.user_agent": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.Referer(); ok {
		if err := visitorlog.RefererValidator(v); err != nil {
			return &ValidationError{Name: "referer", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.referer": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.URLPath(); ok {
		if err := visitorlog.URLPathValidator(v); err != nil {
			return &ValidationError{Name: "url_path", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.url_path": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.Country(); ok {
		if err := visitorlog.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.country": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.Region(); ok {
		if err := visitorlog.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.region": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.City(); ok {
		if err := visitorlog.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.city": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.Browser(); ok {
		if err := visitorlog.BrowserValidator(v); err != nil {
			return &ValidationError{Name: "browser", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.browser": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.Os(); ok {
		if err := visitorlog.OsValidator(v); err != nil {
			return &ValidationError{Name: "os", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.os": %w`, err)}
		}
	}
	if v, ok := vlu.mutation.Device(); ok {
		if err := visitorlog.DeviceValidator(v); err != nil {
			return &ValidationError{Name: "device", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.device": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vlu *VisitorLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VisitorLogUpdate {
	vlu.modifiers = append(vlu.modifiers, modifiers...)
	return vlu
}

func (vlu *VisitorLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(visitorlog.Table, visitorlog.Columns, sqlgraph.NewFieldSpec(visitorlog.FieldID, field.TypeUint))
	if ps := vlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vlu.mutation.VisitorID(); ok {
		_spec.SetField(visitorlog.FieldVisitorID, field.TypeString, value)
	}
	if value, ok := vlu.mutation.SessionID(); ok {
		_spec.SetField(visitorlog.FieldSessionID, field.TypeString, value)
	}
	if vlu.mutation.SessionIDCleared() {
		_spec.ClearField(visitorlog.FieldSessionID, field.TypeString)
	}
	if value, ok := vlu.mutation.IPAddress(); ok {
		_spec.SetField(visitorlog.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := vlu.mutation.UserAgent(); ok {
		_spec.SetField(visitorlog.FieldUserAgent, field.TypeString, value)
	}
	if vlu.mutation.UserAgentCleared() {
		_spec.ClearField(visitorlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := vlu.mutation.Referer(); ok {
		_spec.SetField(visitorlog.FieldReferer, field.TypeString, value)
	}
	if vlu.mutation.RefererCleared() {
		_spec.ClearField(visitorlog.FieldReferer, field.TypeString)
	}
	if value, ok := vlu.mutation.URLPath(); ok {
		_spec.SetField(visitorlog.FieldURLPath, field.TypeString, value)
	}
	if value, ok := vlu.mutation.Country(); ok {
		_spec.SetField(visitorlog.FieldCountry, field.TypeString, value)
	}
	if vlu.mutation.CountryCleared() {
		_spec.ClearField(visitorlog.FieldCountry, field.TypeString)
	}
	if value, ok := vlu.mutation.Region(); ok {
		_spec.SetField(visitorlog.FieldRegion, field.TypeString, value)
	}
	if vlu.mutation.RegionCleared() {
		_spec.ClearField(visitorlog.FieldRegion, field.TypeString)
	}
	if value, ok := vlu.mutation.City(); ok {
		_spec.SetField(visitorlog.FieldCity, field.TypeString, value)
	}
	if vlu.mutation.CityCleared() {
		_spec.ClearField(visitorlog.FieldCity, field.TypeString)
	}
	if value, ok := vlu.mutation.Browser(); ok {
		_spec.SetField(visitorlog.FieldBrowser, field.TypeString, value)
	}
	if vlu.mutation.BrowserCleared() {
		_spec.ClearField(visitorlog.FieldBrowser, field.TypeString)
	}
	if value, ok := vlu.mutation.Os(); ok {
		_spec.SetField(visitorlog.FieldOs, field.TypeString, value)
	}
	if vlu.mutation.OsCleared() {
		_spec.ClearField(visitorlog.FieldOs, field.TypeString)
	}
	if value, ok := vlu.mutation.Device(); ok {
		_spec.SetField(visitorlog.FieldDevice, field.TypeString, value)
	}
	if vlu.mutation.DeviceCleared() {
		_spec.ClearField(visitorlog.FieldDevice, field.TypeString)
	}
	if value, ok := vlu.mutation.Duration(); ok {
		_spec.SetField(visitorlog.FieldDuration, field.TypeInt, value)
	}
	if value, ok := vlu.mutation.AddedDuration(); ok {
		_spec.AddField(visitorlog.FieldDuration, field.TypeInt, value)
	}
	if value, ok := vlu.mutation.IsBounce(); ok {
		_spec.SetField(visitorlog.FieldIsBounce, field.TypeBool, value)
	}
	_spec.AddModifiers(vlu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitorlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vlu.mutation.done = true
	return n, nil
}

// VisitorLogUpdateOne is the builder for updating a single VisitorLog entity.
type VisitorLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VisitorLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetVisitorID sets the "visitor_id" field.
func (vluo *VisitorLogUpdateOne) SetVisitorID(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetVisitorID(s)
	return vluo
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableVisitorID(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetVisitorID(*s)
	}
	return vluo
}

// SetSessionID sets the "session_id" field.
func (vluo *VisitorLogUpdateOne) SetSessionID(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetSessionID(s)
	return vluo
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableSessionID(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetSessionID(*s)
	}
	return vluo
}

// ClearSessionID clears the value of the "session_id" field.
func (vluo *VisitorLogUpdateOne) ClearSessionID() *VisitorLogUpdateOne {
	vluo.mutation.ClearSessionID()
	return vluo
}

// SetIPAddress sets the "ip_address" field.
func (vluo *VisitorLogUpdateOne) SetIPAddress(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetIPAddress(s)
	return vluo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableIPAddress(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetIPAddress(*s)
	}
	return vluo
}

// SetUserAgent sets the "user_agent" field.
func (vluo *VisitorLogUpdateOne) SetUserAgent(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetUserAgent(s)
	return vluo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableUserAgent(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetUserAgent(*s)
	}
	return vluo
}

// ClearUserAgent clears the value of the "user_agent" field.
func (vluo *VisitorLogUpdateOne) ClearUserAgent() *VisitorLogUpdateOne {
	vluo.mutation.ClearUserAgent()
	return vluo
}

// SetReferer sets the "referer" field.
func (vluo *VisitorLogUpdateOne) SetReferer(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetReferer(s)
	return vluo
}

// SetNillableReferer sets the "referer" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableReferer(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetReferer(*s)
	}
	return vluo
}

// ClearReferer clears the value of the "referer" field.
func (vluo *VisitorLogUpdateOne) ClearReferer() *VisitorLogUpdateOne {
	vluo.mutation.ClearReferer()
	return vluo
}

// SetURLPath sets the "url_path" field.
func (vluo *VisitorLogUpdateOne) SetURLPath(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetURLPath(s)
	return vluo
}

// SetNillableURLPath sets the "url_path" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableURLPath(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetURLPath(*s)
	}
	return vluo
}

// SetCountry sets the "country" field.
func (vluo *VisitorLogUpdateOne) SetCountry(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetCountry(s)
	return vluo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableCountry(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetCountry(*s)
	}
	return vluo
}

// ClearCountry clears the value of the "country" field.
func (vluo *VisitorLogUpdateOne) ClearCountry() *VisitorLogUpdateOne {
	vluo.mutation.ClearCountry()
	return vluo
}

// SetRegion sets the "region" field.
func (vluo *VisitorLogUpdateOne) SetRegion(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetRegion(s)
	return vluo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableRegion(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetRegion(*s)
	}
	return vluo
}

// ClearRegion clears the value of the "region" field.
func (vluo *VisitorLogUpdateOne) ClearRegion() *VisitorLogUpdateOne {
	vluo.mutation.ClearRegion()
	return vluo
}

// SetCity sets the "city" field.
func (vluo *VisitorLogUpdateOne) SetCity(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetCity(s)
	return vluo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableCity(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetCity(*s)
	}
	return vluo
}

// ClearCity clears the value of the "city" field.
func (vluo *VisitorLogUpdateOne) ClearCity() *VisitorLogUpdateOne {
	vluo.mutation.ClearCity()
	return vluo
}

// SetBrowser sets the "browser" field.
func (vluo *VisitorLogUpdateOne) SetBrowser(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetBrowser(s)
	return vluo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableBrowser(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetBrowser(*s)
	}
	return vluo
}

// ClearBrowser clears the value of the "browser" field.
func (vluo *VisitorLogUpdateOne) ClearBrowser() *VisitorLogUpdateOne {
	vluo.mutation.ClearBrowser()
	return vluo
}

// SetOs sets the "os" field.
func (vluo *VisitorLogUpdateOne) SetOs(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetOs(s)
	return vluo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableOs(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetOs(*s)
	}
	return vluo
}

// ClearOs clears the value of the "os" field.
func (vluo *VisitorLogUpdateOne) ClearOs() *VisitorLogUpdateOne {
	vluo.mutation.ClearOs()
	return vluo
}

// SetDevice sets the "device" field.
func (vluo *VisitorLogUpdateOne) SetDevice(s string) *VisitorLogUpdateOne {
	vluo.mutation.SetDevice(s)
	return vluo
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableDevice(s *string) *VisitorLogUpdateOne {
	if s != nil {
		vluo.SetDevice(*s)
	}
	return vluo
}

// ClearDevice clears the value of the "device" field.
func (vluo *VisitorLogUpdateOne) ClearDevice() *VisitorLogUpdateOne {
	vluo.mutation.ClearDevice()
	return vluo
}

// SetDuration sets the "duration" field.
func (vluo *VisitorLogUpdateOne) SetDuration(i int) *VisitorLogUpdateOne {
	vluo.mutation.ResetDuration()
	vluo.mutation.SetDuration(i)
	return vluo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableDuration(i *int) *VisitorLogUpdateOne {
	if i != nil {
		vluo.SetDuration(*i)
	}
	return vluo
}

// AddDuration adds i to the "duration" field.
func (vluo *VisitorLogUpdateOne) AddDuration(i int) *VisitorLogUpdateOne {
	vluo.mutation.AddDuration(i)
	return vluo
}

// SetIsBounce sets the "is_bounce" field.
func (vluo *VisitorLogUpdateOne) SetIsBounce(b bool) *VisitorLogUpdateOne {
	vluo.mutation.SetIsBounce(b)
	return vluo
}

// SetNillableIsBounce sets the "is_bounce" field if the given value is not nil.
func (vluo *VisitorLogUpdateOne) SetNillableIsBounce(b *bool) *VisitorLogUpdateOne {
	if b != nil {
		vluo.SetIsBounce(*b)
	}
	return vluo
}

// Mutation returns the VisitorLogMutation object of the builder.
func (vluo *VisitorLogUpdateOne) Mutation() *VisitorLogMutation {
	return vluo.mutation
}

// Where appends a list predicates to the VisitorLogUpdate builder.
func (vluo *VisitorLogUpdateOne) Where(ps ...predicate.VisitorLog) *VisitorLogUpdateOne {
	vluo.mutation.Where(ps...)
	return vluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vluo *VisitorLogUpdateOne) Select(field string, fields ...string) *VisitorLogUpdateOne {
	vluo.fields = append([]string{field}, fields...)
	return vluo
}

// Save executes the query and returns the updated VisitorLog entity.
func (vluo *VisitorLogUpdateOne) Save(ctx context.Context) (*VisitorLog, error) {
	return withHooks(ctx, vluo.sqlSave, vluo.mutation, vluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vluo *VisitorLogUpdateOne) SaveX(ctx context.Context) *VisitorLog {
	node, err := vluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vluo *VisitorLogUpdateOne) Exec(ctx context.Context) error {
	_, err := vluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vluo *VisitorLogUpdateOne) ExecX(ctx context.Context) {
	if err := vluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vluo *VisitorLogUpdateOne) check() error {
	if v, ok := vluo.mutation.VisitorID(); ok {
		if err := visitorlog.VisitorIDValidator(v); err != nil {
			return &ValidationError{Name: "visitor_id", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.visitor_id": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.SessionID(); ok {
		if err := visitorlog.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "session_id", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.session_id": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.IPAddress(); ok {
		if err := visitorlog.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.ip_address": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.UserAgent(); ok {
		if err := visitorlog.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.user_agent": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.Referer(); ok {
		if err := visitorlog.RefererValidator(v); err != nil {
			return &ValidationError{Name: "referer", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.referer": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.URLPath(); ok {
		if err := visitorlog.URLPathValidator(v); err != nil {
			return &ValidationError{Name: "url_path", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.url_path": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.Country(); ok {
		if err := visitorlog.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.country": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.Region(); ok {
		if err := visitorlog.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.region": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.City(); ok {
		if err := visitorlog.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.city": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.Browser(); ok {
		if err := visitorlog.BrowserValidator(v); err != nil {
			return &ValidationError{Name: "browser", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.browser": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.Os(); ok {
		if err := visitorlog.OsValidator(v); err != nil {
			return &ValidationError{Name: "os", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.os": %w`, err)}
		}
	}
	if v, ok := vluo.mutation.Device(); ok {
		if err := visitorlog.DeviceValidator(v); err != nil {
			return &ValidationError{Name: "device", err: fmt.Errorf(`ent: validator failed for field "VisitorLog.device": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vluo *VisitorLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VisitorLogUpdateOne {
	vluo.modifiers = append(vluo.modifiers, modifiers...)
	return vluo
}

func (vluo *VisitorLogUpdateOne) sqlSave(ctx context.Context) (_node *VisitorLog, err error) {
	if err := vluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(visitorlog.Table, visitorlog.Columns, sqlgraph.NewFieldSpec(visitorlog.FieldID, field.TypeUint))
	id, ok := vluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VisitorLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, visitorlog.FieldID)
		for _, f := range fields {
			if !visitorlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != visitorlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vluo.mutation.VisitorID(); ok {
		_spec.SetField(visitorlog.FieldVisitorID, field.TypeString, value)
	}
	if value, ok := vluo.mutation.SessionID(); ok {
		_spec.SetField(visitorlog.FieldSessionID, field.TypeString, value)
	}
	if vluo.mutation.SessionIDCleared() {
		_spec.ClearField(visitorlog.FieldSessionID, field.TypeString)
	}
	if value, ok := vluo.mutation.IPAddress(); ok {
		_spec.SetField(visitorlog.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := vluo.mutation.UserAgent(); ok {
		_spec.SetField(visitorlog.FieldUserAgent, field.TypeString, value)
	}
	if vluo.mutation.UserAgentCleared() {
		_spec.ClearField(visitorlog.FieldUserAgent, field.TypeString)
	}
	if value, ok := vluo.mutation.Referer(); ok {
		_spec.SetField(visitorlog.FieldReferer, field.TypeString, value)
	}
	if vluo.mutation.RefererCleared() {
		_spec.ClearField(visitorlog.FieldReferer, field.TypeString)
	}
	if value, ok := vluo.mutation.URLPath(); ok {
		_spec.SetField(visitorlog.FieldURLPath, field.TypeString, value)
	}
	if value, ok := vluo.mutation.Country(); ok {
		_spec.SetField(visitorlog.FieldCountry, field.TypeString, value)
	}
	if vluo.mutation.CountryCleared() {
		_spec.ClearField(visitorlog.FieldCountry, field.TypeString)
	}
	if value, ok := vluo.mutation.Region(); ok {
		_spec.SetField(visitorlog.FieldRegion, field.TypeString, value)
	}
	if vluo.mutation.RegionCleared() {
		_spec.ClearField(visitorlog.FieldRegion, field.TypeString)
	}
	if value, ok := vluo.mutation.City(); ok {
		_spec.SetField(visitorlog.FieldCity, field.TypeString, value)
	}
	if vluo.mutation.CityCleared() {
		_spec.ClearField(visitorlog.FieldCity, field.TypeString)
	}
	if value, ok := vluo.mutation.Browser(); ok {
		_spec.SetField(visitorlog.FieldBrowser, field.TypeString, value)
	}
	if vluo.mutation.BrowserCleared() {
		_spec.ClearField(visitorlog.FieldBrowser, field.TypeString)
	}
	if value, ok := vluo.mutation.Os(); ok {
		_spec.SetField(visitorlog.FieldOs, field.TypeString, value)
	}
	if vluo.mutation.OsCleared() {
		_spec.ClearField(visitorlog.FieldOs, field.TypeString)
	}
	if value, ok := vluo.mutation.Device(); ok {
		_spec.SetField(visitorlog.FieldDevice, field.TypeString, value)
	}
	if vluo.mutation.DeviceCleared() {
		_spec.ClearField(visitorlog.FieldDevice, field.TypeString)
	}
	if value, ok := vluo.mutation.Duration(); ok {
		_spec.SetField(visitorlog.FieldDuration, field.TypeInt, value)
	}
	if value, ok := vluo.mutation.AddedDuration(); ok {
		_spec.AddField(visitorlog.FieldDuration, field.TypeInt, value)
	}
	if value, ok := vluo.mutation.IsBounce(); ok {
		_spec.SetField(visitorlog.FieldIsBounce, field.TypeBool, value)
	}
	_spec.AddModifiers(vluo.modifiers...)
	_node = &VisitorLog{config: vluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitorlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vluo.mutation.done = true
	return _node, nil
}
