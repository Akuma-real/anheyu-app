// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/album"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
)

// AlbumUpdate is the builder for updating Album entities.
type AlbumUpdate struct {
	config
	hooks     []Hook
	mutation  *AlbumMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AlbumUpdate builder.
func (au *AlbumUpdate) Where(ps ...predicate.Album) *AlbumUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AlbumUpdate) SetDeletedAt(t time.Time) *AlbumUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableDeletedAt(t *time.Time) *AlbumUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AlbumUpdate) ClearDeletedAt() *AlbumUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AlbumUpdate) SetUpdatedAt(t time.Time) *AlbumUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetImageURL sets the "image_url" field.
func (au *AlbumUpdate) SetImageURL(s string) *AlbumUpdate {
	au.mutation.SetImageURL(s)
	return au
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableImageURL(s *string) *AlbumUpdate {
	if s != nil {
		au.SetImageURL(*s)
	}
	return au
}

// SetBigImageURL sets the "big_image_url" field.
func (au *AlbumUpdate) SetBigImageURL(s string) *AlbumUpdate {
	au.mutation.SetBigImageURL(s)
	return au
}

// SetNillableBigImageURL sets the "big_image_url" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableBigImageURL(s *string) *AlbumUpdate {
	if s != nil {
		au.SetBigImageURL(*s)
	}
	return au
}

// ClearBigImageURL clears the value of the "big_image_url" field.
func (au *AlbumUpdate) ClearBigImageURL() *AlbumUpdate {
	au.mutation.ClearBigImageURL()
	return au
}

// SetDownloadURL sets the "download_url" field.
func (au *AlbumUpdate) SetDownloadURL(s string) *AlbumUpdate {
	au.mutation.SetDownloadURL(s)
	return au
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableDownloadURL(s *string) *AlbumUpdate {
	if s != nil {
		au.SetDownloadURL(*s)
	}
	return au
}

// ClearDownloadURL clears the value of the "download_url" field.
func (au *AlbumUpdate) ClearDownloadURL() *AlbumUpdate {
	au.mutation.ClearDownloadURL()
	return au
}

// SetThumbParam sets the "thumb_param" field.
func (au *AlbumUpdate) SetThumbParam(s string) *AlbumUpdate {
	au.mutation.SetThumbParam(s)
	return au
}

// SetNillableThumbParam sets the "thumb_param" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableThumbParam(s *string) *AlbumUpdate {
	if s != nil {
		au.SetThumbParam(*s)
	}
	return au
}

// ClearThumbParam clears the value of the "thumb_param" field.
func (au *AlbumUpdate) ClearThumbParam() *AlbumUpdate {
	au.mutation.ClearThumbParam()
	return au
}

// SetBigParam sets the "big_param" field.
func (au *AlbumUpdate) SetBigParam(s string) *AlbumUpdate {
	au.mutation.SetBigParam(s)
	return au
}

// SetNillableBigParam sets the "big_param" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableBigParam(s *string) *AlbumUpdate {
	if s != nil {
		au.SetBigParam(*s)
	}
	return au
}

// ClearBigParam clears the value of the "big_param" field.
func (au *AlbumUpdate) ClearBigParam() *AlbumUpdate {
	au.mutation.ClearBigParam()
	return au
}

// SetTags sets the "tags" field.
func (au *AlbumUpdate) SetTags(s string) *AlbumUpdate {
	au.mutation.SetTags(s)
	return au
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableTags(s *string) *AlbumUpdate {
	if s != nil {
		au.SetTags(*s)
	}
	return au
}

// ClearTags clears the value of the "tags" field.
func (au *AlbumUpdate) ClearTags() *AlbumUpdate {
	au.mutation.ClearTags()
	return au
}

// SetViewCount sets the "view_count" field.
func (au *AlbumUpdate) SetViewCount(i int) *AlbumUpdate {
	au.mutation.ResetViewCount()
	au.mutation.SetViewCount(i)
	return au
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableViewCount(i *int) *AlbumUpdate {
	if i != nil {
		au.SetViewCount(*i)
	}
	return au
}

// AddViewCount adds i to the "view_count" field.
func (au *AlbumUpdate) AddViewCount(i int) *AlbumUpdate {
	au.mutation.AddViewCount(i)
	return au
}

// SetDownloadCount sets the "download_count" field.
func (au *AlbumUpdate) SetDownloadCount(i int) *AlbumUpdate {
	au.mutation.ResetDownloadCount()
	au.mutation.SetDownloadCount(i)
	return au
}

// SetNillableDownloadCount sets the "download_count" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableDownloadCount(i *int) *AlbumUpdate {
	if i != nil {
		au.SetDownloadCount(*i)
	}
	return au
}

// AddDownloadCount adds i to the "download_count" field.
func (au *AlbumUpdate) AddDownloadCount(i int) *AlbumUpdate {
	au.mutation.AddDownloadCount(i)
	return au
}

// SetWidth sets the "width" field.
func (au *AlbumUpdate) SetWidth(i int) *AlbumUpdate {
	au.mutation.ResetWidth()
	au.mutation.SetWidth(i)
	return au
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableWidth(i *int) *AlbumUpdate {
	if i != nil {
		au.SetWidth(*i)
	}
	return au
}

// AddWidth adds i to the "width" field.
func (au *AlbumUpdate) AddWidth(i int) *AlbumUpdate {
	au.mutation.AddWidth(i)
	return au
}

// ClearWidth clears the value of the "width" field.
func (au *AlbumUpdate) ClearWidth() *AlbumUpdate {
	au.mutation.ClearWidth()
	return au
}

// SetHeight sets the "height" field.
func (au *AlbumUpdate) SetHeight(i int) *AlbumUpdate {
	au.mutation.ResetHeight()
	au.mutation.SetHeight(i)
	return au
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableHeight(i *int) *AlbumUpdate {
	if i != nil {
		au.SetHeight(*i)
	}
	return au
}

// AddHeight adds i to the "height" field.
func (au *AlbumUpdate) AddHeight(i int) *AlbumUpdate {
	au.mutation.AddHeight(i)
	return au
}

// ClearHeight clears the value of the "height" field.
func (au *AlbumUpdate) ClearHeight() *AlbumUpdate {
	au.mutation.ClearHeight()
	return au
}

// SetFileSize sets the "file_size" field.
func (au *AlbumUpdate) SetFileSize(i int64) *AlbumUpdate {
	au.mutation.ResetFileSize()
	au.mutation.SetFileSize(i)
	return au
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableFileSize(i *int64) *AlbumUpdate {
	if i != nil {
		au.SetFileSize(*i)
	}
	return au
}

// AddFileSize adds i to the "file_size" field.
func (au *AlbumUpdate) AddFileSize(i int64) *AlbumUpdate {
	au.mutation.AddFileSize(i)
	return au
}

// ClearFileSize clears the value of the "file_size" field.
func (au *AlbumUpdate) ClearFileSize() *AlbumUpdate {
	au.mutation.ClearFileSize()
	return au
}

// SetFormat sets the "format" field.
func (au *AlbumUpdate) SetFormat(s string) *AlbumUpdate {
	au.mutation.SetFormat(s)
	return au
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableFormat(s *string) *AlbumUpdate {
	if s != nil {
		au.SetFormat(*s)
	}
	return au
}

// ClearFormat clears the value of the "format" field.
func (au *AlbumUpdate) ClearFormat() *AlbumUpdate {
	au.mutation.ClearFormat()
	return au
}

// SetAspectRatio sets the "aspect_ratio" field.
func (au *AlbumUpdate) SetAspectRatio(s string) *AlbumUpdate {
	au.mutation.SetAspectRatio(s)
	return au
}

// SetNillableAspectRatio sets the "aspect_ratio" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableAspectRatio(s *string) *AlbumUpdate {
	if s != nil {
		au.SetAspectRatio(*s)
	}
	return au
}

// ClearAspectRatio clears the value of the "aspect_ratio" field.
func (au *AlbumUpdate) ClearAspectRatio() *AlbumUpdate {
	au.mutation.ClearAspectRatio()
	return au
}

// SetFileHash sets the "file_hash" field.
func (au *AlbumUpdate) SetFileHash(s string) *AlbumUpdate {
	au.mutation.SetFileHash(s)
	return au
}

// SetNillableFileHash sets the "file_hash" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableFileHash(s *string) *AlbumUpdate {
	if s != nil {
		au.SetFileHash(*s)
	}
	return au
}

// SetDisplayOrder sets the "display_order" field.
func (au *AlbumUpdate) SetDisplayOrder(i int) *AlbumUpdate {
	au.mutation.ResetDisplayOrder()
	au.mutation.SetDisplayOrder(i)
	return au
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (au *AlbumUpdate) SetNillableDisplayOrder(i *int) *AlbumUpdate {
	if i != nil {
		au.SetDisplayOrder(*i)
	}
	return au
}

// AddDisplayOrder adds i to the "display_order" field.
func (au *AlbumUpdate) AddDisplayOrder(i int) *AlbumUpdate {
	au.mutation.AddDisplayOrder(i)
	return au
}

// Mutation returns the AlbumMutation object of the builder.
func (au *AlbumUpdate) Mutation() *AlbumMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AlbumUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AlbumUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AlbumUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AlbumUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AlbumUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if album.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized album.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := album.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AlbumUpdate) check() error {
	if v, ok := au.mutation.ImageURL(); ok {
		if err := album.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "Album.image_url": %w`, err)}
		}
	}
	if v, ok := au.mutation.BigImageURL(); ok {
		if err := album.BigImageURLValidator(v); err != nil {
			return &ValidationError{Name: "big_image_url", err: fmt.Errorf(`ent: validator failed for field "Album.big_image_url": %w`, err)}
		}
	}
	if v, ok := au.mutation.DownloadURL(); ok {
		if err := album.DownloadURLValidator(v); err != nil {
			return &ValidationError{Name: "download_url", err: fmt.Errorf(`ent: validator failed for field "Album.download_url": %w`, err)}
		}
	}
	if v, ok := au.mutation.ThumbParam(); ok {
		if err := album.ThumbParamValidator(v); err != nil {
			return &ValidationError{Name: "thumb_param", err: fmt.Errorf(`ent: validator failed for field "Album.thumb_param": %w`, err)}
		}
	}
	if v, ok := au.mutation.BigParam(); ok {
		if err := album.BigParamValidator(v); err != nil {
			return &ValidationError{Name: "big_param", err: fmt.Errorf(`ent: validator failed for field "Album.big_param": %w`, err)}
		}
	}
	if v, ok := au.mutation.Tags(); ok {
		if err := album.TagsValidator(v); err != nil {
			return &ValidationError{Name: "tags", err: fmt.Errorf(`ent: validator failed for field "Album.tags": %w`, err)}
		}
	}
	if v, ok := au.mutation.Format(); ok {
		if err := album.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "Album.format": %w`, err)}
		}
	}
	if v, ok := au.mutation.AspectRatio(); ok {
		if err := album.AspectRatioValidator(v); err != nil {
			return &ValidationError{Name: "aspect_ratio", err: fmt.Errorf(`ent: validator failed for field "Album.aspect_ratio": %w`, err)}
		}
	}
	if v, ok := au.mutation.FileHash(); ok {
		if err := album.FileHashValidator(v); err != nil {
			return &ValidationError{Name: "file_hash", err: fmt.Errorf(`ent: validator failed for field "Album.file_hash": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AlbumUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlbumUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AlbumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(album.Table, album.Columns, sqlgraph.NewFieldSpec(album.FieldID, field.TypeUint))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(album.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(album.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(album.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.ImageURL(); ok {
		_spec.SetField(album.FieldImageURL, field.TypeString, value)
	}
	if value, ok := au.mutation.BigImageURL(); ok {
		_spec.SetField(album.FieldBigImageURL, field.TypeString, value)
	}
	if au.mutation.BigImageURLCleared() {
		_spec.ClearField(album.FieldBigImageURL, field.TypeString)
	}
	if value, ok := au.mutation.DownloadURL(); ok {
		_spec.SetField(album.FieldDownloadURL, field.TypeString, value)
	}
	if au.mutation.DownloadURLCleared() {
		_spec.ClearField(album.FieldDownloadURL, field.TypeString)
	}
	if value, ok := au.mutation.ThumbParam(); ok {
		_spec.SetField(album.FieldThumbParam, field.TypeString, value)
	}
	if au.mutation.ThumbParamCleared() {
		_spec.ClearField(album.FieldThumbParam, field.TypeString)
	}
	if value, ok := au.mutation.BigParam(); ok {
		_spec.SetField(album.FieldBigParam, field.TypeString, value)
	}
	if au.mutation.BigParamCleared() {
		_spec.ClearField(album.FieldBigParam, field.TypeString)
	}
	if value, ok := au.mutation.Tags(); ok {
		_spec.SetField(album.FieldTags, field.TypeString, value)
	}
	if au.mutation.TagsCleared() {
		_spec.ClearField(album.FieldTags, field.TypeString)
	}
	if value, ok := au.mutation.ViewCount(); ok {
		_spec.SetField(album.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedViewCount(); ok {
		_spec.AddField(album.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := au.mutation.DownloadCount(); ok {
		_spec.SetField(album.FieldDownloadCount, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedDownloadCount(); ok {
		_spec.AddField(album.FieldDownloadCount, field.TypeInt, value)
	}
	if value, ok := au.mutation.Width(); ok {
		_spec.SetField(album.FieldWidth, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedWidth(); ok {
		_spec.AddField(album.FieldWidth, field.TypeInt, value)
	}
	if au.mutation.WidthCleared() {
		_spec.ClearField(album.FieldWidth, field.TypeInt)
	}
	if value, ok := au.mutation.Height(); ok {
		_spec.SetField(album.FieldHeight, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedHeight(); ok {
		_spec.AddField(album.FieldHeight, field.TypeInt, value)
	}
	if au.mutation.HeightCleared() {
		_spec.ClearField(album.FieldHeight, field.TypeInt)
	}
	if value, ok := au.mutation.FileSize(); ok {
		_spec.SetField(album.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedFileSize(); ok {
		_spec.AddField(album.FieldFileSize, field.TypeInt64, value)
	}
	if au.mutation.FileSizeCleared() {
		_spec.ClearField(album.FieldFileSize, field.TypeInt64)
	}
	if value, ok := au.mutation.Format(); ok {
		_spec.SetField(album.FieldFormat, field.TypeString, value)
	}
	if au.mutation.FormatCleared() {
		_spec.ClearField(album.FieldFormat, field.TypeString)
	}
	if value, ok := au.mutation.AspectRatio(); ok {
		_spec.SetField(album.FieldAspectRatio, field.TypeString, value)
	}
	if au.mutation.AspectRatioCleared() {
		_spec.ClearField(album.FieldAspectRatio, field.TypeString)
	}
	if value, ok := au.mutation.FileHash(); ok {
		_spec.SetField(album.FieldFileHash, field.TypeString, value)
	}
	if value, ok := au.mutation.DisplayOrder(); ok {
		_spec.SetField(album.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(album.FieldDisplayOrder, field.TypeInt, value)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{album.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AlbumUpdateOne is the builder for updating a single Album entity.
type AlbumUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AlbumMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AlbumUpdateOne) SetDeletedAt(t time.Time) *AlbumUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableDeletedAt(t *time.Time) *AlbumUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AlbumUpdateOne) ClearDeletedAt() *AlbumUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AlbumUpdateOne) SetUpdatedAt(t time.Time) *AlbumUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetImageURL sets the "image_url" field.
func (auo *AlbumUpdateOne) SetImageURL(s string) *AlbumUpdateOne {
	auo.mutation.SetImageURL(s)
	return auo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableImageURL(s *string) *AlbumUpdateOne {
	if s != nil {
		auo.SetImageURL(*s)
	}
	return auo
}

// SetBigImageURL sets the "big_image_url" field.
func (auo *AlbumUpdateOne) SetBigImageURL(s string) *AlbumUpdateOne {
	auo.mutation.SetBigImageURL(s)
	return auo
}

// SetNillableBigImageURL sets the "big_image_url" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableBigImageURL(s *string) *AlbumUpdateOne {
	if s != nil {
		auo.SetBigImageURL(*s)
	}
	return auo
}

// ClearBigImageURL clears the value of the "big_image_url" field.
func (auo *AlbumUpdateOne) ClearBigImageURL() *AlbumUpdateOne {
	auo.mutation.ClearBigImageURL()
	return auo
}

// SetDownloadURL sets the "download_url" field.
func (auo *AlbumUpdateOne) SetDownloadURL(s string) *AlbumUpdateOne {
	auo.mutation.SetDownloadURL(s)
	return auo
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableDownloadURL(s *string) *AlbumUpdateOne {
	if s != nil {
		auo.SetDownloadURL(*s)
	}
	return auo
}

// ClearDownloadURL clears the value of the "download_url" field.
func (auo *AlbumUpdateOne) ClearDownloadURL() *AlbumUpdateOne {
	auo.mutation.ClearDownloadURL()
	return auo
}

// SetThumbParam sets the "thumb_param" field.
func (auo *AlbumUpdateOne) SetThumbParam(s string) *AlbumUpdateOne {
	auo.mutation.SetThumbParam(s)
	return auo
}

// SetNillableThumbParam sets the "thumb_param" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableThumbParam(s *string) *AlbumUpdateOne {
	if s != nil {
		auo.SetThumbParam(*s)
	}
	return auo
}

// ClearThumbParam clears the value of the "thumb_param" field.
func (auo *AlbumUpdateOne) ClearThumbParam() *AlbumUpdateOne {
	auo.mutation.ClearThumbParam()
	return auo
}

// SetBigParam sets the "big_param" field.
func (auo *AlbumUpdateOne) SetBigParam(s string) *AlbumUpdateOne {
	auo.mutation.SetBigParam(s)
	return auo
}

// SetNillableBigParam sets the "big_param" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableBigParam(s *string) *AlbumUpdateOne {
	if s != nil {
		auo.SetBigParam(*s)
	}
	return auo
}

// ClearBigParam clears the value of the "big_param" field.
func (auo *AlbumUpdateOne) ClearBigParam() *AlbumUpdateOne {
	auo.mutation.ClearBigParam()
	return auo
}

// SetTags sets the "tags" field.
func (auo *AlbumUpdateOne) SetTags(s string) *AlbumUpdateOne {
	auo.mutation.SetTags(s)
	return auo
}

// SetNillableTags sets the "tags" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableTags(s *string) *AlbumUpdateOne {
	if s != nil {
		auo.SetTags(*s)
	}
	return auo
}

// ClearTags clears the value of the "tags" field.
func (auo *AlbumUpdateOne) ClearTags() *AlbumUpdateOne {
	auo.mutation.ClearTags()
	return auo
}

// SetViewCount sets the "view_count" field.
func (auo *AlbumUpdateOne) SetViewCount(i int) *AlbumUpdateOne {
	auo.mutation.ResetViewCount()
	auo.mutation.SetViewCount(i)
	return auo
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableViewCount(i *int) *AlbumUpdateOne {
	if i != nil {
		auo.SetViewCount(*i)
	}
	return auo
}

// AddViewCount adds i to the "view_count" field.
func (auo *AlbumUpdateOne) AddViewCount(i int) *AlbumUpdateOne {
	auo.mutation.AddViewCount(i)
	return auo
}

// SetDownloadCount sets the "download_count" field.
func (auo *AlbumUpdateOne) SetDownloadCount(i int) *AlbumUpdateOne {
	auo.mutation.ResetDownloadCount()
	auo.mutation.SetDownloadCount(i)
	return auo
}

// SetNillableDownloadCount sets the "download_count" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableDownloadCount(i *int) *AlbumUpdateOne {
	if i != nil {
		auo.SetDownloadCount(*i)
	}
	return auo
}

// AddDownloadCount adds i to the "download_count" field.
func (auo *AlbumUpdateOne) AddDownloadCount(i int) *AlbumUpdateOne {
	auo.mutation.AddDownloadCount(i)
	return auo
}

// SetWidth sets the "width" field.
func (auo *AlbumUpdateOne) SetWidth(i int) *AlbumUpdateOne {
	auo.mutation.ResetWidth()
	auo.mutation.SetWidth(i)
	return auo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableWidth(i *int) *AlbumUpdateOne {
	if i != nil {
		auo.SetWidth(*i)
	}
	return auo
}

// AddWidth adds i to the "width" field.
func (auo *AlbumUpdateOne) AddWidth(i int) *AlbumUpdateOne {
	auo.mutation.AddWidth(i)
	return auo
}

// ClearWidth clears the value of the "width" field.
func (auo *AlbumUpdateOne) ClearWidth() *AlbumUpdateOne {
	auo.mutation.ClearWidth()
	return auo
}

// SetHeight sets the "height" field.
func (auo *AlbumUpdateOne) SetHeight(i int) *AlbumUpdateOne {
	auo.mutation.ResetHeight()
	auo.mutation.SetHeight(i)
	return auo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableHeight(i *int) *AlbumUpdateOne {
	if i != nil {
		auo.SetHeight(*i)
	}
	return auo
}

// AddHeight adds i to the "height" field.
func (auo *AlbumUpdateOne) AddHeight(i int) *AlbumUpdateOne {
	auo.mutation.AddHeight(i)
	return auo
}

// ClearHeight clears the value of the "height" field.
func (auo *AlbumUpdateOne) ClearHeight() *AlbumUpdateOne {
	auo.mutation.ClearHeight()
	return auo
}

// SetFileSize sets the "file_size" field.
func (auo *AlbumUpdateOne) SetFileSize(i int64) *AlbumUpdateOne {
	auo.mutation.ResetFileSize()
	auo.mutation.SetFileSize(i)
	return auo
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableFileSize(i *int64) *AlbumUpdateOne {
	if i != nil {
		auo.SetFileSize(*i)
	}
	return auo
}

// AddFileSize adds i to the "file_size" field.
func (auo *AlbumUpdateOne) AddFileSize(i int64) *AlbumUpdateOne {
	auo.mutation.AddFileSize(i)
	return auo
}

// ClearFileSize clears the value of the "file_size" field.
func (auo *AlbumUpdateOne) ClearFileSize() *AlbumUpdateOne {
	auo.mutation.ClearFileSize()
	return auo
}

// SetFormat sets the "format" field.
func (auo *AlbumUpdateOne) SetFormat(s string) *AlbumUpdateOne {
	auo.mutation.SetFormat(s)
	return auo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableFormat(s *string) *AlbumUpdateOne {
	if s != nil {
		auo.SetFormat(*s)
	}
	return auo
}

// ClearFormat clears the value of the "format" field.
func (auo *AlbumUpdateOne) ClearFormat() *AlbumUpdateOne {
	auo.mutation.ClearFormat()
	return auo
}

// SetAspectRatio sets the "aspect_ratio" field.
func (auo *AlbumUpdateOne) SetAspectRatio(s string) *AlbumUpdateOne {
	auo.mutation.SetAspectRatio(s)
	return auo
}

// SetNillableAspectRatio sets the "aspect_ratio" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableAspectRatio(s *string) *AlbumUpdateOne {
	if s != nil {
		auo.SetAspectRatio(*s)
	}
	return auo
}

// ClearAspectRatio clears the value of the "aspect_ratio" field.
func (auo *AlbumUpdateOne) ClearAspectRatio() *AlbumUpdateOne {
	auo.mutation.ClearAspectRatio()
	return auo
}

// SetFileHash sets the "file_hash" field.
func (auo *AlbumUpdateOne) SetFileHash(s string) *AlbumUpdateOne {
	auo.mutation.SetFileHash(s)
	return auo
}

// SetNillableFileHash sets the "file_hash" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableFileHash(s *string) *AlbumUpdateOne {
	if s != nil {
		auo.SetFileHash(*s)
	}
	return auo
}

// SetDisplayOrder sets the "display_order" field.
func (auo *AlbumUpdateOne) SetDisplayOrder(i int) *AlbumUpdateOne {
	auo.mutation.ResetDisplayOrder()
	auo.mutation.SetDisplayOrder(i)
	return auo
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (auo *AlbumUpdateOne) SetNillableDisplayOrder(i *int) *AlbumUpdateOne {
	if i != nil {
		auo.SetDisplayOrder(*i)
	}
	return auo
}

// AddDisplayOrder adds i to the "display_order" field.
func (auo *AlbumUpdateOne) AddDisplayOrder(i int) *AlbumUpdateOne {
	auo.mutation.AddDisplayOrder(i)
	return auo
}

// Mutation returns the AlbumMutation object of the builder.
func (auo *AlbumUpdateOne) Mutation() *AlbumMutation {
	return auo.mutation
}

// Where appends a list predicates to the AlbumUpdate builder.
func (auo *AlbumUpdateOne) Where(ps ...predicate.Album) *AlbumUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AlbumUpdateOne) Select(field string, fields ...string) *AlbumUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Album entity.
func (auo *AlbumUpdateOne) Save(ctx context.Context) (*Album, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AlbumUpdateOne) SaveX(ctx context.Context) *Album {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AlbumUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AlbumUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AlbumUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if album.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized album.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := album.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AlbumUpdateOne) check() error {
	if v, ok := auo.mutation.ImageURL(); ok {
		if err := album.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "Album.image_url": %w`, err)}
		}
	}
	if v, ok := auo.mutation.BigImageURL(); ok {
		if err := album.BigImageURLValidator(v); err != nil {
			return &ValidationError{Name: "big_image_url", err: fmt.Errorf(`ent: validator failed for field "Album.big_image_url": %w`, err)}
		}
	}
	if v, ok := auo.mutation.DownloadURL(); ok {
		if err := album.DownloadURLValidator(v); err != nil {
			return &ValidationError{Name: "download_url", err: fmt.Errorf(`ent: validator failed for field "Album.download_url": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ThumbParam(); ok {
		if err := album.ThumbParamValidator(v); err != nil {
			return &ValidationError{Name: "thumb_param", err: fmt.Errorf(`ent: validator failed for field "Album.thumb_param": %w`, err)}
		}
	}
	if v, ok := auo.mutation.BigParam(); ok {
		if err := album.BigParamValidator(v); err != nil {
			return &ValidationError{Name: "big_param", err: fmt.Errorf(`ent: validator failed for field "Album.big_param": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Tags(); ok {
		if err := album.TagsValidator(v); err != nil {
			return &ValidationError{Name: "tags", err: fmt.Errorf(`ent: validator failed for field "Album.tags": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Format(); ok {
		if err := album.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`ent: validator failed for field "Album.format": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AspectRatio(); ok {
		if err := album.AspectRatioValidator(v); err != nil {
			return &ValidationError{Name: "aspect_ratio", err: fmt.Errorf(`ent: validator failed for field "Album.aspect_ratio": %w`, err)}
		}
	}
	if v, ok := auo.mutation.FileHash(); ok {
		if err := album.FileHashValidator(v); err != nil {
			return &ValidationError{Name: "file_hash", err: fmt.Errorf(`ent: validator failed for field "Album.file_hash": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AlbumUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlbumUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AlbumUpdateOne) sqlSave(ctx context.Context) (_node *Album, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(album.Table, album.Columns, sqlgraph.NewFieldSpec(album.FieldID, field.TypeUint))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Album.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, album.FieldID)
		for _, f := range fields {
			if !album.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != album.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(album.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(album.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(album.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.ImageURL(); ok {
		_spec.SetField(album.FieldImageURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.BigImageURL(); ok {
		_spec.SetField(album.FieldBigImageURL, field.TypeString, value)
	}
	if auo.mutation.BigImageURLCleared() {
		_spec.ClearField(album.FieldBigImageURL, field.TypeString)
	}
	if value, ok := auo.mutation.DownloadURL(); ok {
		_spec.SetField(album.FieldDownloadURL, field.TypeString, value)
	}
	if auo.mutation.DownloadURLCleared() {
		_spec.ClearField(album.FieldDownloadURL, field.TypeString)
	}
	if value, ok := auo.mutation.ThumbParam(); ok {
		_spec.SetField(album.FieldThumbParam, field.TypeString, value)
	}
	if auo.mutation.ThumbParamCleared() {
		_spec.ClearField(album.FieldThumbParam, field.TypeString)
	}
	if value, ok := auo.mutation.BigParam(); ok {
		_spec.SetField(album.FieldBigParam, field.TypeString, value)
	}
	if auo.mutation.BigParamCleared() {
		_spec.ClearField(album.FieldBigParam, field.TypeString)
	}
	if value, ok := auo.mutation.Tags(); ok {
		_spec.SetField(album.FieldTags, field.TypeString, value)
	}
	if auo.mutation.TagsCleared() {
		_spec.ClearField(album.FieldTags, field.TypeString)
	}
	if value, ok := auo.mutation.ViewCount(); ok {
		_spec.SetField(album.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedViewCount(); ok {
		_spec.AddField(album.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := auo.mutation.DownloadCount(); ok {
		_spec.SetField(album.FieldDownloadCount, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedDownloadCount(); ok {
		_spec.AddField(album.FieldDownloadCount, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Width(); ok {
		_spec.SetField(album.FieldWidth, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedWidth(); ok {
		_spec.AddField(album.FieldWidth, field.TypeInt, value)
	}
	if auo.mutation.WidthCleared() {
		_spec.ClearField(album.FieldWidth, field.TypeInt)
	}
	if value, ok := auo.mutation.Height(); ok {
		_spec.SetField(album.FieldHeight, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedHeight(); ok {
		_spec.AddField(album.FieldHeight, field.TypeInt, value)
	}
	if auo.mutation.HeightCleared() {
		_spec.ClearField(album.FieldHeight, field.TypeInt)
	}
	if value, ok := auo.mutation.FileSize(); ok {
		_spec.SetField(album.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedFileSize(); ok {
		_spec.AddField(album.FieldFileSize, field.TypeInt64, value)
	}
	if auo.mutation.FileSizeCleared() {
		_spec.ClearField(album.FieldFileSize, field.TypeInt64)
	}
	if value, ok := auo.mutation.Format(); ok {
		_spec.SetField(album.FieldFormat, field.TypeString, value)
	}
	if auo.mutation.FormatCleared() {
		_spec.ClearField(album.FieldFormat, field.TypeString)
	}
	if value, ok := auo.mutation.AspectRatio(); ok {
		_spec.SetField(album.FieldAspectRatio, field.TypeString, value)
	}
	if auo.mutation.AspectRatioCleared() {
		_spec.ClearField(album.FieldAspectRatio, field.TypeString)
	}
	if value, ok := auo.mutation.FileHash(); ok {
		_spec.SetField(album.FieldFileHash, field.TypeString, value)
	}
	if value, ok := auo.mutation.DisplayOrder(); ok {
		_spec.SetField(album.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(album.FieldDisplayOrder, field.TypeInt, value)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Album{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{album.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
