// Code generated by ent, DO NOT EDIT.

package ent

import (
	"anheyu-app/ent/predicate"
	"anheyu-app/ent/urlstat"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// URLStatUpdate is the builder for updating URLStat entities.
type URLStatUpdate struct {
	config
	hooks     []Hook
	mutation  *URLStatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the URLStatUpdate builder.
func (usu *URLStatUpdate) Where(ps ...predicate.URLStat) *URLStatUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetUpdatedAt sets the "updated_at" field.
func (usu *URLStatUpdate) SetUpdatedAt(t time.Time) *URLStatUpdate {
	usu.mutation.SetUpdatedAt(t)
	return usu
}

// SetURLPath sets the "url_path" field.
func (usu *URLStatUpdate) SetURLPath(s string) *URLStatUpdate {
	usu.mutation.SetURLPath(s)
	return usu
}

// SetNillableURLPath sets the "url_path" field if the given value is not nil.
func (usu *URLStatUpdate) SetNillableURLPath(s *string) *URLStatUpdate {
	if s != nil {
		usu.SetURLPath(*s)
	}
	return usu
}

// SetPageTitle sets the "page_title" field.
func (usu *URLStatUpdate) SetPageTitle(s string) *URLStatUpdate {
	usu.mutation.SetPageTitle(s)
	return usu
}

// SetNillablePageTitle sets the "page_title" field if the given value is not nil.
func (usu *URLStatUpdate) SetNillablePageTitle(s *string) *URLStatUpdate {
	if s != nil {
		usu.SetPageTitle(*s)
	}
	return usu
}

// ClearPageTitle clears the value of the "page_title" field.
func (usu *URLStatUpdate) ClearPageTitle() *URLStatUpdate {
	usu.mutation.ClearPageTitle()
	return usu
}

// SetTotalViews sets the "total_views" field.
func (usu *URLStatUpdate) SetTotalViews(i int64) *URLStatUpdate {
	usu.mutation.ResetTotalViews()
	usu.mutation.SetTotalViews(i)
	return usu
}

// SetNillableTotalViews sets the "total_views" field if the given value is not nil.
func (usu *URLStatUpdate) SetNillableTotalViews(i *int64) *URLStatUpdate {
	if i != nil {
		usu.SetTotalViews(*i)
	}
	return usu
}

// AddTotalViews adds i to the "total_views" field.
func (usu *URLStatUpdate) AddTotalViews(i int64) *URLStatUpdate {
	usu.mutation.AddTotalViews(i)
	return usu
}

// SetUniqueViews sets the "unique_views" field.
func (usu *URLStatUpdate) SetUniqueViews(i int64) *URLStatUpdate {
	usu.mutation.ResetUniqueViews()
	usu.mutation.SetUniqueViews(i)
	return usu
}

// SetNillableUniqueViews sets the "unique_views" field if the given value is not nil.
func (usu *URLStatUpdate) SetNillableUniqueViews(i *int64) *URLStatUpdate {
	if i != nil {
		usu.SetUniqueViews(*i)
	}
	return usu
}

// AddUniqueViews adds i to the "unique_views" field.
func (usu *URLStatUpdate) AddUniqueViews(i int64) *URLStatUpdate {
	usu.mutation.AddUniqueViews(i)
	return usu
}

// SetBounceCount sets the "bounce_count" field.
func (usu *URLStatUpdate) SetBounceCount(i int64) *URLStatUpdate {
	usu.mutation.ResetBounceCount()
	usu.mutation.SetBounceCount(i)
	return usu
}

// SetNillableBounceCount sets the "bounce_count" field if the given value is not nil.
func (usu *URLStatUpdate) SetNillableBounceCount(i *int64) *URLStatUpdate {
	if i != nil {
		usu.SetBounceCount(*i)
	}
	return usu
}

// AddBounceCount adds i to the "bounce_count" field.
func (usu *URLStatUpdate) AddBounceCount(i int64) *URLStatUpdate {
	usu.mutation.AddBounceCount(i)
	return usu
}

// SetAvgDuration sets the "avg_duration" field.
func (usu *URLStatUpdate) SetAvgDuration(f float64) *URLStatUpdate {
	usu.mutation.ResetAvgDuration()
	usu.mutation.SetAvgDuration(f)
	return usu
}

// SetNillableAvgDuration sets the "avg_duration" field if the given value is not nil.
func (usu *URLStatUpdate) SetNillableAvgDuration(f *float64) *URLStatUpdate {
	if f != nil {
		usu.SetAvgDuration(*f)
	}
	return usu
}

// AddAvgDuration adds f to the "avg_duration" field.
func (usu *URLStatUpdate) AddAvgDuration(f float64) *URLStatUpdate {
	usu.mutation.AddAvgDuration(f)
	return usu
}

// SetLastVisitedAt sets the "last_visited_at" field.
func (usu *URLStatUpdate) SetLastVisitedAt(t time.Time) *URLStatUpdate {
	usu.mutation.SetLastVisitedAt(t)
	return usu
}

// SetNillableLastVisitedAt sets the "last_visited_at" field if the given value is not nil.
func (usu *URLStatUpdate) SetNillableLastVisitedAt(t *time.Time) *URLStatUpdate {
	if t != nil {
		usu.SetLastVisitedAt(*t)
	}
	return usu
}

// ClearLastVisitedAt clears the value of the "last_visited_at" field.
func (usu *URLStatUpdate) ClearLastVisitedAt() *URLStatUpdate {
	usu.mutation.ClearLastVisitedAt()
	return usu
}

// Mutation returns the URLStatMutation object of the builder.
func (usu *URLStatUpdate) Mutation() *URLStatMutation {
	return usu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *URLStatUpdate) Save(ctx context.Context) (int, error) {
	usu.defaults()
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *URLStatUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *URLStatUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *URLStatUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usu *URLStatUpdate) defaults() {
	if _, ok := usu.mutation.UpdatedAt(); !ok {
		v := urlstat.UpdateDefaultUpdatedAt()
		usu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usu *URLStatUpdate) check() error {
	if v, ok := usu.mutation.URLPath(); ok {
		if err := urlstat.URLPathValidator(v); err != nil {
			return &ValidationError{Name: "url_path", err: fmt.Errorf(`ent: validator failed for field "URLStat.url_path": %w`, err)}
		}
	}
	if v, ok := usu.mutation.PageTitle(); ok {
		if err := urlstat.PageTitleValidator(v); err != nil {
			return &ValidationError{Name: "page_title", err: fmt.Errorf(`ent: validator failed for field "URLStat.page_title": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (usu *URLStatUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *URLStatUpdate {
	usu.modifiers = append(usu.modifiers, modifiers...)
	return usu
}

func (usu *URLStatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := usu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(urlstat.Table, urlstat.Columns, sqlgraph.NewFieldSpec(urlstat.FieldID, field.TypeUint))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.UpdatedAt(); ok {
		_spec.SetField(urlstat.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := usu.mutation.URLPath(); ok {
		_spec.SetField(urlstat.FieldURLPath, field.TypeString, value)
	}
	if value, ok := usu.mutation.PageTitle(); ok {
		_spec.SetField(urlstat.FieldPageTitle, field.TypeString, value)
	}
	if usu.mutation.PageTitleCleared() {
		_spec.ClearField(urlstat.FieldPageTitle, field.TypeString)
	}
	if value, ok := usu.mutation.TotalViews(); ok {
		_spec.SetField(urlstat.FieldTotalViews, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.AddedTotalViews(); ok {
		_spec.AddField(urlstat.FieldTotalViews, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.UniqueViews(); ok {
		_spec.SetField(urlstat.FieldUniqueViews, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.AddedUniqueViews(); ok {
		_spec.AddField(urlstat.FieldUniqueViews, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.BounceCount(); ok {
		_spec.SetField(urlstat.FieldBounceCount, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.AddedBounceCount(); ok {
		_spec.AddField(urlstat.FieldBounceCount, field.TypeInt64, value)
	}
	if value, ok := usu.mutation.AvgDuration(); ok {
		_spec.SetField(urlstat.FieldAvgDuration, field.TypeFloat64, value)
	}
	if value, ok := usu.mutation.AddedAvgDuration(); ok {
		_spec.AddField(urlstat.FieldAvgDuration, field.TypeFloat64, value)
	}
	if value, ok := usu.mutation.LastVisitedAt(); ok {
		_spec.SetField(urlstat.FieldLastVisitedAt, field.TypeTime, value)
	}
	if usu.mutation.LastVisitedAtCleared() {
		_spec.ClearField(urlstat.FieldLastVisitedAt, field.TypeTime)
	}
	_spec.AddModifiers(usu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{urlstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// URLStatUpdateOne is the builder for updating a single URLStat entity.
type URLStatUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *URLStatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (usuo *URLStatUpdateOne) SetUpdatedAt(t time.Time) *URLStatUpdateOne {
	usuo.mutation.SetUpdatedAt(t)
	return usuo
}

// SetURLPath sets the "url_path" field.
func (usuo *URLStatUpdateOne) SetURLPath(s string) *URLStatUpdateOne {
	usuo.mutation.SetURLPath(s)
	return usuo
}

// SetNillableURLPath sets the "url_path" field if the given value is not nil.
func (usuo *URLStatUpdateOne) SetNillableURLPath(s *string) *URLStatUpdateOne {
	if s != nil {
		usuo.SetURLPath(*s)
	}
	return usuo
}

// SetPageTitle sets the "page_title" field.
func (usuo *URLStatUpdateOne) SetPageTitle(s string) *URLStatUpdateOne {
	usuo.mutation.SetPageTitle(s)
	return usuo
}

// SetNillablePageTitle sets the "page_title" field if the given value is not nil.
func (usuo *URLStatUpdateOne) SetNillablePageTitle(s *string) *URLStatUpdateOne {
	if s != nil {
		usuo.SetPageTitle(*s)
	}
	return usuo
}

// ClearPageTitle clears the value of the "page_title" field.
func (usuo *URLStatUpdateOne) ClearPageTitle() *URLStatUpdateOne {
	usuo.mutation.ClearPageTitle()
	return usuo
}

// SetTotalViews sets the "total_views" field.
func (usuo *URLStatUpdateOne) SetTotalViews(i int64) *URLStatUpdateOne {
	usuo.mutation.ResetTotalViews()
	usuo.mutation.SetTotalViews(i)
	return usuo
}

// SetNillableTotalViews sets the "total_views" field if the given value is not nil.
func (usuo *URLStatUpdateOne) SetNillableTotalViews(i *int64) *URLStatUpdateOne {
	if i != nil {
		usuo.SetTotalViews(*i)
	}
	return usuo
}

// AddTotalViews adds i to the "total_views" field.
func (usuo *URLStatUpdateOne) AddTotalViews(i int64) *URLStatUpdateOne {
	usuo.mutation.AddTotalViews(i)
	return usuo
}

// SetUniqueViews sets the "unique_views" field.
func (usuo *URLStatUpdateOne) SetUniqueViews(i int64) *URLStatUpdateOne {
	usuo.mutation.ResetUniqueViews()
	usuo.mutation.SetUniqueViews(i)
	return usuo
}

// SetNillableUniqueViews sets the "unique_views" field if the given value is not nil.
func (usuo *URLStatUpdateOne) SetNillableUniqueViews(i *int64) *URLStatUpdateOne {
	if i != nil {
		usuo.SetUniqueViews(*i)
	}
	return usuo
}

// AddUniqueViews adds i to the "unique_views" field.
func (usuo *URLStatUpdateOne) AddUniqueViews(i int64) *URLStatUpdateOne {
	usuo.mutation.AddUniqueViews(i)
	return usuo
}

// SetBounceCount sets the "bounce_count" field.
func (usuo *URLStatUpdateOne) SetBounceCount(i int64) *URLStatUpdateOne {
	usuo.mutation.ResetBounceCount()
	usuo.mutation.SetBounceCount(i)
	return usuo
}

// SetNillableBounceCount sets the "bounce_count" field if the given value is not nil.
func (usuo *URLStatUpdateOne) SetNillableBounceCount(i *int64) *URLStatUpdateOne {
	if i != nil {
		usuo.SetBounceCount(*i)
	}
	return usuo
}

// AddBounceCount adds i to the "bounce_count" field.
func (usuo *URLStatUpdateOne) AddBounceCount(i int64) *URLStatUpdateOne {
	usuo.mutation.AddBounceCount(i)
	return usuo
}

// SetAvgDuration sets the "avg_duration" field.
func (usuo *URLStatUpdateOne) SetAvgDuration(f float64) *URLStatUpdateOne {
	usuo.mutation.ResetAvgDuration()
	usuo.mutation.SetAvgDuration(f)
	return usuo
}

// SetNillableAvgDuration sets the "avg_duration" field if the given value is not nil.
func (usuo *URLStatUpdateOne) SetNillableAvgDuration(f *float64) *URLStatUpdateOne {
	if f != nil {
		usuo.SetAvgDuration(*f)
	}
	return usuo
}

// AddAvgDuration adds f to the "avg_duration" field.
func (usuo *URLStatUpdateOne) AddAvgDuration(f float64) *URLStatUpdateOne {
	usuo.mutation.AddAvgDuration(f)
	return usuo
}

// SetLastVisitedAt sets the "last_visited_at" field.
func (usuo *URLStatUpdateOne) SetLastVisitedAt(t time.Time) *URLStatUpdateOne {
	usuo.mutation.SetLastVisitedAt(t)
	return usuo
}

// SetNillableLastVisitedAt sets the "last_visited_at" field if the given value is not nil.
func (usuo *URLStatUpdateOne) SetNillableLastVisitedAt(t *time.Time) *URLStatUpdateOne {
	if t != nil {
		usuo.SetLastVisitedAt(*t)
	}
	return usuo
}

// ClearLastVisitedAt clears the value of the "last_visited_at" field.
func (usuo *URLStatUpdateOne) ClearLastVisitedAt() *URLStatUpdateOne {
	usuo.mutation.ClearLastVisitedAt()
	return usuo
}

// Mutation returns the URLStatMutation object of the builder.
func (usuo *URLStatUpdateOne) Mutation() *URLStatMutation {
	return usuo.mutation
}

// Where appends a list predicates to the URLStatUpdate builder.
func (usuo *URLStatUpdateOne) Where(ps ...predicate.URLStat) *URLStatUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *URLStatUpdateOne) Select(field string, fields ...string) *URLStatUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated URLStat entity.
func (usuo *URLStatUpdateOne) Save(ctx context.Context) (*URLStat, error) {
	usuo.defaults()
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *URLStatUpdateOne) SaveX(ctx context.Context) *URLStat {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *URLStatUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *URLStatUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usuo *URLStatUpdateOne) defaults() {
	if _, ok := usuo.mutation.UpdatedAt(); !ok {
		v := urlstat.UpdateDefaultUpdatedAt()
		usuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usuo *URLStatUpdateOne) check() error {
	if v, ok := usuo.mutation.URLPath(); ok {
		if err := urlstat.URLPathValidator(v); err != nil {
			return &ValidationError{Name: "url_path", err: fmt.Errorf(`ent: validator failed for field "URLStat.url_path": %w`, err)}
		}
	}
	if v, ok := usuo.mutation.PageTitle(); ok {
		if err := urlstat.PageTitleValidator(v); err != nil {
			return &ValidationError{Name: "page_title", err: fmt.Errorf(`ent: validator failed for field "URLStat.page_title": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (usuo *URLStatUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *URLStatUpdateOne {
	usuo.modifiers = append(usuo.modifiers, modifiers...)
	return usuo
}

func (usuo *URLStatUpdateOne) sqlSave(ctx context.Context) (_node *URLStat, err error) {
	if err := usuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(urlstat.Table, urlstat.Columns, sqlgraph.NewFieldSpec(urlstat.FieldID, field.TypeUint))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "URLStat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, urlstat.FieldID)
		for _, f := range fields {
			if !urlstat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != urlstat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.UpdatedAt(); ok {
		_spec.SetField(urlstat.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := usuo.mutation.URLPath(); ok {
		_spec.SetField(urlstat.FieldURLPath, field.TypeString, value)
	}
	if value, ok := usuo.mutation.PageTitle(); ok {
		_spec.SetField(urlstat.FieldPageTitle, field.TypeString, value)
	}
	if usuo.mutation.PageTitleCleared() {
		_spec.ClearField(urlstat.FieldPageTitle, field.TypeString)
	}
	if value, ok := usuo.mutation.TotalViews(); ok {
		_spec.SetField(urlstat.FieldTotalViews, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.AddedTotalViews(); ok {
		_spec.AddField(urlstat.FieldTotalViews, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.UniqueViews(); ok {
		_spec.SetField(urlstat.FieldUniqueViews, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.AddedUniqueViews(); ok {
		_spec.AddField(urlstat.FieldUniqueViews, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.BounceCount(); ok {
		_spec.SetField(urlstat.FieldBounceCount, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.AddedBounceCount(); ok {
		_spec.AddField(urlstat.FieldBounceCount, field.TypeInt64, value)
	}
	if value, ok := usuo.mutation.AvgDuration(); ok {
		_spec.SetField(urlstat.FieldAvgDuration, field.TypeFloat64, value)
	}
	if value, ok := usuo.mutation.AddedAvgDuration(); ok {
		_spec.AddField(urlstat.FieldAvgDuration, field.TypeFloat64, value)
	}
	if value, ok := usuo.mutation.LastVisitedAt(); ok {
		_spec.SetField(urlstat.FieldLastVisitedAt, field.TypeTime, value)
	}
	if usuo.mutation.LastVisitedAtCleared() {
		_spec.ClearField(urlstat.FieldLastVisitedAt, field.TypeTime)
	}
	_spec.AddModifiers(usuo.modifiers...)
	_node = &URLStat{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{urlstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
