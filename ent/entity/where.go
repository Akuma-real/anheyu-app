// Code generated by ent, DO NOT EDIT.

package entity

import (
	"time"

	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
	"github.com/anzhiyu-c/anheyu-app/pkg/domain/model"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldUpdatedAt, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldType, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldSource, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int64) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldSize, v))
}

// UploadSessionID applies equality check predicate on the "upload_session_id" field. It's identical to UploadSessionIDEQ.
func UploadSessionID(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldUploadSessionID, v))
}

// RecycleOptions applies equality check predicate on the "recycle_options" field. It's identical to RecycleOptionsEQ.
func RecycleOptions(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldRecycleOptions, v))
}

// PolicyID applies equality check predicate on the "policy_id" field. It's identical to PolicyIDEQ.
func PolicyID(v uint) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldPolicyID, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldCreatedBy, v))
}

// Etag applies equality check predicate on the "etag" field. It's identical to EtagEQ.
func Etag(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldEtag, v))
}

// MimeType applies equality check predicate on the "mime_type" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldMimeType, v))
}

// Dimension applies equality check predicate on the "dimension" field. It's identical to DimensionEQ.
func Dimension(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldDimension, v))
}

// StorageMetadata applies equality check predicate on the "storage_metadata" field. It's identical to StorageMetadataEQ.
func StorageMetadata(v model.JSONMap) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldStorageMetadata, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldUpdatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldType, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldSource, v))
}

// SourceContains applies the Contains predicate on the "source" field.
func SourceContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldSource, v))
}

// SourceHasPrefix applies the HasPrefix predicate on the "source" field.
func SourceHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldSource, v))
}

// SourceHasSuffix applies the HasSuffix predicate on the "source" field.
func SourceHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldSource, v))
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.Entity {
	return predicate.Entity(sql.FieldIsNull(FieldSource))
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.Entity {
	return predicate.Entity(sql.FieldNotNull(FieldSource))
}

// SourceEqualFold applies the EqualFold predicate on the "source" field.
func SourceEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldSource, v))
}

// SourceContainsFold applies the ContainsFold predicate on the "source" field.
func SourceContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldSource, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int64) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int64) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int64) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int64) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int64) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int64) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int64) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int64) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldSize, v))
}

// UploadSessionIDEQ applies the EQ predicate on the "upload_session_id" field.
func UploadSessionIDEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldUploadSessionID, v))
}

// UploadSessionIDNEQ applies the NEQ predicate on the "upload_session_id" field.
func UploadSessionIDNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldUploadSessionID, v))
}

// UploadSessionIDIn applies the In predicate on the "upload_session_id" field.
func UploadSessionIDIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldUploadSessionID, vs...))
}

// UploadSessionIDNotIn applies the NotIn predicate on the "upload_session_id" field.
func UploadSessionIDNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldUploadSessionID, vs...))
}

// UploadSessionIDGT applies the GT predicate on the "upload_session_id" field.
func UploadSessionIDGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldUploadSessionID, v))
}

// UploadSessionIDGTE applies the GTE predicate on the "upload_session_id" field.
func UploadSessionIDGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldUploadSessionID, v))
}

// UploadSessionIDLT applies the LT predicate on the "upload_session_id" field.
func UploadSessionIDLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldUploadSessionID, v))
}

// UploadSessionIDLTE applies the LTE predicate on the "upload_session_id" field.
func UploadSessionIDLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldUploadSessionID, v))
}

// UploadSessionIDContains applies the Contains predicate on the "upload_session_id" field.
func UploadSessionIDContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldUploadSessionID, v))
}

// UploadSessionIDHasPrefix applies the HasPrefix predicate on the "upload_session_id" field.
func UploadSessionIDHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldUploadSessionID, v))
}

// UploadSessionIDHasSuffix applies the HasSuffix predicate on the "upload_session_id" field.
func UploadSessionIDHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldUploadSessionID, v))
}

// UploadSessionIDIsNil applies the IsNil predicate on the "upload_session_id" field.
func UploadSessionIDIsNil() predicate.Entity {
	return predicate.Entity(sql.FieldIsNull(FieldUploadSessionID))
}

// UploadSessionIDNotNil applies the NotNil predicate on the "upload_session_id" field.
func UploadSessionIDNotNil() predicate.Entity {
	return predicate.Entity(sql.FieldNotNull(FieldUploadSessionID))
}

// UploadSessionIDEqualFold applies the EqualFold predicate on the "upload_session_id" field.
func UploadSessionIDEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldUploadSessionID, v))
}

// UploadSessionIDContainsFold applies the ContainsFold predicate on the "upload_session_id" field.
func UploadSessionIDContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldUploadSessionID, v))
}

// RecycleOptionsEQ applies the EQ predicate on the "recycle_options" field.
func RecycleOptionsEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldRecycleOptions, v))
}

// RecycleOptionsNEQ applies the NEQ predicate on the "recycle_options" field.
func RecycleOptionsNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldRecycleOptions, v))
}

// RecycleOptionsIn applies the In predicate on the "recycle_options" field.
func RecycleOptionsIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldRecycleOptions, vs...))
}

// RecycleOptionsNotIn applies the NotIn predicate on the "recycle_options" field.
func RecycleOptionsNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldRecycleOptions, vs...))
}

// RecycleOptionsGT applies the GT predicate on the "recycle_options" field.
func RecycleOptionsGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldRecycleOptions, v))
}

// RecycleOptionsGTE applies the GTE predicate on the "recycle_options" field.
func RecycleOptionsGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldRecycleOptions, v))
}

// RecycleOptionsLT applies the LT predicate on the "recycle_options" field.
func RecycleOptionsLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldRecycleOptions, v))
}

// RecycleOptionsLTE applies the LTE predicate on the "recycle_options" field.
func RecycleOptionsLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldRecycleOptions, v))
}

// RecycleOptionsContains applies the Contains predicate on the "recycle_options" field.
func RecycleOptionsContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldRecycleOptions, v))
}

// RecycleOptionsHasPrefix applies the HasPrefix predicate on the "recycle_options" field.
func RecycleOptionsHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldRecycleOptions, v))
}

// RecycleOptionsHasSuffix applies the HasSuffix predicate on the "recycle_options" field.
func RecycleOptionsHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldRecycleOptions, v))
}

// RecycleOptionsIsNil applies the IsNil predicate on the "recycle_options" field.
func RecycleOptionsIsNil() predicate.Entity {
	return predicate.Entity(sql.FieldIsNull(FieldRecycleOptions))
}

// RecycleOptionsNotNil applies the NotNil predicate on the "recycle_options" field.
func RecycleOptionsNotNil() predicate.Entity {
	return predicate.Entity(sql.FieldNotNull(FieldRecycleOptions))
}

// RecycleOptionsEqualFold applies the EqualFold predicate on the "recycle_options" field.
func RecycleOptionsEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldRecycleOptions, v))
}

// RecycleOptionsContainsFold applies the ContainsFold predicate on the "recycle_options" field.
func RecycleOptionsContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldRecycleOptions, v))
}

// PolicyIDEQ applies the EQ predicate on the "policy_id" field.
func PolicyIDEQ(v uint) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldPolicyID, v))
}

// PolicyIDNEQ applies the NEQ predicate on the "policy_id" field.
func PolicyIDNEQ(v uint) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldPolicyID, v))
}

// PolicyIDIn applies the In predicate on the "policy_id" field.
func PolicyIDIn(vs ...uint) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldPolicyID, vs...))
}

// PolicyIDNotIn applies the NotIn predicate on the "policy_id" field.
func PolicyIDNotIn(vs ...uint) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldPolicyID, vs...))
}

// PolicyIDGT applies the GT predicate on the "policy_id" field.
func PolicyIDGT(v uint) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldPolicyID, v))
}

// PolicyIDGTE applies the GTE predicate on the "policy_id" field.
func PolicyIDGTE(v uint) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldPolicyID, v))
}

// PolicyIDLT applies the LT predicate on the "policy_id" field.
func PolicyIDLT(v uint) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldPolicyID, v))
}

// PolicyIDLTE applies the LTE predicate on the "policy_id" field.
func PolicyIDLTE(v uint) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldPolicyID, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uint64) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uint64) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uint64) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Entity {
	return predicate.Entity(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Entity {
	return predicate.Entity(sql.FieldNotNull(FieldCreatedBy))
}

// EtagEQ applies the EQ predicate on the "etag" field.
func EtagEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldEtag, v))
}

// EtagNEQ applies the NEQ predicate on the "etag" field.
func EtagNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldEtag, v))
}

// EtagIn applies the In predicate on the "etag" field.
func EtagIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldEtag, vs...))
}

// EtagNotIn applies the NotIn predicate on the "etag" field.
func EtagNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldEtag, vs...))
}

// EtagGT applies the GT predicate on the "etag" field.
func EtagGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldEtag, v))
}

// EtagGTE applies the GTE predicate on the "etag" field.
func EtagGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldEtag, v))
}

// EtagLT applies the LT predicate on the "etag" field.
func EtagLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldEtag, v))
}

// EtagLTE applies the LTE predicate on the "etag" field.
func EtagLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldEtag, v))
}

// EtagContains applies the Contains predicate on the "etag" field.
func EtagContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldEtag, v))
}

// EtagHasPrefix applies the HasPrefix predicate on the "etag" field.
func EtagHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldEtag, v))
}

// EtagHasSuffix applies the HasSuffix predicate on the "etag" field.
func EtagHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldEtag, v))
}

// EtagIsNil applies the IsNil predicate on the "etag" field.
func EtagIsNil() predicate.Entity {
	return predicate.Entity(sql.FieldIsNull(FieldEtag))
}

// EtagNotNil applies the NotNil predicate on the "etag" field.
func EtagNotNil() predicate.Entity {
	return predicate.Entity(sql.FieldNotNull(FieldEtag))
}

// EtagEqualFold applies the EqualFold predicate on the "etag" field.
func EtagEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldEtag, v))
}

// EtagContainsFold applies the ContainsFold predicate on the "etag" field.
func EtagContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldEtag, v))
}

// MimeTypeEQ applies the EQ predicate on the "mime_type" field.
func MimeTypeEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldMimeType, v))
}

// MimeTypeNEQ applies the NEQ predicate on the "mime_type" field.
func MimeTypeNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldMimeType, v))
}

// MimeTypeIn applies the In predicate on the "mime_type" field.
func MimeTypeIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldMimeType, vs...))
}

// MimeTypeNotIn applies the NotIn predicate on the "mime_type" field.
func MimeTypeNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldMimeType, vs...))
}

// MimeTypeGT applies the GT predicate on the "mime_type" field.
func MimeTypeGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldMimeType, v))
}

// MimeTypeGTE applies the GTE predicate on the "mime_type" field.
func MimeTypeGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldMimeType, v))
}

// MimeTypeLT applies the LT predicate on the "mime_type" field.
func MimeTypeLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldMimeType, v))
}

// MimeTypeLTE applies the LTE predicate on the "mime_type" field.
func MimeTypeLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldMimeType, v))
}

// MimeTypeContains applies the Contains predicate on the "mime_type" field.
func MimeTypeContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldMimeType, v))
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mime_type" field.
func MimeTypeHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldMimeType, v))
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mime_type" field.
func MimeTypeHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldMimeType, v))
}

// MimeTypeIsNil applies the IsNil predicate on the "mime_type" field.
func MimeTypeIsNil() predicate.Entity {
	return predicate.Entity(sql.FieldIsNull(FieldMimeType))
}

// MimeTypeNotNil applies the NotNil predicate on the "mime_type" field.
func MimeTypeNotNil() predicate.Entity {
	return predicate.Entity(sql.FieldNotNull(FieldMimeType))
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mime_type" field.
func MimeTypeEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldMimeType, v))
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mime_type" field.
func MimeTypeContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldMimeType, v))
}

// DimensionEQ applies the EQ predicate on the "dimension" field.
func DimensionEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldDimension, v))
}

// DimensionNEQ applies the NEQ predicate on the "dimension" field.
func DimensionNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldDimension, v))
}

// DimensionIn applies the In predicate on the "dimension" field.
func DimensionIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldDimension, vs...))
}

// DimensionNotIn applies the NotIn predicate on the "dimension" field.
func DimensionNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldDimension, vs...))
}

// DimensionGT applies the GT predicate on the "dimension" field.
func DimensionGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldDimension, v))
}

// DimensionGTE applies the GTE predicate on the "dimension" field.
func DimensionGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldDimension, v))
}

// DimensionLT applies the LT predicate on the "dimension" field.
func DimensionLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldDimension, v))
}

// DimensionLTE applies the LTE predicate on the "dimension" field.
func DimensionLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldDimension, v))
}

// DimensionContains applies the Contains predicate on the "dimension" field.
func DimensionContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldDimension, v))
}

// DimensionHasPrefix applies the HasPrefix predicate on the "dimension" field.
func DimensionHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldDimension, v))
}

// DimensionHasSuffix applies the HasSuffix predicate on the "dimension" field.
func DimensionHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldDimension, v))
}

// DimensionIsNil applies the IsNil predicate on the "dimension" field.
func DimensionIsNil() predicate.Entity {
	return predicate.Entity(sql.FieldIsNull(FieldDimension))
}

// DimensionNotNil applies the NotNil predicate on the "dimension" field.
func DimensionNotNil() predicate.Entity {
	return predicate.Entity(sql.FieldNotNull(FieldDimension))
}

// DimensionEqualFold applies the EqualFold predicate on the "dimension" field.
func DimensionEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldDimension, v))
}

// DimensionContainsFold applies the ContainsFold predicate on the "dimension" field.
func DimensionContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldDimension, v))
}

// StorageMetadataEQ applies the EQ predicate on the "storage_metadata" field.
func StorageMetadataEQ(v model.JSONMap) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldStorageMetadata, v))
}

// StorageMetadataNEQ applies the NEQ predicate on the "storage_metadata" field.
func StorageMetadataNEQ(v model.JSONMap) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldStorageMetadata, v))
}

// StorageMetadataIn applies the In predicate on the "storage_metadata" field.
func StorageMetadataIn(vs ...model.JSONMap) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldStorageMetadata, vs...))
}

// StorageMetadataNotIn applies the NotIn predicate on the "storage_metadata" field.
func StorageMetadataNotIn(vs ...model.JSONMap) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldStorageMetadata, vs...))
}

// StorageMetadataGT applies the GT predicate on the "storage_metadata" field.
func StorageMetadataGT(v model.JSONMap) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldStorageMetadata, v))
}

// StorageMetadataGTE applies the GTE predicate on the "storage_metadata" field.
func StorageMetadataGTE(v model.JSONMap) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldStorageMetadata, v))
}

// StorageMetadataLT applies the LT predicate on the "storage_metadata" field.
func StorageMetadataLT(v model.JSONMap) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldStorageMetadata, v))
}

// StorageMetadataLTE applies the LTE predicate on the "storage_metadata" field.
func StorageMetadataLTE(v model.JSONMap) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldStorageMetadata, v))
}

// StorageMetadataIsNil applies the IsNil predicate on the "storage_metadata" field.
func StorageMetadataIsNil() predicate.Entity {
	return predicate.Entity(sql.FieldIsNull(FieldStorageMetadata))
}

// StorageMetadataNotNil applies the NotNil predicate on the "storage_metadata" field.
func StorageMetadataNotNil() predicate.Entity {
	return predicate.Entity(sql.FieldNotNull(FieldStorageMetadata))
}

// HasFileVersions applies the HasEdge predicate on the "file_versions" edge.
func HasFileVersions() predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FileVersionsTable, FileVersionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileVersionsWith applies the HasEdge predicate on the "file_versions" edge with a given conditions (other predicates).
func HasFileVersionsWith(preds ...predicate.FileEntity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		step := newFileVersionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entity) predicate.Entity {
	return predicate.Entity(sql.NotPredicates(p))
}
