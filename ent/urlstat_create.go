// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/anzhiyu-c/anheyu-app/ent/urlstat"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// URLStatCreate is the builder for creating a URLStat entity.
type URLStatCreate struct {
	config
	mutation *URLStatMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (usc *URLStatCreate) SetCreatedAt(t time.Time) *URLStatCreate {
	usc.mutation.SetCreatedAt(t)
	return usc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (usc *URLStatCreate) SetNillableCreatedAt(t *time.Time) *URLStatCreate {
	if t != nil {
		usc.SetCreatedAt(*t)
	}
	return usc
}

// SetUpdatedAt sets the "updated_at" field.
func (usc *URLStatCreate) SetUpdatedAt(t time.Time) *URLStatCreate {
	usc.mutation.SetUpdatedAt(t)
	return usc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (usc *URLStatCreate) SetNillableUpdatedAt(t *time.Time) *URLStatCreate {
	if t != nil {
		usc.SetUpdatedAt(*t)
	}
	return usc
}

// SetURLPath sets the "url_path" field.
func (usc *URLStatCreate) SetURLPath(s string) *URLStatCreate {
	usc.mutation.SetURLPath(s)
	return usc
}

// SetPageTitle sets the "page_title" field.
func (usc *URLStatCreate) SetPageTitle(s string) *URLStatCreate {
	usc.mutation.SetPageTitle(s)
	return usc
}

// SetNillablePageTitle sets the "page_title" field if the given value is not nil.
func (usc *URLStatCreate) SetNillablePageTitle(s *string) *URLStatCreate {
	if s != nil {
		usc.SetPageTitle(*s)
	}
	return usc
}

// SetTotalViews sets the "total_views" field.
func (usc *URLStatCreate) SetTotalViews(i int64) *URLStatCreate {
	usc.mutation.SetTotalViews(i)
	return usc
}

// SetNillableTotalViews sets the "total_views" field if the given value is not nil.
func (usc *URLStatCreate) SetNillableTotalViews(i *int64) *URLStatCreate {
	if i != nil {
		usc.SetTotalViews(*i)
	}
	return usc
}

// SetUniqueViews sets the "unique_views" field.
func (usc *URLStatCreate) SetUniqueViews(i int64) *URLStatCreate {
	usc.mutation.SetUniqueViews(i)
	return usc
}

// SetNillableUniqueViews sets the "unique_views" field if the given value is not nil.
func (usc *URLStatCreate) SetNillableUniqueViews(i *int64) *URLStatCreate {
	if i != nil {
		usc.SetUniqueViews(*i)
	}
	return usc
}

// SetBounceCount sets the "bounce_count" field.
func (usc *URLStatCreate) SetBounceCount(i int64) *URLStatCreate {
	usc.mutation.SetBounceCount(i)
	return usc
}

// SetNillableBounceCount sets the "bounce_count" field if the given value is not nil.
func (usc *URLStatCreate) SetNillableBounceCount(i *int64) *URLStatCreate {
	if i != nil {
		usc.SetBounceCount(*i)
	}
	return usc
}

// SetAvgDuration sets the "avg_duration" field.
func (usc *URLStatCreate) SetAvgDuration(f float64) *URLStatCreate {
	usc.mutation.SetAvgDuration(f)
	return usc
}

// SetNillableAvgDuration sets the "avg_duration" field if the given value is not nil.
func (usc *URLStatCreate) SetNillableAvgDuration(f *float64) *URLStatCreate {
	if f != nil {
		usc.SetAvgDuration(*f)
	}
	return usc
}

// SetLastVisitedAt sets the "last_visited_at" field.
func (usc *URLStatCreate) SetLastVisitedAt(t time.Time) *URLStatCreate {
	usc.mutation.SetLastVisitedAt(t)
	return usc
}

// SetNillableLastVisitedAt sets the "last_visited_at" field if the given value is not nil.
func (usc *URLStatCreate) SetNillableLastVisitedAt(t *time.Time) *URLStatCreate {
	if t != nil {
		usc.SetLastVisitedAt(*t)
	}
	return usc
}

// SetID sets the "id" field.
func (usc *URLStatCreate) SetID(u uint) *URLStatCreate {
	usc.mutation.SetID(u)
	return usc
}

// Mutation returns the URLStatMutation object of the builder.
func (usc *URLStatCreate) Mutation() *URLStatMutation {
	return usc.mutation
}

// Save creates the URLStat in the database.
func (usc *URLStatCreate) Save(ctx context.Context) (*URLStat, error) {
	usc.defaults()
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *URLStatCreate) SaveX(ctx context.Context) *URLStat {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *URLStatCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *URLStatCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *URLStatCreate) defaults() {
	if _, ok := usc.mutation.CreatedAt(); !ok {
		v := urlstat.DefaultCreatedAt()
		usc.mutation.SetCreatedAt(v)
	}
	if _, ok := usc.mutation.UpdatedAt(); !ok {
		v := urlstat.DefaultUpdatedAt()
		usc.mutation.SetUpdatedAt(v)
	}
	if _, ok := usc.mutation.TotalViews(); !ok {
		v := urlstat.DefaultTotalViews
		usc.mutation.SetTotalViews(v)
	}
	if _, ok := usc.mutation.UniqueViews(); !ok {
		v := urlstat.DefaultUniqueViews
		usc.mutation.SetUniqueViews(v)
	}
	if _, ok := usc.mutation.BounceCount(); !ok {
		v := urlstat.DefaultBounceCount
		usc.mutation.SetBounceCount(v)
	}
	if _, ok := usc.mutation.AvgDuration(); !ok {
		v := urlstat.DefaultAvgDuration
		usc.mutation.SetAvgDuration(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *URLStatCreate) check() error {
	if _, ok := usc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "URLStat.created_at"`)}
	}
	if _, ok := usc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "URLStat.updated_at"`)}
	}
	if _, ok := usc.mutation.URLPath(); !ok {
		return &ValidationError{Name: "url_path", err: errors.New(`ent: missing required field "URLStat.url_path"`)}
	}
	if v, ok := usc.mutation.URLPath(); ok {
		if err := urlstat.URLPathValidator(v); err != nil {
			return &ValidationError{Name: "url_path", err: fmt.Errorf(`ent: validator failed for field "URLStat.url_path": %w`, err)}
		}
	}
	if v, ok := usc.mutation.PageTitle(); ok {
		if err := urlstat.PageTitleValidator(v); err != nil {
			return &ValidationError{Name: "page_title", err: fmt.Errorf(`ent: validator failed for field "URLStat.page_title": %w`, err)}
		}
	}
	if _, ok := usc.mutation.TotalViews(); !ok {
		return &ValidationError{Name: "total_views", err: errors.New(`ent: missing required field "URLStat.total_views"`)}
	}
	if _, ok := usc.mutation.UniqueViews(); !ok {
		return &ValidationError{Name: "unique_views", err: errors.New(`ent: missing required field "URLStat.unique_views"`)}
	}
	if _, ok := usc.mutation.BounceCount(); !ok {
		return &ValidationError{Name: "bounce_count", err: errors.New(`ent: missing required field "URLStat.bounce_count"`)}
	}
	if _, ok := usc.mutation.AvgDuration(); !ok {
		return &ValidationError{Name: "avg_duration", err: errors.New(`ent: missing required field "URLStat.avg_duration"`)}
	}
	return nil
}

func (usc *URLStatCreate) sqlSave(ctx context.Context) (*URLStat, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *URLStatCreate) createSpec() (*URLStat, *sqlgraph.CreateSpec) {
	var (
		_node = &URLStat{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(urlstat.Table, sqlgraph.NewFieldSpec(urlstat.FieldID, field.TypeUint))
	)
	_spec.OnConflict = usc.conflict
	if id, ok := usc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := usc.mutation.CreatedAt(); ok {
		_spec.SetField(urlstat.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := usc.mutation.UpdatedAt(); ok {
		_spec.SetField(urlstat.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := usc.mutation.URLPath(); ok {
		_spec.SetField(urlstat.FieldURLPath, field.TypeString, value)
		_node.URLPath = value
	}
	if value, ok := usc.mutation.PageTitle(); ok {
		_spec.SetField(urlstat.FieldPageTitle, field.TypeString, value)
		_node.PageTitle = &value
	}
	if value, ok := usc.mutation.TotalViews(); ok {
		_spec.SetField(urlstat.FieldTotalViews, field.TypeInt64, value)
		_node.TotalViews = value
	}
	if value, ok := usc.mutation.UniqueViews(); ok {
		_spec.SetField(urlstat.FieldUniqueViews, field.TypeInt64, value)
		_node.UniqueViews = value
	}
	if value, ok := usc.mutation.BounceCount(); ok {
		_spec.SetField(urlstat.FieldBounceCount, field.TypeInt64, value)
		_node.BounceCount = value
	}
	if value, ok := usc.mutation.AvgDuration(); ok {
		_spec.SetField(urlstat.FieldAvgDuration, field.TypeFloat64, value)
		_node.AvgDuration = value
	}
	if value, ok := usc.mutation.LastVisitedAt(); ok {
		_spec.SetField(urlstat.FieldLastVisitedAt, field.TypeTime, value)
		_node.LastVisitedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.URLStat.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.URLStatUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (usc *URLStatCreate) OnConflict(opts ...sql.ConflictOption) *URLStatUpsertOne {
	usc.conflict = opts
	return &URLStatUpsertOne{
		create: usc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.URLStat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (usc *URLStatCreate) OnConflictColumns(columns ...string) *URLStatUpsertOne {
	usc.conflict = append(usc.conflict, sql.ConflictColumns(columns...))
	return &URLStatUpsertOne{
		create: usc,
	}
}

type (
	// URLStatUpsertOne is the builder for "upsert"-ing
	//  one URLStat node.
	URLStatUpsertOne struct {
		create *URLStatCreate
	}

	// URLStatUpsert is the "OnConflict" setter.
	URLStatUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *URLStatUpsert) SetUpdatedAt(v time.Time) *URLStatUpsert {
	u.Set(urlstat.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *URLStatUpsert) UpdateUpdatedAt() *URLStatUpsert {
	u.SetExcluded(urlstat.FieldUpdatedAt)
	return u
}

// SetURLPath sets the "url_path" field.
func (u *URLStatUpsert) SetURLPath(v string) *URLStatUpsert {
	u.Set(urlstat.FieldURLPath, v)
	return u
}

// UpdateURLPath sets the "url_path" field to the value that was provided on create.
func (u *URLStatUpsert) UpdateURLPath() *URLStatUpsert {
	u.SetExcluded(urlstat.FieldURLPath)
	return u
}

// SetPageTitle sets the "page_title" field.
func (u *URLStatUpsert) SetPageTitle(v string) *URLStatUpsert {
	u.Set(urlstat.FieldPageTitle, v)
	return u
}

// UpdatePageTitle sets the "page_title" field to the value that was provided on create.
func (u *URLStatUpsert) UpdatePageTitle() *URLStatUpsert {
	u.SetExcluded(urlstat.FieldPageTitle)
	return u
}

// ClearPageTitle clears the value of the "page_title" field.
func (u *URLStatUpsert) ClearPageTitle() *URLStatUpsert {
	u.SetNull(urlstat.FieldPageTitle)
	return u
}

// SetTotalViews sets the "total_views" field.
func (u *URLStatUpsert) SetTotalViews(v int64) *URLStatUpsert {
	u.Set(urlstat.FieldTotalViews, v)
	return u
}

// UpdateTotalViews sets the "total_views" field to the value that was provided on create.
func (u *URLStatUpsert) UpdateTotalViews() *URLStatUpsert {
	u.SetExcluded(urlstat.FieldTotalViews)
	return u
}

// AddTotalViews adds v to the "total_views" field.
func (u *URLStatUpsert) AddTotalViews(v int64) *URLStatUpsert {
	u.Add(urlstat.FieldTotalViews, v)
	return u
}

// SetUniqueViews sets the "unique_views" field.
func (u *URLStatUpsert) SetUniqueViews(v int64) *URLStatUpsert {
	u.Set(urlstat.FieldUniqueViews, v)
	return u
}

// UpdateUniqueViews sets the "unique_views" field to the value that was provided on create.
func (u *URLStatUpsert) UpdateUniqueViews() *URLStatUpsert {
	u.SetExcluded(urlstat.FieldUniqueViews)
	return u
}

// AddUniqueViews adds v to the "unique_views" field.
func (u *URLStatUpsert) AddUniqueViews(v int64) *URLStatUpsert {
	u.Add(urlstat.FieldUniqueViews, v)
	return u
}

// SetBounceCount sets the "bounce_count" field.
func (u *URLStatUpsert) SetBounceCount(v int64) *URLStatUpsert {
	u.Set(urlstat.FieldBounceCount, v)
	return u
}

// UpdateBounceCount sets the "bounce_count" field to the value that was provided on create.
func (u *URLStatUpsert) UpdateBounceCount() *URLStatUpsert {
	u.SetExcluded(urlstat.FieldBounceCount)
	return u
}

// AddBounceCount adds v to the "bounce_count" field.
func (u *URLStatUpsert) AddBounceCount(v int64) *URLStatUpsert {
	u.Add(urlstat.FieldBounceCount, v)
	return u
}

// SetAvgDuration sets the "avg_duration" field.
func (u *URLStatUpsert) SetAvgDuration(v float64) *URLStatUpsert {
	u.Set(urlstat.FieldAvgDuration, v)
	return u
}

// UpdateAvgDuration sets the "avg_duration" field to the value that was provided on create.
func (u *URLStatUpsert) UpdateAvgDuration() *URLStatUpsert {
	u.SetExcluded(urlstat.FieldAvgDuration)
	return u
}

// AddAvgDuration adds v to the "avg_duration" field.
func (u *URLStatUpsert) AddAvgDuration(v float64) *URLStatUpsert {
	u.Add(urlstat.FieldAvgDuration, v)
	return u
}

// SetLastVisitedAt sets the "last_visited_at" field.
func (u *URLStatUpsert) SetLastVisitedAt(v time.Time) *URLStatUpsert {
	u.Set(urlstat.FieldLastVisitedAt, v)
	return u
}

// UpdateLastVisitedAt sets the "last_visited_at" field to the value that was provided on create.
func (u *URLStatUpsert) UpdateLastVisitedAt() *URLStatUpsert {
	u.SetExcluded(urlstat.FieldLastVisitedAt)
	return u
}

// ClearLastVisitedAt clears the value of the "last_visited_at" field.
func (u *URLStatUpsert) ClearLastVisitedAt() *URLStatUpsert {
	u.SetNull(urlstat.FieldLastVisitedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.URLStat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(urlstat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *URLStatUpsertOne) UpdateNewValues() *URLStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(urlstat.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(urlstat.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.URLStat.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *URLStatUpsertOne) Ignore() *URLStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *URLStatUpsertOne) DoNothing() *URLStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the URLStatCreate.OnConflict
// documentation for more info.
func (u *URLStatUpsertOne) Update(set func(*URLStatUpsert)) *URLStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&URLStatUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *URLStatUpsertOne) SetUpdatedAt(v time.Time) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *URLStatUpsertOne) UpdateUpdatedAt() *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetURLPath sets the "url_path" field.
func (u *URLStatUpsertOne) SetURLPath(v string) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.SetURLPath(v)
	})
}

// UpdateURLPath sets the "url_path" field to the value that was provided on create.
func (u *URLStatUpsertOne) UpdateURLPath() *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateURLPath()
	})
}

// SetPageTitle sets the "page_title" field.
func (u *URLStatUpsertOne) SetPageTitle(v string) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.SetPageTitle(v)
	})
}

// UpdatePageTitle sets the "page_title" field to the value that was provided on create.
func (u *URLStatUpsertOne) UpdatePageTitle() *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdatePageTitle()
	})
}

// ClearPageTitle clears the value of the "page_title" field.
func (u *URLStatUpsertOne) ClearPageTitle() *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.ClearPageTitle()
	})
}

// SetTotalViews sets the "total_views" field.
func (u *URLStatUpsertOne) SetTotalViews(v int64) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.SetTotalViews(v)
	})
}

// AddTotalViews adds v to the "total_views" field.
func (u *URLStatUpsertOne) AddTotalViews(v int64) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.AddTotalViews(v)
	})
}

// UpdateTotalViews sets the "total_views" field to the value that was provided on create.
func (u *URLStatUpsertOne) UpdateTotalViews() *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateTotalViews()
	})
}

// SetUniqueViews sets the "unique_views" field.
func (u *URLStatUpsertOne) SetUniqueViews(v int64) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.SetUniqueViews(v)
	})
}

// AddUniqueViews adds v to the "unique_views" field.
func (u *URLStatUpsertOne) AddUniqueViews(v int64) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.AddUniqueViews(v)
	})
}

// UpdateUniqueViews sets the "unique_views" field to the value that was provided on create.
func (u *URLStatUpsertOne) UpdateUniqueViews() *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateUniqueViews()
	})
}

// SetBounceCount sets the "bounce_count" field.
func (u *URLStatUpsertOne) SetBounceCount(v int64) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.SetBounceCount(v)
	})
}

// AddBounceCount adds v to the "bounce_count" field.
func (u *URLStatUpsertOne) AddBounceCount(v int64) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.AddBounceCount(v)
	})
}

// UpdateBounceCount sets the "bounce_count" field to the value that was provided on create.
func (u *URLStatUpsertOne) UpdateBounceCount() *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateBounceCount()
	})
}

// SetAvgDuration sets the "avg_duration" field.
func (u *URLStatUpsertOne) SetAvgDuration(v float64) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.SetAvgDuration(v)
	})
}

// AddAvgDuration adds v to the "avg_duration" field.
func (u *URLStatUpsertOne) AddAvgDuration(v float64) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.AddAvgDuration(v)
	})
}

// UpdateAvgDuration sets the "avg_duration" field to the value that was provided on create.
func (u *URLStatUpsertOne) UpdateAvgDuration() *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateAvgDuration()
	})
}

// SetLastVisitedAt sets the "last_visited_at" field.
func (u *URLStatUpsertOne) SetLastVisitedAt(v time.Time) *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.SetLastVisitedAt(v)
	})
}

// UpdateLastVisitedAt sets the "last_visited_at" field to the value that was provided on create.
func (u *URLStatUpsertOne) UpdateLastVisitedAt() *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateLastVisitedAt()
	})
}

// ClearLastVisitedAt clears the value of the "last_visited_at" field.
func (u *URLStatUpsertOne) ClearLastVisitedAt() *URLStatUpsertOne {
	return u.Update(func(s *URLStatUpsert) {
		s.ClearLastVisitedAt()
	})
}

// Exec executes the query.
func (u *URLStatUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for URLStatCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *URLStatUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *URLStatUpsertOne) ID(ctx context.Context) (id uint, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *URLStatUpsertOne) IDX(ctx context.Context) uint {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// URLStatCreateBulk is the builder for creating many URLStat entities in bulk.
type URLStatCreateBulk struct {
	config
	err      error
	builders []*URLStatCreate
	conflict []sql.ConflictOption
}

// Save creates the URLStat entities in the database.
func (uscb *URLStatCreateBulk) Save(ctx context.Context) ([]*URLStat, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*URLStat, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*URLStatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *URLStatCreateBulk) SaveX(ctx context.Context) []*URLStat {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *URLStatCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *URLStatCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.URLStat.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.URLStatUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uscb *URLStatCreateBulk) OnConflict(opts ...sql.ConflictOption) *URLStatUpsertBulk {
	uscb.conflict = opts
	return &URLStatUpsertBulk{
		create: uscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.URLStat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uscb *URLStatCreateBulk) OnConflictColumns(columns ...string) *URLStatUpsertBulk {
	uscb.conflict = append(uscb.conflict, sql.ConflictColumns(columns...))
	return &URLStatUpsertBulk{
		create: uscb,
	}
}

// URLStatUpsertBulk is the builder for "upsert"-ing
// a bulk of URLStat nodes.
type URLStatUpsertBulk struct {
	create *URLStatCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.URLStat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(urlstat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *URLStatUpsertBulk) UpdateNewValues() *URLStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(urlstat.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(urlstat.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.URLStat.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *URLStatUpsertBulk) Ignore() *URLStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *URLStatUpsertBulk) DoNothing() *URLStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the URLStatCreateBulk.OnConflict
// documentation for more info.
func (u *URLStatUpsertBulk) Update(set func(*URLStatUpsert)) *URLStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&URLStatUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *URLStatUpsertBulk) SetUpdatedAt(v time.Time) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *URLStatUpsertBulk) UpdateUpdatedAt() *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetURLPath sets the "url_path" field.
func (u *URLStatUpsertBulk) SetURLPath(v string) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.SetURLPath(v)
	})
}

// UpdateURLPath sets the "url_path" field to the value that was provided on create.
func (u *URLStatUpsertBulk) UpdateURLPath() *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateURLPath()
	})
}

// SetPageTitle sets the "page_title" field.
func (u *URLStatUpsertBulk) SetPageTitle(v string) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.SetPageTitle(v)
	})
}

// UpdatePageTitle sets the "page_title" field to the value that was provided on create.
func (u *URLStatUpsertBulk) UpdatePageTitle() *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdatePageTitle()
	})
}

// ClearPageTitle clears the value of the "page_title" field.
func (u *URLStatUpsertBulk) ClearPageTitle() *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.ClearPageTitle()
	})
}

// SetTotalViews sets the "total_views" field.
func (u *URLStatUpsertBulk) SetTotalViews(v int64) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.SetTotalViews(v)
	})
}

// AddTotalViews adds v to the "total_views" field.
func (u *URLStatUpsertBulk) AddTotalViews(v int64) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.AddTotalViews(v)
	})
}

// UpdateTotalViews sets the "total_views" field to the value that was provided on create.
func (u *URLStatUpsertBulk) UpdateTotalViews() *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateTotalViews()
	})
}

// SetUniqueViews sets the "unique_views" field.
func (u *URLStatUpsertBulk) SetUniqueViews(v int64) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.SetUniqueViews(v)
	})
}

// AddUniqueViews adds v to the "unique_views" field.
func (u *URLStatUpsertBulk) AddUniqueViews(v int64) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.AddUniqueViews(v)
	})
}

// UpdateUniqueViews sets the "unique_views" field to the value that was provided on create.
func (u *URLStatUpsertBulk) UpdateUniqueViews() *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateUniqueViews()
	})
}

// SetBounceCount sets the "bounce_count" field.
func (u *URLStatUpsertBulk) SetBounceCount(v int64) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.SetBounceCount(v)
	})
}

// AddBounceCount adds v to the "bounce_count" field.
func (u *URLStatUpsertBulk) AddBounceCount(v int64) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.AddBounceCount(v)
	})
}

// UpdateBounceCount sets the "bounce_count" field to the value that was provided on create.
func (u *URLStatUpsertBulk) UpdateBounceCount() *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateBounceCount()
	})
}

// SetAvgDuration sets the "avg_duration" field.
func (u *URLStatUpsertBulk) SetAvgDuration(v float64) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.SetAvgDuration(v)
	})
}

// AddAvgDuration adds v to the "avg_duration" field.
func (u *URLStatUpsertBulk) AddAvgDuration(v float64) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.AddAvgDuration(v)
	})
}

// UpdateAvgDuration sets the "avg_duration" field to the value that was provided on create.
func (u *URLStatUpsertBulk) UpdateAvgDuration() *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateAvgDuration()
	})
}

// SetLastVisitedAt sets the "last_visited_at" field.
func (u *URLStatUpsertBulk) SetLastVisitedAt(v time.Time) *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.SetLastVisitedAt(v)
	})
}

// UpdateLastVisitedAt sets the "last_visited_at" field to the value that was provided on create.
func (u *URLStatUpsertBulk) UpdateLastVisitedAt() *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.UpdateLastVisitedAt()
	})
}

// ClearLastVisitedAt clears the value of the "last_visited_at" field.
func (u *URLStatUpsertBulk) ClearLastVisitedAt() *URLStatUpsertBulk {
	return u.Update(func(s *URLStatUpsert) {
		s.ClearLastVisitedAt()
	})
}

// Exec executes the query.
func (u *URLStatUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the URLStatCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for URLStatCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *URLStatUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
