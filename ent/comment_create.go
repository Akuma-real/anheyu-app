// Code generated by ent, DO NOT EDIT.

package ent

import (
	"anheyu-app/ent/comment"
	"anheyu-app/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CommentCreate is the builder for creating a Comment entity.
type CommentCreate struct {
	config
	mutation *CommentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CommentCreate) SetDeletedAt(t time.Time) *CommentCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableDeletedAt(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CommentCreate) SetCreatedAt(t time.Time) *CommentCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableCreatedAt(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CommentCreate) SetUpdatedAt(t time.Time) *CommentCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUpdatedAt(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetTargetPath sets the "target_path" field.
func (cc *CommentCreate) SetTargetPath(s string) *CommentCreate {
	cc.mutation.SetTargetPath(s)
	return cc
}

// SetTargetTitle sets the "target_title" field.
func (cc *CommentCreate) SetTargetTitle(s string) *CommentCreate {
	cc.mutation.SetTargetTitle(s)
	return cc
}

// SetNillableTargetTitle sets the "target_title" field if the given value is not nil.
func (cc *CommentCreate) SetNillableTargetTitle(s *string) *CommentCreate {
	if s != nil {
		cc.SetTargetTitle(*s)
	}
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *CommentCreate) SetUserID(u uint) *CommentCreate {
	cc.mutation.SetUserID(u)
	return cc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUserID(u *uint) *CommentCreate {
	if u != nil {
		cc.SetUserID(*u)
	}
	return cc
}

// SetParentID sets the "parent_id" field.
func (cc *CommentCreate) SetParentID(u uint) *CommentCreate {
	cc.mutation.SetParentID(u)
	return cc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cc *CommentCreate) SetNillableParentID(u *uint) *CommentCreate {
	if u != nil {
		cc.SetParentID(*u)
	}
	return cc
}

// SetNickname sets the "nickname" field.
func (cc *CommentCreate) SetNickname(s string) *CommentCreate {
	cc.mutation.SetNickname(s)
	return cc
}

// SetEmail sets the "email" field.
func (cc *CommentCreate) SetEmail(s string) *CommentCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cc *CommentCreate) SetNillableEmail(s *string) *CommentCreate {
	if s != nil {
		cc.SetEmail(*s)
	}
	return cc
}

// SetEmailMd5 sets the "email_md5" field.
func (cc *CommentCreate) SetEmailMd5(s string) *CommentCreate {
	cc.mutation.SetEmailMd5(s)
	return cc
}

// SetWebsite sets the "website" field.
func (cc *CommentCreate) SetWebsite(s string) *CommentCreate {
	cc.mutation.SetWebsite(s)
	return cc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (cc *CommentCreate) SetNillableWebsite(s *string) *CommentCreate {
	if s != nil {
		cc.SetWebsite(*s)
	}
	return cc
}

// SetContent sets the "content" field.
func (cc *CommentCreate) SetContent(s string) *CommentCreate {
	cc.mutation.SetContent(s)
	return cc
}

// SetContentHTML sets the "content_html" field.
func (cc *CommentCreate) SetContentHTML(s string) *CommentCreate {
	cc.mutation.SetContentHTML(s)
	return cc
}

// SetStatus sets the "status" field.
func (cc *CommentCreate) SetStatus(i int) *CommentCreate {
	cc.mutation.SetStatus(i)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CommentCreate) SetNillableStatus(i *int) *CommentCreate {
	if i != nil {
		cc.SetStatus(*i)
	}
	return cc
}

// SetIsAdminComment sets the "is_admin_comment" field.
func (cc *CommentCreate) SetIsAdminComment(b bool) *CommentCreate {
	cc.mutation.SetIsAdminComment(b)
	return cc
}

// SetNillableIsAdminComment sets the "is_admin_comment" field if the given value is not nil.
func (cc *CommentCreate) SetNillableIsAdminComment(b *bool) *CommentCreate {
	if b != nil {
		cc.SetIsAdminComment(*b)
	}
	return cc
}

// SetAllowNotification sets the "allow_notification" field.
func (cc *CommentCreate) SetAllowNotification(b bool) *CommentCreate {
	cc.mutation.SetAllowNotification(b)
	return cc
}

// SetNillableAllowNotification sets the "allow_notification" field if the given value is not nil.
func (cc *CommentCreate) SetNillableAllowNotification(b *bool) *CommentCreate {
	if b != nil {
		cc.SetAllowNotification(*b)
	}
	return cc
}

// SetUserAgent sets the "user_agent" field.
func (cc *CommentCreate) SetUserAgent(s string) *CommentCreate {
	cc.mutation.SetUserAgent(s)
	return cc
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (cc *CommentCreate) SetNillableUserAgent(s *string) *CommentCreate {
	if s != nil {
		cc.SetUserAgent(*s)
	}
	return cc
}

// SetIPAddress sets the "ip_address" field.
func (cc *CommentCreate) SetIPAddress(s string) *CommentCreate {
	cc.mutation.SetIPAddress(s)
	return cc
}

// SetIPLocation sets the "ip_location" field.
func (cc *CommentCreate) SetIPLocation(s string) *CommentCreate {
	cc.mutation.SetIPLocation(s)
	return cc
}

// SetNillableIPLocation sets the "ip_location" field if the given value is not nil.
func (cc *CommentCreate) SetNillableIPLocation(s *string) *CommentCreate {
	if s != nil {
		cc.SetIPLocation(*s)
	}
	return cc
}

// SetLikeCount sets the "like_count" field.
func (cc *CommentCreate) SetLikeCount(i int) *CommentCreate {
	cc.mutation.SetLikeCount(i)
	return cc
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (cc *CommentCreate) SetNillableLikeCount(i *int) *CommentCreate {
	if i != nil {
		cc.SetLikeCount(*i)
	}
	return cc
}

// SetPinnedAt sets the "pinned_at" field.
func (cc *CommentCreate) SetPinnedAt(t time.Time) *CommentCreate {
	cc.mutation.SetPinnedAt(t)
	return cc
}

// SetNillablePinnedAt sets the "pinned_at" field if the given value is not nil.
func (cc *CommentCreate) SetNillablePinnedAt(t *time.Time) *CommentCreate {
	if t != nil {
		cc.SetPinnedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CommentCreate) SetID(u uint) *CommentCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *CommentCreate) SetUser(u *User) *CommentCreate {
	return cc.SetUserID(u.ID)
}

// SetChildrenID sets the "children" edge to the Comment entity by ID.
func (cc *CommentCreate) SetChildrenID(id uint) *CommentCreate {
	cc.mutation.SetChildrenID(id)
	return cc
}

// SetNillableChildrenID sets the "children" edge to the Comment entity by ID if the given value is not nil.
func (cc *CommentCreate) SetNillableChildrenID(id *uint) *CommentCreate {
	if id != nil {
		cc = cc.SetChildrenID(*id)
	}
	return cc
}

// SetChildren sets the "children" edge to the Comment entity.
func (cc *CommentCreate) SetChildren(c *Comment) *CommentCreate {
	return cc.SetChildrenID(c.ID)
}

// AddParentIDs adds the "parent" edge to the Comment entity by IDs.
func (cc *CommentCreate) AddParentIDs(ids ...uint) *CommentCreate {
	cc.mutation.AddParentIDs(ids...)
	return cc
}

// AddParent adds the "parent" edges to the Comment entity.
func (cc *CommentCreate) AddParent(c ...*Comment) *CommentCreate {
	ids := make([]uint, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddParentIDs(ids...)
}

// Mutation returns the CommentMutation object of the builder.
func (cc *CommentCreate) Mutation() *CommentMutation {
	return cc.mutation
}

// Save creates the Comment in the database.
func (cc *CommentCreate) Save(ctx context.Context) (*Comment, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommentCreate) SaveX(ctx context.Context) *Comment {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommentCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommentCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommentCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if comment.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized comment.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := comment.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if comment.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized comment.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := comment.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := comment.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.IsAdminComment(); !ok {
		v := comment.DefaultIsAdminComment
		cc.mutation.SetIsAdminComment(v)
	}
	if _, ok := cc.mutation.AllowNotification(); !ok {
		v := comment.DefaultAllowNotification
		cc.mutation.SetAllowNotification(v)
	}
	if _, ok := cc.mutation.LikeCount(); !ok {
		v := comment.DefaultLikeCount
		cc.mutation.SetLikeCount(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommentCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Comment.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Comment.updated_at"`)}
	}
	if _, ok := cc.mutation.TargetPath(); !ok {
		return &ValidationError{Name: "target_path", err: errors.New(`ent: missing required field "Comment.target_path"`)}
	}
	if v, ok := cc.mutation.TargetPath(); ok {
		if err := comment.TargetPathValidator(v); err != nil {
			return &ValidationError{Name: "target_path", err: fmt.Errorf(`ent: validator failed for field "Comment.target_path": %w`, err)}
		}
	}
	if v, ok := cc.mutation.TargetTitle(); ok {
		if err := comment.TargetTitleValidator(v); err != nil {
			return &ValidationError{Name: "target_title", err: fmt.Errorf(`ent: validator failed for field "Comment.target_title": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "Comment.nickname"`)}
	}
	if v, ok := cc.mutation.Nickname(); ok {
		if err := comment.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Comment.nickname": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Email(); ok {
		if err := comment.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Comment.email": %w`, err)}
		}
	}
	if _, ok := cc.mutation.EmailMd5(); !ok {
		return &ValidationError{Name: "email_md5", err: errors.New(`ent: missing required field "Comment.email_md5"`)}
	}
	if v, ok := cc.mutation.EmailMd5(); ok {
		if err := comment.EmailMd5Validator(v); err != nil {
			return &ValidationError{Name: "email_md5", err: fmt.Errorf(`ent: validator failed for field "Comment.email_md5": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Website(); ok {
		if err := comment.WebsiteValidator(v); err != nil {
			return &ValidationError{Name: "website", err: fmt.Errorf(`ent: validator failed for field "Comment.website": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Comment.content"`)}
	}
	if v, ok := cc.mutation.Content(); ok {
		if err := comment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Comment.content": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ContentHTML(); !ok {
		return &ValidationError{Name: "content_html", err: errors.New(`ent: missing required field "Comment.content_html"`)}
	}
	if v, ok := cc.mutation.ContentHTML(); ok {
		if err := comment.ContentHTMLValidator(v); err != nil {
			return &ValidationError{Name: "content_html", err: fmt.Errorf(`ent: validator failed for field "Comment.content_html": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Comment.status"`)}
	}
	if _, ok := cc.mutation.IsAdminComment(); !ok {
		return &ValidationError{Name: "is_admin_comment", err: errors.New(`ent: missing required field "Comment.is_admin_comment"`)}
	}
	if _, ok := cc.mutation.AllowNotification(); !ok {
		return &ValidationError{Name: "allow_notification", err: errors.New(`ent: missing required field "Comment.allow_notification"`)}
	}
	if v, ok := cc.mutation.UserAgent(); ok {
		if err := comment.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "Comment.user_agent": %w`, err)}
		}
	}
	if _, ok := cc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "Comment.ip_address"`)}
	}
	if v, ok := cc.mutation.IPAddress(); ok {
		if err := comment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_address": %w`, err)}
		}
	}
	if v, ok := cc.mutation.IPLocation(); ok {
		if err := comment.IPLocationValidator(v); err != nil {
			return &ValidationError{Name: "ip_location", err: fmt.Errorf(`ent: validator failed for field "Comment.ip_location": %w`, err)}
		}
	}
	if _, ok := cc.mutation.LikeCount(); !ok {
		return &ValidationError{Name: "like_count", err: errors.New(`ent: missing required field "Comment.like_count"`)}
	}
	if v, ok := cc.mutation.LikeCount(); ok {
		if err := comment.LikeCountValidator(v); err != nil {
			return &ValidationError{Name: "like_count", err: fmt.Errorf(`ent: validator failed for field "Comment.like_count": %w`, err)}
		}
	}
	return nil
}

func (cc *CommentCreate) sqlSave(ctx context.Context) (*Comment, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CommentCreate) createSpec() (*Comment, *sqlgraph.CreateSpec) {
	var (
		_node = &Comment{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(comment.Table, sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(comment.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(comment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(comment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.TargetPath(); ok {
		_spec.SetField(comment.FieldTargetPath, field.TypeString, value)
		_node.TargetPath = value
	}
	if value, ok := cc.mutation.TargetTitle(); ok {
		_spec.SetField(comment.FieldTargetTitle, field.TypeString, value)
		_node.TargetTitle = &value
	}
	if value, ok := cc.mutation.Nickname(); ok {
		_spec.SetField(comment.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.SetField(comment.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := cc.mutation.EmailMd5(); ok {
		_spec.SetField(comment.FieldEmailMd5, field.TypeString, value)
		_node.EmailMd5 = value
	}
	if value, ok := cc.mutation.Website(); ok {
		_spec.SetField(comment.FieldWebsite, field.TypeString, value)
		_node.Website = &value
	}
	if value, ok := cc.mutation.Content(); ok {
		_spec.SetField(comment.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := cc.mutation.ContentHTML(); ok {
		_spec.SetField(comment.FieldContentHTML, field.TypeString, value)
		_node.ContentHTML = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(comment.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.IsAdminComment(); ok {
		_spec.SetField(comment.FieldIsAdminComment, field.TypeBool, value)
		_node.IsAdminComment = value
	}
	if value, ok := cc.mutation.AllowNotification(); ok {
		_spec.SetField(comment.FieldAllowNotification, field.TypeBool, value)
		_node.AllowNotification = value
	}
	if value, ok := cc.mutation.UserAgent(); ok {
		_spec.SetField(comment.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = &value
	}
	if value, ok := cc.mutation.IPAddress(); ok {
		_spec.SetField(comment.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := cc.mutation.IPLocation(); ok {
		_spec.SetField(comment.FieldIPLocation, field.TypeString, value)
		_node.IPLocation = &value
	}
	if value, ok := cc.mutation.LikeCount(); ok {
		_spec.SetField(comment.FieldLikeCount, field.TypeInt, value)
		_node.LikeCount = value
	}
	if value, ok := cc.mutation.PinnedAt(); ok {
		_spec.SetField(comment.FieldPinnedAt, field.TypeTime, value)
		_node.PinnedAt = &value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.UserTable,
			Columns: []string{comment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comment.ChildrenTable,
			Columns: []string{comment.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comment.ParentTable,
			Columns: []string{comment.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CommentCreate) OnConflict(opts ...sql.ConflictOption) *CommentUpsertOne {
	cc.conflict = opts
	return &CommentUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CommentCreate) OnConflictColumns(columns ...string) *CommentUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertOne{
		create: cc,
	}
}

type (
	// CommentUpsertOne is the builder for "upsert"-ing
	//  one Comment node.
	CommentUpsertOne struct {
		create *CommentCreate
	}

	// CommentUpsert is the "OnConflict" setter.
	CommentUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsert) SetDeletedAt(v time.Time) *CommentUpsert {
	u.Set(comment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsert) UpdateDeletedAt() *CommentUpsert {
	u.SetExcluded(comment.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommentUpsert) ClearDeletedAt() *CommentUpsert {
	u.SetNull(comment.FieldDeletedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsert) SetUpdatedAt(v time.Time) *CommentUpsert {
	u.Set(comment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsert) UpdateUpdatedAt() *CommentUpsert {
	u.SetExcluded(comment.FieldUpdatedAt)
	return u
}

// SetTargetPath sets the "target_path" field.
func (u *CommentUpsert) SetTargetPath(v string) *CommentUpsert {
	u.Set(comment.FieldTargetPath, v)
	return u
}

// UpdateTargetPath sets the "target_path" field to the value that was provided on create.
func (u *CommentUpsert) UpdateTargetPath() *CommentUpsert {
	u.SetExcluded(comment.FieldTargetPath)
	return u
}

// SetTargetTitle sets the "target_title" field.
func (u *CommentUpsert) SetTargetTitle(v string) *CommentUpsert {
	u.Set(comment.FieldTargetTitle, v)
	return u
}

// UpdateTargetTitle sets the "target_title" field to the value that was provided on create.
func (u *CommentUpsert) UpdateTargetTitle() *CommentUpsert {
	u.SetExcluded(comment.FieldTargetTitle)
	return u
}

// ClearTargetTitle clears the value of the "target_title" field.
func (u *CommentUpsert) ClearTargetTitle() *CommentUpsert {
	u.SetNull(comment.FieldTargetTitle)
	return u
}

// SetUserID sets the "user_id" field.
func (u *CommentUpsert) SetUserID(v uint) *CommentUpsert {
	u.Set(comment.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateUserID() *CommentUpsert {
	u.SetExcluded(comment.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommentUpsert) ClearUserID() *CommentUpsert {
	u.SetNull(comment.FieldUserID)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsert) SetParentID(v uint) *CommentUpsert {
	u.Set(comment.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsert) UpdateParentID() *CommentUpsert {
	u.SetExcluded(comment.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CommentUpsert) ClearParentID() *CommentUpsert {
	u.SetNull(comment.FieldParentID)
	return u
}

// SetNickname sets the "nickname" field.
func (u *CommentUpsert) SetNickname(v string) *CommentUpsert {
	u.Set(comment.FieldNickname, v)
	return u
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *CommentUpsert) UpdateNickname() *CommentUpsert {
	u.SetExcluded(comment.FieldNickname)
	return u
}

// SetEmail sets the "email" field.
func (u *CommentUpsert) SetEmail(v string) *CommentUpsert {
	u.Set(comment.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *CommentUpsert) UpdateEmail() *CommentUpsert {
	u.SetExcluded(comment.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *CommentUpsert) ClearEmail() *CommentUpsert {
	u.SetNull(comment.FieldEmail)
	return u
}

// SetEmailMd5 sets the "email_md5" field.
func (u *CommentUpsert) SetEmailMd5(v string) *CommentUpsert {
	u.Set(comment.FieldEmailMd5, v)
	return u
}

// UpdateEmailMd5 sets the "email_md5" field to the value that was provided on create.
func (u *CommentUpsert) UpdateEmailMd5() *CommentUpsert {
	u.SetExcluded(comment.FieldEmailMd5)
	return u
}

// SetWebsite sets the "website" field.
func (u *CommentUpsert) SetWebsite(v string) *CommentUpsert {
	u.Set(comment.FieldWebsite, v)
	return u
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *CommentUpsert) UpdateWebsite() *CommentUpsert {
	u.SetExcluded(comment.FieldWebsite)
	return u
}

// ClearWebsite clears the value of the "website" field.
func (u *CommentUpsert) ClearWebsite() *CommentUpsert {
	u.SetNull(comment.FieldWebsite)
	return u
}

// SetContent sets the "content" field.
func (u *CommentUpsert) SetContent(v string) *CommentUpsert {
	u.Set(comment.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsert) UpdateContent() *CommentUpsert {
	u.SetExcluded(comment.FieldContent)
	return u
}

// SetContentHTML sets the "content_html" field.
func (u *CommentUpsert) SetContentHTML(v string) *CommentUpsert {
	u.Set(comment.FieldContentHTML, v)
	return u
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *CommentUpsert) UpdateContentHTML() *CommentUpsert {
	u.SetExcluded(comment.FieldContentHTML)
	return u
}

// SetStatus sets the "status" field.
func (u *CommentUpsert) SetStatus(v int) *CommentUpsert {
	u.Set(comment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommentUpsert) UpdateStatus() *CommentUpsert {
	u.SetExcluded(comment.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CommentUpsert) AddStatus(v int) *CommentUpsert {
	u.Add(comment.FieldStatus, v)
	return u
}

// SetIsAdminComment sets the "is_admin_comment" field.
func (u *CommentUpsert) SetIsAdminComment(v bool) *CommentUpsert {
	u.Set(comment.FieldIsAdminComment, v)
	return u
}

// UpdateIsAdminComment sets the "is_admin_comment" field to the value that was provided on create.
func (u *CommentUpsert) UpdateIsAdminComment() *CommentUpsert {
	u.SetExcluded(comment.FieldIsAdminComment)
	return u
}

// SetAllowNotification sets the "allow_notification" field.
func (u *CommentUpsert) SetAllowNotification(v bool) *CommentUpsert {
	u.Set(comment.FieldAllowNotification, v)
	return u
}

// UpdateAllowNotification sets the "allow_notification" field to the value that was provided on create.
func (u *CommentUpsert) UpdateAllowNotification() *CommentUpsert {
	u.SetExcluded(comment.FieldAllowNotification)
	return u
}

// SetUserAgent sets the "user_agent" field.
func (u *CommentUpsert) SetUserAgent(v string) *CommentUpsert {
	u.Set(comment.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *CommentUpsert) UpdateUserAgent() *CommentUpsert {
	u.SetExcluded(comment.FieldUserAgent)
	return u
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *CommentUpsert) ClearUserAgent() *CommentUpsert {
	u.SetNull(comment.FieldUserAgent)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *CommentUpsert) SetIPAddress(v string) *CommentUpsert {
	u.Set(comment.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *CommentUpsert) UpdateIPAddress() *CommentUpsert {
	u.SetExcluded(comment.FieldIPAddress)
	return u
}

// SetIPLocation sets the "ip_location" field.
func (u *CommentUpsert) SetIPLocation(v string) *CommentUpsert {
	u.Set(comment.FieldIPLocation, v)
	return u
}

// UpdateIPLocation sets the "ip_location" field to the value that was provided on create.
func (u *CommentUpsert) UpdateIPLocation() *CommentUpsert {
	u.SetExcluded(comment.FieldIPLocation)
	return u
}

// ClearIPLocation clears the value of the "ip_location" field.
func (u *CommentUpsert) ClearIPLocation() *CommentUpsert {
	u.SetNull(comment.FieldIPLocation)
	return u
}

// SetLikeCount sets the "like_count" field.
func (u *CommentUpsert) SetLikeCount(v int) *CommentUpsert {
	u.Set(comment.FieldLikeCount, v)
	return u
}

// UpdateLikeCount sets the "like_count" field to the value that was provided on create.
func (u *CommentUpsert) UpdateLikeCount() *CommentUpsert {
	u.SetExcluded(comment.FieldLikeCount)
	return u
}

// AddLikeCount adds v to the "like_count" field.
func (u *CommentUpsert) AddLikeCount(v int) *CommentUpsert {
	u.Add(comment.FieldLikeCount, v)
	return u
}

// SetPinnedAt sets the "pinned_at" field.
func (u *CommentUpsert) SetPinnedAt(v time.Time) *CommentUpsert {
	u.Set(comment.FieldPinnedAt, v)
	return u
}

// UpdatePinnedAt sets the "pinned_at" field to the value that was provided on create.
func (u *CommentUpsert) UpdatePinnedAt() *CommentUpsert {
	u.SetExcluded(comment.FieldPinnedAt)
	return u
}

// ClearPinnedAt clears the value of the "pinned_at" field.
func (u *CommentUpsert) ClearPinnedAt() *CommentUpsert {
	u.SetNull(comment.FieldPinnedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CommentUpsertOne) UpdateNewValues() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(comment.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(comment.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CommentUpsertOne) Ignore() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertOne) DoNothing() *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreate.OnConflict
// documentation for more info.
func (u *CommentUpsertOne) Update(set func(*CommentUpsert)) *CommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsertOne) SetDeletedAt(v time.Time) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateDeletedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommentUpsertOne) ClearDeletedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsertOne) SetUpdatedAt(v time.Time) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateUpdatedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTargetPath sets the "target_path" field.
func (u *CommentUpsertOne) SetTargetPath(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetTargetPath(v)
	})
}

// UpdateTargetPath sets the "target_path" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateTargetPath() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateTargetPath()
	})
}

// SetTargetTitle sets the "target_title" field.
func (u *CommentUpsertOne) SetTargetTitle(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetTargetTitle(v)
	})
}

// UpdateTargetTitle sets the "target_title" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateTargetTitle() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateTargetTitle()
	})
}

// ClearTargetTitle clears the value of the "target_title" field.
func (u *CommentUpsertOne) ClearTargetTitle() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearTargetTitle()
	})
}

// SetUserID sets the "user_id" field.
func (u *CommentUpsertOne) SetUserID(v uint) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateUserID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommentUpsertOne) ClearUserID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUserID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsertOne) SetParentID(v uint) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateParentID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CommentUpsertOne) ClearParentID() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearParentID()
	})
}

// SetNickname sets the "nickname" field.
func (u *CommentUpsertOne) SetNickname(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateNickname() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateNickname()
	})
}

// SetEmail sets the "email" field.
func (u *CommentUpsertOne) SetEmail(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateEmail() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *CommentUpsertOne) ClearEmail() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearEmail()
	})
}

// SetEmailMd5 sets the "email_md5" field.
func (u *CommentUpsertOne) SetEmailMd5(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetEmailMd5(v)
	})
}

// UpdateEmailMd5 sets the "email_md5" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateEmailMd5() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateEmailMd5()
	})
}

// SetWebsite sets the "website" field.
func (u *CommentUpsertOne) SetWebsite(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateWebsite() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *CommentUpsertOne) ClearWebsite() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearWebsite()
	})
}

// SetContent sets the "content" field.
func (u *CommentUpsertOne) SetContent(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateContent() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContent()
	})
}

// SetContentHTML sets the "content_html" field.
func (u *CommentUpsertOne) SetContentHTML(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetContentHTML(v)
	})
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateContentHTML() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContentHTML()
	})
}

// SetStatus sets the "status" field.
func (u *CommentUpsertOne) SetStatus(v int) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CommentUpsertOne) AddStatus(v int) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateStatus() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateStatus()
	})
}

// SetIsAdminComment sets the "is_admin_comment" field.
func (u *CommentUpsertOne) SetIsAdminComment(v bool) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetIsAdminComment(v)
	})
}

// UpdateIsAdminComment sets the "is_admin_comment" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateIsAdminComment() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIsAdminComment()
	})
}

// SetAllowNotification sets the "allow_notification" field.
func (u *CommentUpsertOne) SetAllowNotification(v bool) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetAllowNotification(v)
	})
}

// UpdateAllowNotification sets the "allow_notification" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateAllowNotification() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAllowNotification()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *CommentUpsertOne) SetUserAgent(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateUserAgent() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *CommentUpsertOne) ClearUserAgent() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUserAgent()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *CommentUpsertOne) SetIPAddress(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateIPAddress() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIPAddress()
	})
}

// SetIPLocation sets the "ip_location" field.
func (u *CommentUpsertOne) SetIPLocation(v string) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetIPLocation(v)
	})
}

// UpdateIPLocation sets the "ip_location" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateIPLocation() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIPLocation()
	})
}

// ClearIPLocation clears the value of the "ip_location" field.
func (u *CommentUpsertOne) ClearIPLocation() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearIPLocation()
	})
}

// SetLikeCount sets the "like_count" field.
func (u *CommentUpsertOne) SetLikeCount(v int) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetLikeCount(v)
	})
}

// AddLikeCount adds v to the "like_count" field.
func (u *CommentUpsertOne) AddLikeCount(v int) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.AddLikeCount(v)
	})
}

// UpdateLikeCount sets the "like_count" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdateLikeCount() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateLikeCount()
	})
}

// SetPinnedAt sets the "pinned_at" field.
func (u *CommentUpsertOne) SetPinnedAt(v time.Time) *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.SetPinnedAt(v)
	})
}

// UpdatePinnedAt sets the "pinned_at" field to the value that was provided on create.
func (u *CommentUpsertOne) UpdatePinnedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.UpdatePinnedAt()
	})
}

// ClearPinnedAt clears the value of the "pinned_at" field.
func (u *CommentUpsertOne) ClearPinnedAt() *CommentUpsertOne {
	return u.Update(func(s *CommentUpsert) {
		s.ClearPinnedAt()
	})
}

// Exec executes the query.
func (u *CommentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CommentUpsertOne) ID(ctx context.Context) (id uint, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CommentUpsertOne) IDX(ctx context.Context) uint {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CommentCreateBulk is the builder for creating many Comment entities in bulk.
type CommentCreateBulk struct {
	config
	err      error
	builders []*CommentCreate
	conflict []sql.ConflictOption
}

// Save creates the Comment entities in the database.
func (ccb *CommentCreateBulk) Save(ctx context.Context) ([]*Comment, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comment, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommentCreateBulk) SaveX(ctx context.Context) []*Comment {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommentCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommentCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CommentCreateBulk) OnConflict(opts ...sql.ConflictOption) *CommentUpsertBulk {
	ccb.conflict = opts
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CommentCreateBulk) OnConflictColumns(columns ...string) *CommentUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CommentUpsertBulk{
		create: ccb,
	}
}

// CommentUpsertBulk is the builder for "upsert"-ing
// a bulk of Comment nodes.
type CommentUpsertBulk struct {
	create *CommentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CommentUpsertBulk) UpdateNewValues() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(comment.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(comment.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CommentUpsertBulk) Ignore() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentUpsertBulk) DoNothing() *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentCreateBulk.OnConflict
// documentation for more info.
func (u *CommentUpsertBulk) Update(set func(*CommentUpsert)) *CommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommentUpsertBulk) SetDeletedAt(v time.Time) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateDeletedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommentUpsertBulk) ClearDeletedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentUpsertBulk) SetUpdatedAt(v time.Time) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateUpdatedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTargetPath sets the "target_path" field.
func (u *CommentUpsertBulk) SetTargetPath(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetTargetPath(v)
	})
}

// UpdateTargetPath sets the "target_path" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateTargetPath() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateTargetPath()
	})
}

// SetTargetTitle sets the "target_title" field.
func (u *CommentUpsertBulk) SetTargetTitle(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetTargetTitle(v)
	})
}

// UpdateTargetTitle sets the "target_title" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateTargetTitle() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateTargetTitle()
	})
}

// ClearTargetTitle clears the value of the "target_title" field.
func (u *CommentUpsertBulk) ClearTargetTitle() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearTargetTitle()
	})
}

// SetUserID sets the "user_id" field.
func (u *CommentUpsertBulk) SetUserID(v uint) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateUserID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *CommentUpsertBulk) ClearUserID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUserID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CommentUpsertBulk) SetParentID(v uint) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateParentID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CommentUpsertBulk) ClearParentID() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearParentID()
	})
}

// SetNickname sets the "nickname" field.
func (u *CommentUpsertBulk) SetNickname(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateNickname() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateNickname()
	})
}

// SetEmail sets the "email" field.
func (u *CommentUpsertBulk) SetEmail(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateEmail() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *CommentUpsertBulk) ClearEmail() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearEmail()
	})
}

// SetEmailMd5 sets the "email_md5" field.
func (u *CommentUpsertBulk) SetEmailMd5(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetEmailMd5(v)
	})
}

// UpdateEmailMd5 sets the "email_md5" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateEmailMd5() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateEmailMd5()
	})
}

// SetWebsite sets the "website" field.
func (u *CommentUpsertBulk) SetWebsite(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetWebsite(v)
	})
}

// UpdateWebsite sets the "website" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateWebsite() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateWebsite()
	})
}

// ClearWebsite clears the value of the "website" field.
func (u *CommentUpsertBulk) ClearWebsite() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearWebsite()
	})
}

// SetContent sets the "content" field.
func (u *CommentUpsertBulk) SetContent(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateContent() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContent()
	})
}

// SetContentHTML sets the "content_html" field.
func (u *CommentUpsertBulk) SetContentHTML(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetContentHTML(v)
	})
}

// UpdateContentHTML sets the "content_html" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateContentHTML() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateContentHTML()
	})
}

// SetStatus sets the "status" field.
func (u *CommentUpsertBulk) SetStatus(v int) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CommentUpsertBulk) AddStatus(v int) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateStatus() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateStatus()
	})
}

// SetIsAdminComment sets the "is_admin_comment" field.
func (u *CommentUpsertBulk) SetIsAdminComment(v bool) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetIsAdminComment(v)
	})
}

// UpdateIsAdminComment sets the "is_admin_comment" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateIsAdminComment() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIsAdminComment()
	})
}

// SetAllowNotification sets the "allow_notification" field.
func (u *CommentUpsertBulk) SetAllowNotification(v bool) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetAllowNotification(v)
	})
}

// UpdateAllowNotification sets the "allow_notification" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateAllowNotification() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateAllowNotification()
	})
}

// SetUserAgent sets the "user_agent" field.
func (u *CommentUpsertBulk) SetUserAgent(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "user_agent" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateUserAgent() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateUserAgent()
	})
}

// ClearUserAgent clears the value of the "user_agent" field.
func (u *CommentUpsertBulk) ClearUserAgent() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearUserAgent()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *CommentUpsertBulk) SetIPAddress(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateIPAddress() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIPAddress()
	})
}

// SetIPLocation sets the "ip_location" field.
func (u *CommentUpsertBulk) SetIPLocation(v string) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetIPLocation(v)
	})
}

// UpdateIPLocation sets the "ip_location" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateIPLocation() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateIPLocation()
	})
}

// ClearIPLocation clears the value of the "ip_location" field.
func (u *CommentUpsertBulk) ClearIPLocation() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearIPLocation()
	})
}

// SetLikeCount sets the "like_count" field.
func (u *CommentUpsertBulk) SetLikeCount(v int) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetLikeCount(v)
	})
}

// AddLikeCount adds v to the "like_count" field.
func (u *CommentUpsertBulk) AddLikeCount(v int) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.AddLikeCount(v)
	})
}

// UpdateLikeCount sets the "like_count" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdateLikeCount() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdateLikeCount()
	})
}

// SetPinnedAt sets the "pinned_at" field.
func (u *CommentUpsertBulk) SetPinnedAt(v time.Time) *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.SetPinnedAt(v)
	})
}

// UpdatePinnedAt sets the "pinned_at" field to the value that was provided on create.
func (u *CommentUpsertBulk) UpdatePinnedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.UpdatePinnedAt()
	})
}

// ClearPinnedAt clears the value of the "pinned_at" field.
func (u *CommentUpsertBulk) ClearPinnedAt() *CommentUpsertBulk {
	return u.Update(func(s *CommentUpsert) {
		s.ClearPinnedAt()
	})
}

// Exec executes the query.
func (u *CommentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CommentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
