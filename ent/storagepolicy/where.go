// Code generated by ent, DO NOT EDIT.

package storagepolicy

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
	"github.com/anzhiyu-c/anheyu-app/pkg/domain/model"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldType, v))
}

// Flag applies equality check predicate on the "flag" field. It's identical to FlagEQ.
func Flag(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldFlag, v))
}

// Server applies equality check predicate on the "server" field. It's identical to ServerEQ.
func Server(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldServer, v))
}

// BucketName applies equality check predicate on the "bucket_name" field. It's identical to BucketNameEQ.
func BucketName(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldBucketName, v))
}

// IsPrivate applies equality check predicate on the "is_private" field. It's identical to IsPrivateEQ.
func IsPrivate(v bool) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldIsPrivate, v))
}

// AccessKey applies equality check predicate on the "access_key" field. It's identical to AccessKeyEQ.
func AccessKey(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldAccessKey, v))
}

// SecretKey applies equality check predicate on the "secret_key" field. It's identical to SecretKeyEQ.
func SecretKey(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldSecretKey, v))
}

// MaxSize applies equality check predicate on the "max_size" field. It's identical to MaxSizeEQ.
func MaxSize(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldMaxSize, v))
}

// BasePath applies equality check predicate on the "base_path" field. It's identical to BasePathEQ.
func BasePath(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldBasePath, v))
}

// VirtualPath applies equality check predicate on the "virtual_path" field. It's identical to VirtualPathEQ.
func VirtualPath(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldVirtualPath, v))
}

// Settings applies equality check predicate on the "settings" field. It's identical to SettingsEQ.
func Settings(v model.StoragePolicySettings) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldSettings, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldNodeID, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldType, v))
}

// FlagEQ applies the EQ predicate on the "flag" field.
func FlagEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldFlag, v))
}

// FlagNEQ applies the NEQ predicate on the "flag" field.
func FlagNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldFlag, v))
}

// FlagIn applies the In predicate on the "flag" field.
func FlagIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldFlag, vs...))
}

// FlagNotIn applies the NotIn predicate on the "flag" field.
func FlagNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldFlag, vs...))
}

// FlagGT applies the GT predicate on the "flag" field.
func FlagGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldFlag, v))
}

// FlagGTE applies the GTE predicate on the "flag" field.
func FlagGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldFlag, v))
}

// FlagLT applies the LT predicate on the "flag" field.
func FlagLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldFlag, v))
}

// FlagLTE applies the LTE predicate on the "flag" field.
func FlagLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldFlag, v))
}

// FlagContains applies the Contains predicate on the "flag" field.
func FlagContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldFlag, v))
}

// FlagHasPrefix applies the HasPrefix predicate on the "flag" field.
func FlagHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldFlag, v))
}

// FlagHasSuffix applies the HasSuffix predicate on the "flag" field.
func FlagHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldFlag, v))
}

// FlagIsNil applies the IsNil predicate on the "flag" field.
func FlagIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldFlag))
}

// FlagNotNil applies the NotNil predicate on the "flag" field.
func FlagNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldFlag))
}

// FlagEqualFold applies the EqualFold predicate on the "flag" field.
func FlagEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldFlag, v))
}

// FlagContainsFold applies the ContainsFold predicate on the "flag" field.
func FlagContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldFlag, v))
}

// ServerEQ applies the EQ predicate on the "server" field.
func ServerEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldServer, v))
}

// ServerNEQ applies the NEQ predicate on the "server" field.
func ServerNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldServer, v))
}

// ServerIn applies the In predicate on the "server" field.
func ServerIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldServer, vs...))
}

// ServerNotIn applies the NotIn predicate on the "server" field.
func ServerNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldServer, vs...))
}

// ServerGT applies the GT predicate on the "server" field.
func ServerGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldServer, v))
}

// ServerGTE applies the GTE predicate on the "server" field.
func ServerGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldServer, v))
}

// ServerLT applies the LT predicate on the "server" field.
func ServerLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldServer, v))
}

// ServerLTE applies the LTE predicate on the "server" field.
func ServerLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldServer, v))
}

// ServerContains applies the Contains predicate on the "server" field.
func ServerContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldServer, v))
}

// ServerHasPrefix applies the HasPrefix predicate on the "server" field.
func ServerHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldServer, v))
}

// ServerHasSuffix applies the HasSuffix predicate on the "server" field.
func ServerHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldServer, v))
}

// ServerIsNil applies the IsNil predicate on the "server" field.
func ServerIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldServer))
}

// ServerNotNil applies the NotNil predicate on the "server" field.
func ServerNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldServer))
}

// ServerEqualFold applies the EqualFold predicate on the "server" field.
func ServerEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldServer, v))
}

// ServerContainsFold applies the ContainsFold predicate on the "server" field.
func ServerContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldServer, v))
}

// BucketNameEQ applies the EQ predicate on the "bucket_name" field.
func BucketNameEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldBucketName, v))
}

// BucketNameNEQ applies the NEQ predicate on the "bucket_name" field.
func BucketNameNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldBucketName, v))
}

// BucketNameIn applies the In predicate on the "bucket_name" field.
func BucketNameIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldBucketName, vs...))
}

// BucketNameNotIn applies the NotIn predicate on the "bucket_name" field.
func BucketNameNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldBucketName, vs...))
}

// BucketNameGT applies the GT predicate on the "bucket_name" field.
func BucketNameGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldBucketName, v))
}

// BucketNameGTE applies the GTE predicate on the "bucket_name" field.
func BucketNameGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldBucketName, v))
}

// BucketNameLT applies the LT predicate on the "bucket_name" field.
func BucketNameLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldBucketName, v))
}

// BucketNameLTE applies the LTE predicate on the "bucket_name" field.
func BucketNameLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldBucketName, v))
}

// BucketNameContains applies the Contains predicate on the "bucket_name" field.
func BucketNameContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldBucketName, v))
}

// BucketNameHasPrefix applies the HasPrefix predicate on the "bucket_name" field.
func BucketNameHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldBucketName, v))
}

// BucketNameHasSuffix applies the HasSuffix predicate on the "bucket_name" field.
func BucketNameHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldBucketName, v))
}

// BucketNameIsNil applies the IsNil predicate on the "bucket_name" field.
func BucketNameIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldBucketName))
}

// BucketNameNotNil applies the NotNil predicate on the "bucket_name" field.
func BucketNameNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldBucketName))
}

// BucketNameEqualFold applies the EqualFold predicate on the "bucket_name" field.
func BucketNameEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldBucketName, v))
}

// BucketNameContainsFold applies the ContainsFold predicate on the "bucket_name" field.
func BucketNameContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldBucketName, v))
}

// IsPrivateEQ applies the EQ predicate on the "is_private" field.
func IsPrivateEQ(v bool) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldIsPrivate, v))
}

// IsPrivateNEQ applies the NEQ predicate on the "is_private" field.
func IsPrivateNEQ(v bool) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldIsPrivate, v))
}

// IsPrivateIsNil applies the IsNil predicate on the "is_private" field.
func IsPrivateIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldIsPrivate))
}

// IsPrivateNotNil applies the NotNil predicate on the "is_private" field.
func IsPrivateNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldIsPrivate))
}

// AccessKeyEQ applies the EQ predicate on the "access_key" field.
func AccessKeyEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldAccessKey, v))
}

// AccessKeyNEQ applies the NEQ predicate on the "access_key" field.
func AccessKeyNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldAccessKey, v))
}

// AccessKeyIn applies the In predicate on the "access_key" field.
func AccessKeyIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldAccessKey, vs...))
}

// AccessKeyNotIn applies the NotIn predicate on the "access_key" field.
func AccessKeyNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldAccessKey, vs...))
}

// AccessKeyGT applies the GT predicate on the "access_key" field.
func AccessKeyGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldAccessKey, v))
}

// AccessKeyGTE applies the GTE predicate on the "access_key" field.
func AccessKeyGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldAccessKey, v))
}

// AccessKeyLT applies the LT predicate on the "access_key" field.
func AccessKeyLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldAccessKey, v))
}

// AccessKeyLTE applies the LTE predicate on the "access_key" field.
func AccessKeyLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldAccessKey, v))
}

// AccessKeyContains applies the Contains predicate on the "access_key" field.
func AccessKeyContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldAccessKey, v))
}

// AccessKeyHasPrefix applies the HasPrefix predicate on the "access_key" field.
func AccessKeyHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldAccessKey, v))
}

// AccessKeyHasSuffix applies the HasSuffix predicate on the "access_key" field.
func AccessKeyHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldAccessKey, v))
}

// AccessKeyIsNil applies the IsNil predicate on the "access_key" field.
func AccessKeyIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldAccessKey))
}

// AccessKeyNotNil applies the NotNil predicate on the "access_key" field.
func AccessKeyNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldAccessKey))
}

// AccessKeyEqualFold applies the EqualFold predicate on the "access_key" field.
func AccessKeyEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldAccessKey, v))
}

// AccessKeyContainsFold applies the ContainsFold predicate on the "access_key" field.
func AccessKeyContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldAccessKey, v))
}

// SecretKeyEQ applies the EQ predicate on the "secret_key" field.
func SecretKeyEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldSecretKey, v))
}

// SecretKeyNEQ applies the NEQ predicate on the "secret_key" field.
func SecretKeyNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldSecretKey, v))
}

// SecretKeyIn applies the In predicate on the "secret_key" field.
func SecretKeyIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldSecretKey, vs...))
}

// SecretKeyNotIn applies the NotIn predicate on the "secret_key" field.
func SecretKeyNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldSecretKey, vs...))
}

// SecretKeyGT applies the GT predicate on the "secret_key" field.
func SecretKeyGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldSecretKey, v))
}

// SecretKeyGTE applies the GTE predicate on the "secret_key" field.
func SecretKeyGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldSecretKey, v))
}

// SecretKeyLT applies the LT predicate on the "secret_key" field.
func SecretKeyLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldSecretKey, v))
}

// SecretKeyLTE applies the LTE predicate on the "secret_key" field.
func SecretKeyLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldSecretKey, v))
}

// SecretKeyContains applies the Contains predicate on the "secret_key" field.
func SecretKeyContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldSecretKey, v))
}

// SecretKeyHasPrefix applies the HasPrefix predicate on the "secret_key" field.
func SecretKeyHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldSecretKey, v))
}

// SecretKeyHasSuffix applies the HasSuffix predicate on the "secret_key" field.
func SecretKeyHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldSecretKey, v))
}

// SecretKeyIsNil applies the IsNil predicate on the "secret_key" field.
func SecretKeyIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldSecretKey))
}

// SecretKeyNotNil applies the NotNil predicate on the "secret_key" field.
func SecretKeyNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldSecretKey))
}

// SecretKeyEqualFold applies the EqualFold predicate on the "secret_key" field.
func SecretKeyEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldSecretKey, v))
}

// SecretKeyContainsFold applies the ContainsFold predicate on the "secret_key" field.
func SecretKeyContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldSecretKey, v))
}

// MaxSizeEQ applies the EQ predicate on the "max_size" field.
func MaxSizeEQ(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldMaxSize, v))
}

// MaxSizeNEQ applies the NEQ predicate on the "max_size" field.
func MaxSizeNEQ(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldMaxSize, v))
}

// MaxSizeIn applies the In predicate on the "max_size" field.
func MaxSizeIn(vs ...int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldMaxSize, vs...))
}

// MaxSizeNotIn applies the NotIn predicate on the "max_size" field.
func MaxSizeNotIn(vs ...int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldMaxSize, vs...))
}

// MaxSizeGT applies the GT predicate on the "max_size" field.
func MaxSizeGT(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldMaxSize, v))
}

// MaxSizeGTE applies the GTE predicate on the "max_size" field.
func MaxSizeGTE(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldMaxSize, v))
}

// MaxSizeLT applies the LT predicate on the "max_size" field.
func MaxSizeLT(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldMaxSize, v))
}

// MaxSizeLTE applies the LTE predicate on the "max_size" field.
func MaxSizeLTE(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldMaxSize, v))
}

// MaxSizeIsNil applies the IsNil predicate on the "max_size" field.
func MaxSizeIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldMaxSize))
}

// MaxSizeNotNil applies the NotNil predicate on the "max_size" field.
func MaxSizeNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldMaxSize))
}

// BasePathEQ applies the EQ predicate on the "base_path" field.
func BasePathEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldBasePath, v))
}

// BasePathNEQ applies the NEQ predicate on the "base_path" field.
func BasePathNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldBasePath, v))
}

// BasePathIn applies the In predicate on the "base_path" field.
func BasePathIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldBasePath, vs...))
}

// BasePathNotIn applies the NotIn predicate on the "base_path" field.
func BasePathNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldBasePath, vs...))
}

// BasePathGT applies the GT predicate on the "base_path" field.
func BasePathGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldBasePath, v))
}

// BasePathGTE applies the GTE predicate on the "base_path" field.
func BasePathGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldBasePath, v))
}

// BasePathLT applies the LT predicate on the "base_path" field.
func BasePathLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldBasePath, v))
}

// BasePathLTE applies the LTE predicate on the "base_path" field.
func BasePathLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldBasePath, v))
}

// BasePathContains applies the Contains predicate on the "base_path" field.
func BasePathContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldBasePath, v))
}

// BasePathHasPrefix applies the HasPrefix predicate on the "base_path" field.
func BasePathHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldBasePath, v))
}

// BasePathHasSuffix applies the HasSuffix predicate on the "base_path" field.
func BasePathHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldBasePath, v))
}

// BasePathIsNil applies the IsNil predicate on the "base_path" field.
func BasePathIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldBasePath))
}

// BasePathNotNil applies the NotNil predicate on the "base_path" field.
func BasePathNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldBasePath))
}

// BasePathEqualFold applies the EqualFold predicate on the "base_path" field.
func BasePathEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldBasePath, v))
}

// BasePathContainsFold applies the ContainsFold predicate on the "base_path" field.
func BasePathContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldBasePath, v))
}

// VirtualPathEQ applies the EQ predicate on the "virtual_path" field.
func VirtualPathEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldVirtualPath, v))
}

// VirtualPathNEQ applies the NEQ predicate on the "virtual_path" field.
func VirtualPathNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldVirtualPath, v))
}

// VirtualPathIn applies the In predicate on the "virtual_path" field.
func VirtualPathIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldVirtualPath, vs...))
}

// VirtualPathNotIn applies the NotIn predicate on the "virtual_path" field.
func VirtualPathNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldVirtualPath, vs...))
}

// VirtualPathGT applies the GT predicate on the "virtual_path" field.
func VirtualPathGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldVirtualPath, v))
}

// VirtualPathGTE applies the GTE predicate on the "virtual_path" field.
func VirtualPathGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldVirtualPath, v))
}

// VirtualPathLT applies the LT predicate on the "virtual_path" field.
func VirtualPathLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldVirtualPath, v))
}

// VirtualPathLTE applies the LTE predicate on the "virtual_path" field.
func VirtualPathLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldVirtualPath, v))
}

// VirtualPathContains applies the Contains predicate on the "virtual_path" field.
func VirtualPathContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldVirtualPath, v))
}

// VirtualPathHasPrefix applies the HasPrefix predicate on the "virtual_path" field.
func VirtualPathHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldVirtualPath, v))
}

// VirtualPathHasSuffix applies the HasSuffix predicate on the "virtual_path" field.
func VirtualPathHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldVirtualPath, v))
}

// VirtualPathIsNil applies the IsNil predicate on the "virtual_path" field.
func VirtualPathIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldVirtualPath))
}

// VirtualPathNotNil applies the NotNil predicate on the "virtual_path" field.
func VirtualPathNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldVirtualPath))
}

// VirtualPathEqualFold applies the EqualFold predicate on the "virtual_path" field.
func VirtualPathEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldVirtualPath, v))
}

// VirtualPathContainsFold applies the ContainsFold predicate on the "virtual_path" field.
func VirtualPathContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldVirtualPath, v))
}

// SettingsEQ applies the EQ predicate on the "settings" field.
func SettingsEQ(v model.StoragePolicySettings) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldSettings, v))
}

// SettingsNEQ applies the NEQ predicate on the "settings" field.
func SettingsNEQ(v model.StoragePolicySettings) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldSettings, v))
}

// SettingsIn applies the In predicate on the "settings" field.
func SettingsIn(vs ...model.StoragePolicySettings) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldSettings, vs...))
}

// SettingsNotIn applies the NotIn predicate on the "settings" field.
func SettingsNotIn(vs ...model.StoragePolicySettings) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldSettings, vs...))
}

// SettingsGT applies the GT predicate on the "settings" field.
func SettingsGT(v model.StoragePolicySettings) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldSettings, v))
}

// SettingsGTE applies the GTE predicate on the "settings" field.
func SettingsGTE(v model.StoragePolicySettings) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldSettings, v))
}

// SettingsLT applies the LT predicate on the "settings" field.
func SettingsLT(v model.StoragePolicySettings) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldSettings, v))
}

// SettingsLTE applies the LTE predicate on the "settings" field.
func SettingsLTE(v model.StoragePolicySettings) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldSettings, v))
}

// SettingsIsNil applies the IsNil predicate on the "settings" field.
func SettingsIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldSettings))
}

// SettingsNotNil applies the NotNil predicate on the "settings" field.
func SettingsNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldSettings))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldNodeID, v))
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldNodeID, v))
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldNodeID, v))
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v uint) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldNodeID, v))
}

// NodeIDIsNil applies the IsNil predicate on the "node_id" field.
func NodeIDIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldNodeID))
}

// NodeIDNotNil applies the NotNil predicate on the "node_id" field.
func NodeIDNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldNodeID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StoragePolicy) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StoragePolicy) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StoragePolicy) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.NotPredicates(p))
}
