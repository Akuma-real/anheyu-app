// Code generated by ent, DO NOT EDIT.

package ent

import (
	"anheyu-app/ent/link"
	"anheyu-app/ent/linkcategory"
	"anheyu-app/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LinkCategoryUpdate is the builder for updating LinkCategory entities.
type LinkCategoryUpdate struct {
	config
	hooks     []Hook
	mutation  *LinkCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LinkCategoryUpdate builder.
func (lcu *LinkCategoryUpdate) Where(ps ...predicate.LinkCategory) *LinkCategoryUpdate {
	lcu.mutation.Where(ps...)
	return lcu
}

// SetName sets the "name" field.
func (lcu *LinkCategoryUpdate) SetName(s string) *LinkCategoryUpdate {
	lcu.mutation.SetName(s)
	return lcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lcu *LinkCategoryUpdate) SetNillableName(s *string) *LinkCategoryUpdate {
	if s != nil {
		lcu.SetName(*s)
	}
	return lcu
}

// SetDescription sets the "description" field.
func (lcu *LinkCategoryUpdate) SetDescription(s string) *LinkCategoryUpdate {
	lcu.mutation.SetDescription(s)
	return lcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lcu *LinkCategoryUpdate) SetNillableDescription(s *string) *LinkCategoryUpdate {
	if s != nil {
		lcu.SetDescription(*s)
	}
	return lcu
}

// ClearDescription clears the value of the "description" field.
func (lcu *LinkCategoryUpdate) ClearDescription() *LinkCategoryUpdate {
	lcu.mutation.ClearDescription()
	return lcu
}

// SetStyle sets the "style" field.
func (lcu *LinkCategoryUpdate) SetStyle(l linkcategory.Style) *LinkCategoryUpdate {
	lcu.mutation.SetStyle(l)
	return lcu
}

// SetNillableStyle sets the "style" field if the given value is not nil.
func (lcu *LinkCategoryUpdate) SetNillableStyle(l *linkcategory.Style) *LinkCategoryUpdate {
	if l != nil {
		lcu.SetStyle(*l)
	}
	return lcu
}

// AddLinkIDs adds the "links" edge to the Link entity by IDs.
func (lcu *LinkCategoryUpdate) AddLinkIDs(ids ...int) *LinkCategoryUpdate {
	lcu.mutation.AddLinkIDs(ids...)
	return lcu
}

// AddLinks adds the "links" edges to the Link entity.
func (lcu *LinkCategoryUpdate) AddLinks(l ...*Link) *LinkCategoryUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lcu.AddLinkIDs(ids...)
}

// Mutation returns the LinkCategoryMutation object of the builder.
func (lcu *LinkCategoryUpdate) Mutation() *LinkCategoryMutation {
	return lcu.mutation
}

// ClearLinks clears all "links" edges to the Link entity.
func (lcu *LinkCategoryUpdate) ClearLinks() *LinkCategoryUpdate {
	lcu.mutation.ClearLinks()
	return lcu
}

// RemoveLinkIDs removes the "links" edge to Link entities by IDs.
func (lcu *LinkCategoryUpdate) RemoveLinkIDs(ids ...int) *LinkCategoryUpdate {
	lcu.mutation.RemoveLinkIDs(ids...)
	return lcu
}

// RemoveLinks removes "links" edges to Link entities.
func (lcu *LinkCategoryUpdate) RemoveLinks(l ...*Link) *LinkCategoryUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lcu.RemoveLinkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lcu *LinkCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lcu.sqlSave, lcu.mutation, lcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lcu *LinkCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := lcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lcu *LinkCategoryUpdate) Exec(ctx context.Context) error {
	_, err := lcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcu *LinkCategoryUpdate) ExecX(ctx context.Context) {
	if err := lcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcu *LinkCategoryUpdate) check() error {
	if v, ok := lcu.mutation.Name(); ok {
		if err := linkcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "LinkCategory.name": %w`, err)}
		}
	}
	if v, ok := lcu.mutation.Style(); ok {
		if err := linkcategory.StyleValidator(v); err != nil {
			return &ValidationError{Name: "style", err: fmt.Errorf(`ent: validator failed for field "LinkCategory.style": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lcu *LinkCategoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LinkCategoryUpdate {
	lcu.modifiers = append(lcu.modifiers, modifiers...)
	return lcu
}

func (lcu *LinkCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(linkcategory.Table, linkcategory.Columns, sqlgraph.NewFieldSpec(linkcategory.FieldID, field.TypeInt))
	if ps := lcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lcu.mutation.Name(); ok {
		_spec.SetField(linkcategory.FieldName, field.TypeString, value)
	}
	if value, ok := lcu.mutation.Description(); ok {
		_spec.SetField(linkcategory.FieldDescription, field.TypeString, value)
	}
	if lcu.mutation.DescriptionCleared() {
		_spec.ClearField(linkcategory.FieldDescription, field.TypeString)
	}
	if value, ok := lcu.mutation.Style(); ok {
		_spec.SetField(linkcategory.FieldStyle, field.TypeEnum, value)
	}
	if lcu.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkcategory.LinksTable,
			Columns: []string{linkcategory.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lcu.mutation.RemovedLinksIDs(); len(nodes) > 0 && !lcu.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkcategory.LinksTable,
			Columns: []string{linkcategory.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lcu.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkcategory.LinksTable,
			Columns: []string{linkcategory.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linkcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lcu.mutation.done = true
	return n, nil
}

// LinkCategoryUpdateOne is the builder for updating a single LinkCategory entity.
type LinkCategoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LinkCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (lcuo *LinkCategoryUpdateOne) SetName(s string) *LinkCategoryUpdateOne {
	lcuo.mutation.SetName(s)
	return lcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lcuo *LinkCategoryUpdateOne) SetNillableName(s *string) *LinkCategoryUpdateOne {
	if s != nil {
		lcuo.SetName(*s)
	}
	return lcuo
}

// SetDescription sets the "description" field.
func (lcuo *LinkCategoryUpdateOne) SetDescription(s string) *LinkCategoryUpdateOne {
	lcuo.mutation.SetDescription(s)
	return lcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lcuo *LinkCategoryUpdateOne) SetNillableDescription(s *string) *LinkCategoryUpdateOne {
	if s != nil {
		lcuo.SetDescription(*s)
	}
	return lcuo
}

// ClearDescription clears the value of the "description" field.
func (lcuo *LinkCategoryUpdateOne) ClearDescription() *LinkCategoryUpdateOne {
	lcuo.mutation.ClearDescription()
	return lcuo
}

// SetStyle sets the "style" field.
func (lcuo *LinkCategoryUpdateOne) SetStyle(l linkcategory.Style) *LinkCategoryUpdateOne {
	lcuo.mutation.SetStyle(l)
	return lcuo
}

// SetNillableStyle sets the "style" field if the given value is not nil.
func (lcuo *LinkCategoryUpdateOne) SetNillableStyle(l *linkcategory.Style) *LinkCategoryUpdateOne {
	if l != nil {
		lcuo.SetStyle(*l)
	}
	return lcuo
}

// AddLinkIDs adds the "links" edge to the Link entity by IDs.
func (lcuo *LinkCategoryUpdateOne) AddLinkIDs(ids ...int) *LinkCategoryUpdateOne {
	lcuo.mutation.AddLinkIDs(ids...)
	return lcuo
}

// AddLinks adds the "links" edges to the Link entity.
func (lcuo *LinkCategoryUpdateOne) AddLinks(l ...*Link) *LinkCategoryUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lcuo.AddLinkIDs(ids...)
}

// Mutation returns the LinkCategoryMutation object of the builder.
func (lcuo *LinkCategoryUpdateOne) Mutation() *LinkCategoryMutation {
	return lcuo.mutation
}

// ClearLinks clears all "links" edges to the Link entity.
func (lcuo *LinkCategoryUpdateOne) ClearLinks() *LinkCategoryUpdateOne {
	lcuo.mutation.ClearLinks()
	return lcuo
}

// RemoveLinkIDs removes the "links" edge to Link entities by IDs.
func (lcuo *LinkCategoryUpdateOne) RemoveLinkIDs(ids ...int) *LinkCategoryUpdateOne {
	lcuo.mutation.RemoveLinkIDs(ids...)
	return lcuo
}

// RemoveLinks removes "links" edges to Link entities.
func (lcuo *LinkCategoryUpdateOne) RemoveLinks(l ...*Link) *LinkCategoryUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lcuo.RemoveLinkIDs(ids...)
}

// Where appends a list predicates to the LinkCategoryUpdate builder.
func (lcuo *LinkCategoryUpdateOne) Where(ps ...predicate.LinkCategory) *LinkCategoryUpdateOne {
	lcuo.mutation.Where(ps...)
	return lcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lcuo *LinkCategoryUpdateOne) Select(field string, fields ...string) *LinkCategoryUpdateOne {
	lcuo.fields = append([]string{field}, fields...)
	return lcuo
}

// Save executes the query and returns the updated LinkCategory entity.
func (lcuo *LinkCategoryUpdateOne) Save(ctx context.Context) (*LinkCategory, error) {
	return withHooks(ctx, lcuo.sqlSave, lcuo.mutation, lcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lcuo *LinkCategoryUpdateOne) SaveX(ctx context.Context) *LinkCategory {
	node, err := lcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lcuo *LinkCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := lcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcuo *LinkCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := lcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcuo *LinkCategoryUpdateOne) check() error {
	if v, ok := lcuo.mutation.Name(); ok {
		if err := linkcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "LinkCategory.name": %w`, err)}
		}
	}
	if v, ok := lcuo.mutation.Style(); ok {
		if err := linkcategory.StyleValidator(v); err != nil {
			return &ValidationError{Name: "style", err: fmt.Errorf(`ent: validator failed for field "LinkCategory.style": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lcuo *LinkCategoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LinkCategoryUpdateOne {
	lcuo.modifiers = append(lcuo.modifiers, modifiers...)
	return lcuo
}

func (lcuo *LinkCategoryUpdateOne) sqlSave(ctx context.Context) (_node *LinkCategory, err error) {
	if err := lcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(linkcategory.Table, linkcategory.Columns, sqlgraph.NewFieldSpec(linkcategory.FieldID, field.TypeInt))
	id, ok := lcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LinkCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, linkcategory.FieldID)
		for _, f := range fields {
			if !linkcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != linkcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lcuo.mutation.Name(); ok {
		_spec.SetField(linkcategory.FieldName, field.TypeString, value)
	}
	if value, ok := lcuo.mutation.Description(); ok {
		_spec.SetField(linkcategory.FieldDescription, field.TypeString, value)
	}
	if lcuo.mutation.DescriptionCleared() {
		_spec.ClearField(linkcategory.FieldDescription, field.TypeString)
	}
	if value, ok := lcuo.mutation.Style(); ok {
		_spec.SetField(linkcategory.FieldStyle, field.TypeEnum, value)
	}
	if lcuo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkcategory.LinksTable,
			Columns: []string{linkcategory.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lcuo.mutation.RemovedLinksIDs(); len(nodes) > 0 && !lcuo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkcategory.LinksTable,
			Columns: []string{linkcategory.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lcuo.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   linkcategory.LinksTable,
			Columns: []string{linkcategory.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(lcuo.modifiers...)
	_node = &LinkCategory{config: lcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{linkcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lcuo.mutation.done = true
	return _node, nil
}
