// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/link"
	"github.com/anzhiyu-c/anheyu-app/ent/linkcategory"
	"github.com/anzhiyu-c/anheyu-app/ent/linktag"
)

// LinkCreate is the builder for creating a Link entity.
type LinkCreate struct {
	config
	mutation *LinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (lc *LinkCreate) SetName(s string) *LinkCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetURL sets the "url" field.
func (lc *LinkCreate) SetURL(s string) *LinkCreate {
	lc.mutation.SetURL(s)
	return lc
}

// SetLogo sets the "logo" field.
func (lc *LinkCreate) SetLogo(s string) *LinkCreate {
	lc.mutation.SetLogo(s)
	return lc
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (lc *LinkCreate) SetNillableLogo(s *string) *LinkCreate {
	if s != nil {
		lc.SetLogo(*s)
	}
	return lc
}

// SetDescription sets the "description" field.
func (lc *LinkCreate) SetDescription(s string) *LinkCreate {
	lc.mutation.SetDescription(s)
	return lc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lc *LinkCreate) SetNillableDescription(s *string) *LinkCreate {
	if s != nil {
		lc.SetDescription(*s)
	}
	return lc
}

// SetStatus sets the "status" field.
func (lc *LinkCreate) SetStatus(l link.Status) *LinkCreate {
	lc.mutation.SetStatus(l)
	return lc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lc *LinkCreate) SetNillableStatus(l *link.Status) *LinkCreate {
	if l != nil {
		lc.SetStatus(*l)
	}
	return lc
}

// SetSiteshot sets the "siteshot" field.
func (lc *LinkCreate) SetSiteshot(s string) *LinkCreate {
	lc.mutation.SetSiteshot(s)
	return lc
}

// SetNillableSiteshot sets the "siteshot" field if the given value is not nil.
func (lc *LinkCreate) SetNillableSiteshot(s *string) *LinkCreate {
	if s != nil {
		lc.SetSiteshot(*s)
	}
	return lc
}

// SetCategoryID sets the "category" edge to the LinkCategory entity by ID.
func (lc *LinkCreate) SetCategoryID(id int) *LinkCreate {
	lc.mutation.SetCategoryID(id)
	return lc
}

// SetCategory sets the "category" edge to the LinkCategory entity.
func (lc *LinkCreate) SetCategory(l *LinkCategory) *LinkCreate {
	return lc.SetCategoryID(l.ID)
}

// AddTagIDs adds the "tags" edge to the LinkTag entity by IDs.
func (lc *LinkCreate) AddTagIDs(ids ...int) *LinkCreate {
	lc.mutation.AddTagIDs(ids...)
	return lc
}

// AddTags adds the "tags" edges to the LinkTag entity.
func (lc *LinkCreate) AddTags(l ...*LinkTag) *LinkCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lc.AddTagIDs(ids...)
}

// Mutation returns the LinkMutation object of the builder.
func (lc *LinkCreate) Mutation() *LinkMutation {
	return lc.mutation
}

// Save creates the Link in the database.
func (lc *LinkCreate) Save(ctx context.Context) (*Link, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LinkCreate) SaveX(ctx context.Context) *Link {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LinkCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LinkCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LinkCreate) defaults() {
	if _, ok := lc.mutation.Status(); !ok {
		v := link.DefaultStatus
		lc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LinkCreate) check() error {
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Link.name"`)}
	}
	if v, ok := lc.mutation.Name(); ok {
		if err := link.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Link.name": %w`, err)}
		}
	}
	if _, ok := lc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Link.url"`)}
	}
	if v, ok := lc.mutation.URL(); ok {
		if err := link.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Link.url": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Link.status"`)}
	}
	if v, ok := lc.mutation.Status(); ok {
		if err := link.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Link.status": %w`, err)}
		}
	}
	if len(lc.mutation.CategoryIDs()) == 0 {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required edge "Link.category"`)}
	}
	return nil
}

func (lc *LinkCreate) sqlSave(ctx context.Context) (*Link, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LinkCreate) createSpec() (*Link, *sqlgraph.CreateSpec) {
	var (
		_node = &Link{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(link.Table, sqlgraph.NewFieldSpec(link.FieldID, field.TypeInt))
	)
	_spec.OnConflict = lc.conflict
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(link.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.URL(); ok {
		_spec.SetField(link.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := lc.mutation.Logo(); ok {
		_spec.SetField(link.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := lc.mutation.Description(); ok {
		_spec.SetField(link.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := lc.mutation.Status(); ok {
		_spec.SetField(link.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := lc.mutation.Siteshot(); ok {
		_spec.SetField(link.FieldSiteshot, field.TypeString, value)
		_node.Siteshot = value
	}
	if nodes := lc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   link.CategoryTable,
			Columns: []string{link.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linkcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.link_category_links = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   link.TagsTable,
			Columns: link.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(linktag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Link.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LinkUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (lc *LinkCreate) OnConflict(opts ...sql.ConflictOption) *LinkUpsertOne {
	lc.conflict = opts
	return &LinkUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LinkCreate) OnConflictColumns(columns ...string) *LinkUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LinkUpsertOne{
		create: lc,
	}
}

type (
	// LinkUpsertOne is the builder for "upsert"-ing
	//  one Link node.
	LinkUpsertOne struct {
		create *LinkCreate
	}

	// LinkUpsert is the "OnConflict" setter.
	LinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *LinkUpsert) SetName(v string) *LinkUpsert {
	u.Set(link.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LinkUpsert) UpdateName() *LinkUpsert {
	u.SetExcluded(link.FieldName)
	return u
}

// SetURL sets the "url" field.
func (u *LinkUpsert) SetURL(v string) *LinkUpsert {
	u.Set(link.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *LinkUpsert) UpdateURL() *LinkUpsert {
	u.SetExcluded(link.FieldURL)
	return u
}

// SetLogo sets the "logo" field.
func (u *LinkUpsert) SetLogo(v string) *LinkUpsert {
	u.Set(link.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *LinkUpsert) UpdateLogo() *LinkUpsert {
	u.SetExcluded(link.FieldLogo)
	return u
}

// ClearLogo clears the value of the "logo" field.
func (u *LinkUpsert) ClearLogo() *LinkUpsert {
	u.SetNull(link.FieldLogo)
	return u
}

// SetDescription sets the "description" field.
func (u *LinkUpsert) SetDescription(v string) *LinkUpsert {
	u.Set(link.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *LinkUpsert) UpdateDescription() *LinkUpsert {
	u.SetExcluded(link.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *LinkUpsert) ClearDescription() *LinkUpsert {
	u.SetNull(link.FieldDescription)
	return u
}

// SetStatus sets the "status" field.
func (u *LinkUpsert) SetStatus(v link.Status) *LinkUpsert {
	u.Set(link.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LinkUpsert) UpdateStatus() *LinkUpsert {
	u.SetExcluded(link.FieldStatus)
	return u
}

// SetSiteshot sets the "siteshot" field.
func (u *LinkUpsert) SetSiteshot(v string) *LinkUpsert {
	u.Set(link.FieldSiteshot, v)
	return u
}

// UpdateSiteshot sets the "siteshot" field to the value that was provided on create.
func (u *LinkUpsert) UpdateSiteshot() *LinkUpsert {
	u.SetExcluded(link.FieldSiteshot)
	return u
}

// ClearSiteshot clears the value of the "siteshot" field.
func (u *LinkUpsert) ClearSiteshot() *LinkUpsert {
	u.SetNull(link.FieldSiteshot)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LinkUpsertOne) UpdateNewValues() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Link.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LinkUpsertOne) Ignore() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LinkUpsertOne) DoNothing() *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LinkCreate.OnConflict
// documentation for more info.
func (u *LinkUpsertOne) Update(set func(*LinkUpsert)) *LinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *LinkUpsertOne) SetName(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateName() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *LinkUpsertOne) SetURL(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateURL() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateURL()
	})
}

// SetLogo sets the "logo" field.
func (u *LinkUpsertOne) SetLogo(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateLogo() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *LinkUpsertOne) ClearLogo() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearLogo()
	})
}

// SetDescription sets the "description" field.
func (u *LinkUpsertOne) SetDescription(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateDescription() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *LinkUpsertOne) ClearDescription() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearDescription()
	})
}

// SetStatus sets the "status" field.
func (u *LinkUpsertOne) SetStatus(v link.Status) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateStatus() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateStatus()
	})
}

// SetSiteshot sets the "siteshot" field.
func (u *LinkUpsertOne) SetSiteshot(v string) *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.SetSiteshot(v)
	})
}

// UpdateSiteshot sets the "siteshot" field to the value that was provided on create.
func (u *LinkUpsertOne) UpdateSiteshot() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateSiteshot()
	})
}

// ClearSiteshot clears the value of the "siteshot" field.
func (u *LinkUpsertOne) ClearSiteshot() *LinkUpsertOne {
	return u.Update(func(s *LinkUpsert) {
		s.ClearSiteshot()
	})
}

// Exec executes the query.
func (u *LinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LinkUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LinkUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LinkCreateBulk is the builder for creating many Link entities in bulk.
type LinkCreateBulk struct {
	config
	err      error
	builders []*LinkCreate
	conflict []sql.ConflictOption
}

// Save creates the Link entities in the database.
func (lcb *LinkCreateBulk) Save(ctx context.Context) ([]*Link, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Link, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LinkCreateBulk) SaveX(ctx context.Context) []*Link {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LinkCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LinkCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Link.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LinkUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (lcb *LinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *LinkUpsertBulk {
	lcb.conflict = opts
	return &LinkUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LinkCreateBulk) OnConflictColumns(columns ...string) *LinkUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LinkUpsertBulk{
		create: lcb,
	}
}

// LinkUpsertBulk is the builder for "upsert"-ing
// a bulk of Link nodes.
type LinkUpsertBulk struct {
	create *LinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LinkUpsertBulk) UpdateNewValues() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Link.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LinkUpsertBulk) Ignore() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LinkUpsertBulk) DoNothing() *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LinkCreateBulk.OnConflict
// documentation for more info.
func (u *LinkUpsertBulk) Update(set func(*LinkUpsert)) *LinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *LinkUpsertBulk) SetName(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateName() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *LinkUpsertBulk) SetURL(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateURL() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateURL()
	})
}

// SetLogo sets the "logo" field.
func (u *LinkUpsertBulk) SetLogo(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateLogo() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateLogo()
	})
}

// ClearLogo clears the value of the "logo" field.
func (u *LinkUpsertBulk) ClearLogo() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearLogo()
	})
}

// SetDescription sets the "description" field.
func (u *LinkUpsertBulk) SetDescription(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateDescription() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *LinkUpsertBulk) ClearDescription() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearDescription()
	})
}

// SetStatus sets the "status" field.
func (u *LinkUpsertBulk) SetStatus(v link.Status) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateStatus() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateStatus()
	})
}

// SetSiteshot sets the "siteshot" field.
func (u *LinkUpsertBulk) SetSiteshot(v string) *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.SetSiteshot(v)
	})
}

// UpdateSiteshot sets the "siteshot" field to the value that was provided on create.
func (u *LinkUpsertBulk) UpdateSiteshot() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.UpdateSiteshot()
	})
}

// ClearSiteshot clears the value of the "siteshot" field.
func (u *LinkUpsertBulk) ClearSiteshot() *LinkUpsertBulk {
	return u.Update(func(s *LinkUpsert) {
		s.ClearSiteshot()
	})
}

// Exec executes the query.
func (u *LinkUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
