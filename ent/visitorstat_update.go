// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
	"github.com/anzhiyu-c/anheyu-app/ent/visitorstat"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VisitorStatUpdate is the builder for updating VisitorStat entities.
type VisitorStatUpdate struct {
	config
	hooks     []Hook
	mutation  *VisitorStatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VisitorStatUpdate builder.
func (vsu *VisitorStatUpdate) Where(ps ...predicate.VisitorStat) *VisitorStatUpdate {
	vsu.mutation.Where(ps...)
	return vsu
}

// SetUpdatedAt sets the "updated_at" field.
func (vsu *VisitorStatUpdate) SetUpdatedAt(t time.Time) *VisitorStatUpdate {
	vsu.mutation.SetUpdatedAt(t)
	return vsu
}

// SetDate sets the "date" field.
func (vsu *VisitorStatUpdate) SetDate(t time.Time) *VisitorStatUpdate {
	vsu.mutation.SetDate(t)
	return vsu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (vsu *VisitorStatUpdate) SetNillableDate(t *time.Time) *VisitorStatUpdate {
	if t != nil {
		vsu.SetDate(*t)
	}
	return vsu
}

// SetUniqueVisitors sets the "unique_visitors" field.
func (vsu *VisitorStatUpdate) SetUniqueVisitors(i int64) *VisitorStatUpdate {
	vsu.mutation.ResetUniqueVisitors()
	vsu.mutation.SetUniqueVisitors(i)
	return vsu
}

// SetNillableUniqueVisitors sets the "unique_visitors" field if the given value is not nil.
func (vsu *VisitorStatUpdate) SetNillableUniqueVisitors(i *int64) *VisitorStatUpdate {
	if i != nil {
		vsu.SetUniqueVisitors(*i)
	}
	return vsu
}

// AddUniqueVisitors adds i to the "unique_visitors" field.
func (vsu *VisitorStatUpdate) AddUniqueVisitors(i int64) *VisitorStatUpdate {
	vsu.mutation.AddUniqueVisitors(i)
	return vsu
}

// SetTotalViews sets the "total_views" field.
func (vsu *VisitorStatUpdate) SetTotalViews(i int64) *VisitorStatUpdate {
	vsu.mutation.ResetTotalViews()
	vsu.mutation.SetTotalViews(i)
	return vsu
}

// SetNillableTotalViews sets the "total_views" field if the given value is not nil.
func (vsu *VisitorStatUpdate) SetNillableTotalViews(i *int64) *VisitorStatUpdate {
	if i != nil {
		vsu.SetTotalViews(*i)
	}
	return vsu
}

// AddTotalViews adds i to the "total_views" field.
func (vsu *VisitorStatUpdate) AddTotalViews(i int64) *VisitorStatUpdate {
	vsu.mutation.AddTotalViews(i)
	return vsu
}

// SetPageViews sets the "page_views" field.
func (vsu *VisitorStatUpdate) SetPageViews(i int64) *VisitorStatUpdate {
	vsu.mutation.ResetPageViews()
	vsu.mutation.SetPageViews(i)
	return vsu
}

// SetNillablePageViews sets the "page_views" field if the given value is not nil.
func (vsu *VisitorStatUpdate) SetNillablePageViews(i *int64) *VisitorStatUpdate {
	if i != nil {
		vsu.SetPageViews(*i)
	}
	return vsu
}

// AddPageViews adds i to the "page_views" field.
func (vsu *VisitorStatUpdate) AddPageViews(i int64) *VisitorStatUpdate {
	vsu.mutation.AddPageViews(i)
	return vsu
}

// SetBounceCount sets the "bounce_count" field.
func (vsu *VisitorStatUpdate) SetBounceCount(i int64) *VisitorStatUpdate {
	vsu.mutation.ResetBounceCount()
	vsu.mutation.SetBounceCount(i)
	return vsu
}

// SetNillableBounceCount sets the "bounce_count" field if the given value is not nil.
func (vsu *VisitorStatUpdate) SetNillableBounceCount(i *int64) *VisitorStatUpdate {
	if i != nil {
		vsu.SetBounceCount(*i)
	}
	return vsu
}

// AddBounceCount adds i to the "bounce_count" field.
func (vsu *VisitorStatUpdate) AddBounceCount(i int64) *VisitorStatUpdate {
	vsu.mutation.AddBounceCount(i)
	return vsu
}

// Mutation returns the VisitorStatMutation object of the builder.
func (vsu *VisitorStatUpdate) Mutation() *VisitorStatMutation {
	return vsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vsu *VisitorStatUpdate) Save(ctx context.Context) (int, error) {
	vsu.defaults()
	return withHooks(ctx, vsu.sqlSave, vsu.mutation, vsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsu *VisitorStatUpdate) SaveX(ctx context.Context) int {
	affected, err := vsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vsu *VisitorStatUpdate) Exec(ctx context.Context) error {
	_, err := vsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsu *VisitorStatUpdate) ExecX(ctx context.Context) {
	if err := vsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsu *VisitorStatUpdate) defaults() {
	if _, ok := vsu.mutation.UpdatedAt(); !ok {
		v := visitorstat.UpdateDefaultUpdatedAt()
		vsu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vsu *VisitorStatUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VisitorStatUpdate {
	vsu.modifiers = append(vsu.modifiers, modifiers...)
	return vsu
}

func (vsu *VisitorStatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(visitorstat.Table, visitorstat.Columns, sqlgraph.NewFieldSpec(visitorstat.FieldID, field.TypeUint))
	if ps := vsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vsu.mutation.UpdatedAt(); ok {
		_spec.SetField(visitorstat.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vsu.mutation.Date(); ok {
		_spec.SetField(visitorstat.FieldDate, field.TypeTime, value)
	}
	if value, ok := vsu.mutation.UniqueVisitors(); ok {
		_spec.SetField(visitorstat.FieldUniqueVisitors, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.AddedUniqueVisitors(); ok {
		_spec.AddField(visitorstat.FieldUniqueVisitors, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.TotalViews(); ok {
		_spec.SetField(visitorstat.FieldTotalViews, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.AddedTotalViews(); ok {
		_spec.AddField(visitorstat.FieldTotalViews, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.PageViews(); ok {
		_spec.SetField(visitorstat.FieldPageViews, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.AddedPageViews(); ok {
		_spec.AddField(visitorstat.FieldPageViews, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.BounceCount(); ok {
		_spec.SetField(visitorstat.FieldBounceCount, field.TypeInt64, value)
	}
	if value, ok := vsu.mutation.AddedBounceCount(); ok {
		_spec.AddField(visitorstat.FieldBounceCount, field.TypeInt64, value)
	}
	_spec.AddModifiers(vsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitorstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vsu.mutation.done = true
	return n, nil
}

// VisitorStatUpdateOne is the builder for updating a single VisitorStat entity.
type VisitorStatUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VisitorStatMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (vsuo *VisitorStatUpdateOne) SetUpdatedAt(t time.Time) *VisitorStatUpdateOne {
	vsuo.mutation.SetUpdatedAt(t)
	return vsuo
}

// SetDate sets the "date" field.
func (vsuo *VisitorStatUpdateOne) SetDate(t time.Time) *VisitorStatUpdateOne {
	vsuo.mutation.SetDate(t)
	return vsuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (vsuo *VisitorStatUpdateOne) SetNillableDate(t *time.Time) *VisitorStatUpdateOne {
	if t != nil {
		vsuo.SetDate(*t)
	}
	return vsuo
}

// SetUniqueVisitors sets the "unique_visitors" field.
func (vsuo *VisitorStatUpdateOne) SetUniqueVisitors(i int64) *VisitorStatUpdateOne {
	vsuo.mutation.ResetUniqueVisitors()
	vsuo.mutation.SetUniqueVisitors(i)
	return vsuo
}

// SetNillableUniqueVisitors sets the "unique_visitors" field if the given value is not nil.
func (vsuo *VisitorStatUpdateOne) SetNillableUniqueVisitors(i *int64) *VisitorStatUpdateOne {
	if i != nil {
		vsuo.SetUniqueVisitors(*i)
	}
	return vsuo
}

// AddUniqueVisitors adds i to the "unique_visitors" field.
func (vsuo *VisitorStatUpdateOne) AddUniqueVisitors(i int64) *VisitorStatUpdateOne {
	vsuo.mutation.AddUniqueVisitors(i)
	return vsuo
}

// SetTotalViews sets the "total_views" field.
func (vsuo *VisitorStatUpdateOne) SetTotalViews(i int64) *VisitorStatUpdateOne {
	vsuo.mutation.ResetTotalViews()
	vsuo.mutation.SetTotalViews(i)
	return vsuo
}

// SetNillableTotalViews sets the "total_views" field if the given value is not nil.
func (vsuo *VisitorStatUpdateOne) SetNillableTotalViews(i *int64) *VisitorStatUpdateOne {
	if i != nil {
		vsuo.SetTotalViews(*i)
	}
	return vsuo
}

// AddTotalViews adds i to the "total_views" field.
func (vsuo *VisitorStatUpdateOne) AddTotalViews(i int64) *VisitorStatUpdateOne {
	vsuo.mutation.AddTotalViews(i)
	return vsuo
}

// SetPageViews sets the "page_views" field.
func (vsuo *VisitorStatUpdateOne) SetPageViews(i int64) *VisitorStatUpdateOne {
	vsuo.mutation.ResetPageViews()
	vsuo.mutation.SetPageViews(i)
	return vsuo
}

// SetNillablePageViews sets the "page_views" field if the given value is not nil.
func (vsuo *VisitorStatUpdateOne) SetNillablePageViews(i *int64) *VisitorStatUpdateOne {
	if i != nil {
		vsuo.SetPageViews(*i)
	}
	return vsuo
}

// AddPageViews adds i to the "page_views" field.
func (vsuo *VisitorStatUpdateOne) AddPageViews(i int64) *VisitorStatUpdateOne {
	vsuo.mutation.AddPageViews(i)
	return vsuo
}

// SetBounceCount sets the "bounce_count" field.
func (vsuo *VisitorStatUpdateOne) SetBounceCount(i int64) *VisitorStatUpdateOne {
	vsuo.mutation.ResetBounceCount()
	vsuo.mutation.SetBounceCount(i)
	return vsuo
}

// SetNillableBounceCount sets the "bounce_count" field if the given value is not nil.
func (vsuo *VisitorStatUpdateOne) SetNillableBounceCount(i *int64) *VisitorStatUpdateOne {
	if i != nil {
		vsuo.SetBounceCount(*i)
	}
	return vsuo
}

// AddBounceCount adds i to the "bounce_count" field.
func (vsuo *VisitorStatUpdateOne) AddBounceCount(i int64) *VisitorStatUpdateOne {
	vsuo.mutation.AddBounceCount(i)
	return vsuo
}

// Mutation returns the VisitorStatMutation object of the builder.
func (vsuo *VisitorStatUpdateOne) Mutation() *VisitorStatMutation {
	return vsuo.mutation
}

// Where appends a list predicates to the VisitorStatUpdate builder.
func (vsuo *VisitorStatUpdateOne) Where(ps ...predicate.VisitorStat) *VisitorStatUpdateOne {
	vsuo.mutation.Where(ps...)
	return vsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vsuo *VisitorStatUpdateOne) Select(field string, fields ...string) *VisitorStatUpdateOne {
	vsuo.fields = append([]string{field}, fields...)
	return vsuo
}

// Save executes the query and returns the updated VisitorStat entity.
func (vsuo *VisitorStatUpdateOne) Save(ctx context.Context) (*VisitorStat, error) {
	vsuo.defaults()
	return withHooks(ctx, vsuo.sqlSave, vsuo.mutation, vsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsuo *VisitorStatUpdateOne) SaveX(ctx context.Context) *VisitorStat {
	node, err := vsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vsuo *VisitorStatUpdateOne) Exec(ctx context.Context) error {
	_, err := vsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsuo *VisitorStatUpdateOne) ExecX(ctx context.Context) {
	if err := vsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsuo *VisitorStatUpdateOne) defaults() {
	if _, ok := vsuo.mutation.UpdatedAt(); !ok {
		v := visitorstat.UpdateDefaultUpdatedAt()
		vsuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vsuo *VisitorStatUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VisitorStatUpdateOne {
	vsuo.modifiers = append(vsuo.modifiers, modifiers...)
	return vsuo
}

func (vsuo *VisitorStatUpdateOne) sqlSave(ctx context.Context) (_node *VisitorStat, err error) {
	_spec := sqlgraph.NewUpdateSpec(visitorstat.Table, visitorstat.Columns, sqlgraph.NewFieldSpec(visitorstat.FieldID, field.TypeUint))
	id, ok := vsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VisitorStat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, visitorstat.FieldID)
		for _, f := range fields {
			if !visitorstat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != visitorstat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(visitorstat.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vsuo.mutation.Date(); ok {
		_spec.SetField(visitorstat.FieldDate, field.TypeTime, value)
	}
	if value, ok := vsuo.mutation.UniqueVisitors(); ok {
		_spec.SetField(visitorstat.FieldUniqueVisitors, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.AddedUniqueVisitors(); ok {
		_spec.AddField(visitorstat.FieldUniqueVisitors, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.TotalViews(); ok {
		_spec.SetField(visitorstat.FieldTotalViews, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.AddedTotalViews(); ok {
		_spec.AddField(visitorstat.FieldTotalViews, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.PageViews(); ok {
		_spec.SetField(visitorstat.FieldPageViews, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.AddedPageViews(); ok {
		_spec.AddField(visitorstat.FieldPageViews, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.BounceCount(); ok {
		_spec.SetField(visitorstat.FieldBounceCount, field.TypeInt64, value)
	}
	if value, ok := vsuo.mutation.AddedBounceCount(); ok {
		_spec.AddField(visitorstat.FieldBounceCount, field.TypeInt64, value)
	}
	_spec.AddModifiers(vsuo.modifiers...)
	_node = &VisitorStat{config: vsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitorstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vsuo.mutation.done = true
	return _node, nil
}
