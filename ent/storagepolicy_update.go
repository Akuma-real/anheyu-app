// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
	"github.com/anzhiyu-c/anheyu-app/ent/storagepolicy"
	"github.com/anzhiyu-c/anheyu-app/pkg/domain/model"
)

// StoragePolicyUpdate is the builder for updating StoragePolicy entities.
type StoragePolicyUpdate struct {
	config
	hooks     []Hook
	mutation  *StoragePolicyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StoragePolicyUpdate builder.
func (spu *StoragePolicyUpdate) Where(ps ...predicate.StoragePolicy) *StoragePolicyUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetDeletedAt sets the "deleted_at" field.
func (spu *StoragePolicyUpdate) SetDeletedAt(t time.Time) *StoragePolicyUpdate {
	spu.mutation.SetDeletedAt(t)
	return spu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableDeletedAt(t *time.Time) *StoragePolicyUpdate {
	if t != nil {
		spu.SetDeletedAt(*t)
	}
	return spu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spu *StoragePolicyUpdate) ClearDeletedAt() *StoragePolicyUpdate {
	spu.mutation.ClearDeletedAt()
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *StoragePolicyUpdate) SetUpdatedAt(t time.Time) *StoragePolicyUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetName sets the "name" field.
func (spu *StoragePolicyUpdate) SetName(s string) *StoragePolicyUpdate {
	spu.mutation.SetName(s)
	return spu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableName(s *string) *StoragePolicyUpdate {
	if s != nil {
		spu.SetName(*s)
	}
	return spu
}

// SetType sets the "type" field.
func (spu *StoragePolicyUpdate) SetType(s string) *StoragePolicyUpdate {
	spu.mutation.SetType(s)
	return spu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableType(s *string) *StoragePolicyUpdate {
	if s != nil {
		spu.SetType(*s)
	}
	return spu
}

// SetFlag sets the "flag" field.
func (spu *StoragePolicyUpdate) SetFlag(s string) *StoragePolicyUpdate {
	spu.mutation.SetFlag(s)
	return spu
}

// SetNillableFlag sets the "flag" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableFlag(s *string) *StoragePolicyUpdate {
	if s != nil {
		spu.SetFlag(*s)
	}
	return spu
}

// ClearFlag clears the value of the "flag" field.
func (spu *StoragePolicyUpdate) ClearFlag() *StoragePolicyUpdate {
	spu.mutation.ClearFlag()
	return spu
}

// SetServer sets the "server" field.
func (spu *StoragePolicyUpdate) SetServer(s string) *StoragePolicyUpdate {
	spu.mutation.SetServer(s)
	return spu
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableServer(s *string) *StoragePolicyUpdate {
	if s != nil {
		spu.SetServer(*s)
	}
	return spu
}

// ClearServer clears the value of the "server" field.
func (spu *StoragePolicyUpdate) ClearServer() *StoragePolicyUpdate {
	spu.mutation.ClearServer()
	return spu
}

// SetBucketName sets the "bucket_name" field.
func (spu *StoragePolicyUpdate) SetBucketName(s string) *StoragePolicyUpdate {
	spu.mutation.SetBucketName(s)
	return spu
}

// SetNillableBucketName sets the "bucket_name" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableBucketName(s *string) *StoragePolicyUpdate {
	if s != nil {
		spu.SetBucketName(*s)
	}
	return spu
}

// ClearBucketName clears the value of the "bucket_name" field.
func (spu *StoragePolicyUpdate) ClearBucketName() *StoragePolicyUpdate {
	spu.mutation.ClearBucketName()
	return spu
}

// SetIsPrivate sets the "is_private" field.
func (spu *StoragePolicyUpdate) SetIsPrivate(b bool) *StoragePolicyUpdate {
	spu.mutation.SetIsPrivate(b)
	return spu
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableIsPrivate(b *bool) *StoragePolicyUpdate {
	if b != nil {
		spu.SetIsPrivate(*b)
	}
	return spu
}

// ClearIsPrivate clears the value of the "is_private" field.
func (spu *StoragePolicyUpdate) ClearIsPrivate() *StoragePolicyUpdate {
	spu.mutation.ClearIsPrivate()
	return spu
}

// SetAccessKey sets the "access_key" field.
func (spu *StoragePolicyUpdate) SetAccessKey(s string) *StoragePolicyUpdate {
	spu.mutation.SetAccessKey(s)
	return spu
}

// SetNillableAccessKey sets the "access_key" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableAccessKey(s *string) *StoragePolicyUpdate {
	if s != nil {
		spu.SetAccessKey(*s)
	}
	return spu
}

// ClearAccessKey clears the value of the "access_key" field.
func (spu *StoragePolicyUpdate) ClearAccessKey() *StoragePolicyUpdate {
	spu.mutation.ClearAccessKey()
	return spu
}

// SetSecretKey sets the "secret_key" field.
func (spu *StoragePolicyUpdate) SetSecretKey(s string) *StoragePolicyUpdate {
	spu.mutation.SetSecretKey(s)
	return spu
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableSecretKey(s *string) *StoragePolicyUpdate {
	if s != nil {
		spu.SetSecretKey(*s)
	}
	return spu
}

// ClearSecretKey clears the value of the "secret_key" field.
func (spu *StoragePolicyUpdate) ClearSecretKey() *StoragePolicyUpdate {
	spu.mutation.ClearSecretKey()
	return spu
}

// SetMaxSize sets the "max_size" field.
func (spu *StoragePolicyUpdate) SetMaxSize(i int64) *StoragePolicyUpdate {
	spu.mutation.ResetMaxSize()
	spu.mutation.SetMaxSize(i)
	return spu
}

// SetNillableMaxSize sets the "max_size" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableMaxSize(i *int64) *StoragePolicyUpdate {
	if i != nil {
		spu.SetMaxSize(*i)
	}
	return spu
}

// AddMaxSize adds i to the "max_size" field.
func (spu *StoragePolicyUpdate) AddMaxSize(i int64) *StoragePolicyUpdate {
	spu.mutation.AddMaxSize(i)
	return spu
}

// ClearMaxSize clears the value of the "max_size" field.
func (spu *StoragePolicyUpdate) ClearMaxSize() *StoragePolicyUpdate {
	spu.mutation.ClearMaxSize()
	return spu
}

// SetBasePath sets the "base_path" field.
func (spu *StoragePolicyUpdate) SetBasePath(s string) *StoragePolicyUpdate {
	spu.mutation.SetBasePath(s)
	return spu
}

// SetNillableBasePath sets the "base_path" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableBasePath(s *string) *StoragePolicyUpdate {
	if s != nil {
		spu.SetBasePath(*s)
	}
	return spu
}

// ClearBasePath clears the value of the "base_path" field.
func (spu *StoragePolicyUpdate) ClearBasePath() *StoragePolicyUpdate {
	spu.mutation.ClearBasePath()
	return spu
}

// SetVirtualPath sets the "virtual_path" field.
func (spu *StoragePolicyUpdate) SetVirtualPath(s string) *StoragePolicyUpdate {
	spu.mutation.SetVirtualPath(s)
	return spu
}

// SetNillableVirtualPath sets the "virtual_path" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableVirtualPath(s *string) *StoragePolicyUpdate {
	if s != nil {
		spu.SetVirtualPath(*s)
	}
	return spu
}

// ClearVirtualPath clears the value of the "virtual_path" field.
func (spu *StoragePolicyUpdate) ClearVirtualPath() *StoragePolicyUpdate {
	spu.mutation.ClearVirtualPath()
	return spu
}

// SetSettings sets the "settings" field.
func (spu *StoragePolicyUpdate) SetSettings(mps model.StoragePolicySettings) *StoragePolicyUpdate {
	spu.mutation.SetSettings(mps)
	return spu
}

// ClearSettings clears the value of the "settings" field.
func (spu *StoragePolicyUpdate) ClearSettings() *StoragePolicyUpdate {
	spu.mutation.ClearSettings()
	return spu
}

// SetNodeID sets the "node_id" field.
func (spu *StoragePolicyUpdate) SetNodeID(u uint) *StoragePolicyUpdate {
	spu.mutation.ResetNodeID()
	spu.mutation.SetNodeID(u)
	return spu
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (spu *StoragePolicyUpdate) SetNillableNodeID(u *uint) *StoragePolicyUpdate {
	if u != nil {
		spu.SetNodeID(*u)
	}
	return spu
}

// AddNodeID adds u to the "node_id" field.
func (spu *StoragePolicyUpdate) AddNodeID(u int) *StoragePolicyUpdate {
	spu.mutation.AddNodeID(u)
	return spu
}

// ClearNodeID clears the value of the "node_id" field.
func (spu *StoragePolicyUpdate) ClearNodeID() *StoragePolicyUpdate {
	spu.mutation.ClearNodeID()
	return spu
}

// Mutation returns the StoragePolicyMutation object of the builder.
func (spu *StoragePolicyUpdate) Mutation() *StoragePolicyMutation {
	return spu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *StoragePolicyUpdate) Save(ctx context.Context) (int, error) {
	if err := spu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *StoragePolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *StoragePolicyUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *StoragePolicyUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *StoragePolicyUpdate) defaults() error {
	if _, ok := spu.mutation.UpdatedAt(); !ok {
		if storagepolicy.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized storagepolicy.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := storagepolicy.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (spu *StoragePolicyUpdate) check() error {
	if v, ok := spu.mutation.Name(); ok {
		if err := storagepolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.name": %w`, err)}
		}
	}
	if v, ok := spu.mutation.GetType(); ok {
		if err := storagepolicy.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.type": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Flag(); ok {
		if err := storagepolicy.FlagValidator(v); err != nil {
			return &ValidationError{Name: "flag", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.flag": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Server(); ok {
		if err := storagepolicy.ServerValidator(v); err != nil {
			return &ValidationError{Name: "server", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.server": %w`, err)}
		}
	}
	if v, ok := spu.mutation.BucketName(); ok {
		if err := storagepolicy.BucketNameValidator(v); err != nil {
			return &ValidationError{Name: "bucket_name", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.bucket_name": %w`, err)}
		}
	}
	if v, ok := spu.mutation.BasePath(); ok {
		if err := storagepolicy.BasePathValidator(v); err != nil {
			return &ValidationError{Name: "base_path", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.base_path": %w`, err)}
		}
	}
	if v, ok := spu.mutation.VirtualPath(); ok {
		if err := storagepolicy.VirtualPathValidator(v); err != nil {
			return &ValidationError{Name: "virtual_path", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.virtual_path": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spu *StoragePolicyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StoragePolicyUpdate {
	spu.modifiers = append(spu.modifiers, modifiers...)
	return spu
}

func (spu *StoragePolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(storagepolicy.Table, storagepolicy.Columns, sqlgraph.NewFieldSpec(storagepolicy.FieldID, field.TypeUint))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.DeletedAt(); ok {
		_spec.SetField(storagepolicy.FieldDeletedAt, field.TypeTime, value)
	}
	if spu.mutation.DeletedAtCleared() {
		_spec.ClearField(storagepolicy.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(storagepolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spu.mutation.Name(); ok {
		_spec.SetField(storagepolicy.FieldName, field.TypeString, value)
	}
	if value, ok := spu.mutation.GetType(); ok {
		_spec.SetField(storagepolicy.FieldType, field.TypeString, value)
	}
	if value, ok := spu.mutation.Flag(); ok {
		_spec.SetField(storagepolicy.FieldFlag, field.TypeString, value)
	}
	if spu.mutation.FlagCleared() {
		_spec.ClearField(storagepolicy.FieldFlag, field.TypeString)
	}
	if value, ok := spu.mutation.Server(); ok {
		_spec.SetField(storagepolicy.FieldServer, field.TypeString, value)
	}
	if spu.mutation.ServerCleared() {
		_spec.ClearField(storagepolicy.FieldServer, field.TypeString)
	}
	if value, ok := spu.mutation.BucketName(); ok {
		_spec.SetField(storagepolicy.FieldBucketName, field.TypeString, value)
	}
	if spu.mutation.BucketNameCleared() {
		_spec.ClearField(storagepolicy.FieldBucketName, field.TypeString)
	}
	if value, ok := spu.mutation.IsPrivate(); ok {
		_spec.SetField(storagepolicy.FieldIsPrivate, field.TypeBool, value)
	}
	if spu.mutation.IsPrivateCleared() {
		_spec.ClearField(storagepolicy.FieldIsPrivate, field.TypeBool)
	}
	if value, ok := spu.mutation.AccessKey(); ok {
		_spec.SetField(storagepolicy.FieldAccessKey, field.TypeString, value)
	}
	if spu.mutation.AccessKeyCleared() {
		_spec.ClearField(storagepolicy.FieldAccessKey, field.TypeString)
	}
	if value, ok := spu.mutation.SecretKey(); ok {
		_spec.SetField(storagepolicy.FieldSecretKey, field.TypeString, value)
	}
	if spu.mutation.SecretKeyCleared() {
		_spec.ClearField(storagepolicy.FieldSecretKey, field.TypeString)
	}
	if value, ok := spu.mutation.MaxSize(); ok {
		_spec.SetField(storagepolicy.FieldMaxSize, field.TypeInt64, value)
	}
	if value, ok := spu.mutation.AddedMaxSize(); ok {
		_spec.AddField(storagepolicy.FieldMaxSize, field.TypeInt64, value)
	}
	if spu.mutation.MaxSizeCleared() {
		_spec.ClearField(storagepolicy.FieldMaxSize, field.TypeInt64)
	}
	if value, ok := spu.mutation.BasePath(); ok {
		_spec.SetField(storagepolicy.FieldBasePath, field.TypeString, value)
	}
	if spu.mutation.BasePathCleared() {
		_spec.ClearField(storagepolicy.FieldBasePath, field.TypeString)
	}
	if value, ok := spu.mutation.VirtualPath(); ok {
		_spec.SetField(storagepolicy.FieldVirtualPath, field.TypeString, value)
	}
	if spu.mutation.VirtualPathCleared() {
		_spec.ClearField(storagepolicy.FieldVirtualPath, field.TypeString)
	}
	if value, ok := spu.mutation.Settings(); ok {
		_spec.SetField(storagepolicy.FieldSettings, field.TypeOther, value)
	}
	if spu.mutation.SettingsCleared() {
		_spec.ClearField(storagepolicy.FieldSettings, field.TypeOther)
	}
	if value, ok := spu.mutation.NodeID(); ok {
		_spec.SetField(storagepolicy.FieldNodeID, field.TypeUint, value)
	}
	if value, ok := spu.mutation.AddedNodeID(); ok {
		_spec.AddField(storagepolicy.FieldNodeID, field.TypeUint, value)
	}
	if spu.mutation.NodeIDCleared() {
		_spec.ClearField(storagepolicy.FieldNodeID, field.TypeUint)
	}
	_spec.AddModifiers(spu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storagepolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// StoragePolicyUpdateOne is the builder for updating a single StoragePolicy entity.
type StoragePolicyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StoragePolicyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (spuo *StoragePolicyUpdateOne) SetDeletedAt(t time.Time) *StoragePolicyUpdateOne {
	spuo.mutation.SetDeletedAt(t)
	return spuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableDeletedAt(t *time.Time) *StoragePolicyUpdateOne {
	if t != nil {
		spuo.SetDeletedAt(*t)
	}
	return spuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spuo *StoragePolicyUpdateOne) ClearDeletedAt() *StoragePolicyUpdateOne {
	spuo.mutation.ClearDeletedAt()
	return spuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *StoragePolicyUpdateOne) SetUpdatedAt(t time.Time) *StoragePolicyUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetName sets the "name" field.
func (spuo *StoragePolicyUpdateOne) SetName(s string) *StoragePolicyUpdateOne {
	spuo.mutation.SetName(s)
	return spuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableName(s *string) *StoragePolicyUpdateOne {
	if s != nil {
		spuo.SetName(*s)
	}
	return spuo
}

// SetType sets the "type" field.
func (spuo *StoragePolicyUpdateOne) SetType(s string) *StoragePolicyUpdateOne {
	spuo.mutation.SetType(s)
	return spuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableType(s *string) *StoragePolicyUpdateOne {
	if s != nil {
		spuo.SetType(*s)
	}
	return spuo
}

// SetFlag sets the "flag" field.
func (spuo *StoragePolicyUpdateOne) SetFlag(s string) *StoragePolicyUpdateOne {
	spuo.mutation.SetFlag(s)
	return spuo
}

// SetNillableFlag sets the "flag" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableFlag(s *string) *StoragePolicyUpdateOne {
	if s != nil {
		spuo.SetFlag(*s)
	}
	return spuo
}

// ClearFlag clears the value of the "flag" field.
func (spuo *StoragePolicyUpdateOne) ClearFlag() *StoragePolicyUpdateOne {
	spuo.mutation.ClearFlag()
	return spuo
}

// SetServer sets the "server" field.
func (spuo *StoragePolicyUpdateOne) SetServer(s string) *StoragePolicyUpdateOne {
	spuo.mutation.SetServer(s)
	return spuo
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableServer(s *string) *StoragePolicyUpdateOne {
	if s != nil {
		spuo.SetServer(*s)
	}
	return spuo
}

// ClearServer clears the value of the "server" field.
func (spuo *StoragePolicyUpdateOne) ClearServer() *StoragePolicyUpdateOne {
	spuo.mutation.ClearServer()
	return spuo
}

// SetBucketName sets the "bucket_name" field.
func (spuo *StoragePolicyUpdateOne) SetBucketName(s string) *StoragePolicyUpdateOne {
	spuo.mutation.SetBucketName(s)
	return spuo
}

// SetNillableBucketName sets the "bucket_name" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableBucketName(s *string) *StoragePolicyUpdateOne {
	if s != nil {
		spuo.SetBucketName(*s)
	}
	return spuo
}

// ClearBucketName clears the value of the "bucket_name" field.
func (spuo *StoragePolicyUpdateOne) ClearBucketName() *StoragePolicyUpdateOne {
	spuo.mutation.ClearBucketName()
	return spuo
}

// SetIsPrivate sets the "is_private" field.
func (spuo *StoragePolicyUpdateOne) SetIsPrivate(b bool) *StoragePolicyUpdateOne {
	spuo.mutation.SetIsPrivate(b)
	return spuo
}

// SetNillableIsPrivate sets the "is_private" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableIsPrivate(b *bool) *StoragePolicyUpdateOne {
	if b != nil {
		spuo.SetIsPrivate(*b)
	}
	return spuo
}

// ClearIsPrivate clears the value of the "is_private" field.
func (spuo *StoragePolicyUpdateOne) ClearIsPrivate() *StoragePolicyUpdateOne {
	spuo.mutation.ClearIsPrivate()
	return spuo
}

// SetAccessKey sets the "access_key" field.
func (spuo *StoragePolicyUpdateOne) SetAccessKey(s string) *StoragePolicyUpdateOne {
	spuo.mutation.SetAccessKey(s)
	return spuo
}

// SetNillableAccessKey sets the "access_key" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableAccessKey(s *string) *StoragePolicyUpdateOne {
	if s != nil {
		spuo.SetAccessKey(*s)
	}
	return spuo
}

// ClearAccessKey clears the value of the "access_key" field.
func (spuo *StoragePolicyUpdateOne) ClearAccessKey() *StoragePolicyUpdateOne {
	spuo.mutation.ClearAccessKey()
	return spuo
}

// SetSecretKey sets the "secret_key" field.
func (spuo *StoragePolicyUpdateOne) SetSecretKey(s string) *StoragePolicyUpdateOne {
	spuo.mutation.SetSecretKey(s)
	return spuo
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableSecretKey(s *string) *StoragePolicyUpdateOne {
	if s != nil {
		spuo.SetSecretKey(*s)
	}
	return spuo
}

// ClearSecretKey clears the value of the "secret_key" field.
func (spuo *StoragePolicyUpdateOne) ClearSecretKey() *StoragePolicyUpdateOne {
	spuo.mutation.ClearSecretKey()
	return spuo
}

// SetMaxSize sets the "max_size" field.
func (spuo *StoragePolicyUpdateOne) SetMaxSize(i int64) *StoragePolicyUpdateOne {
	spuo.mutation.ResetMaxSize()
	spuo.mutation.SetMaxSize(i)
	return spuo
}

// SetNillableMaxSize sets the "max_size" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableMaxSize(i *int64) *StoragePolicyUpdateOne {
	if i != nil {
		spuo.SetMaxSize(*i)
	}
	return spuo
}

// AddMaxSize adds i to the "max_size" field.
func (spuo *StoragePolicyUpdateOne) AddMaxSize(i int64) *StoragePolicyUpdateOne {
	spuo.mutation.AddMaxSize(i)
	return spuo
}

// ClearMaxSize clears the value of the "max_size" field.
func (spuo *StoragePolicyUpdateOne) ClearMaxSize() *StoragePolicyUpdateOne {
	spuo.mutation.ClearMaxSize()
	return spuo
}

// SetBasePath sets the "base_path" field.
func (spuo *StoragePolicyUpdateOne) SetBasePath(s string) *StoragePolicyUpdateOne {
	spuo.mutation.SetBasePath(s)
	return spuo
}

// SetNillableBasePath sets the "base_path" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableBasePath(s *string) *StoragePolicyUpdateOne {
	if s != nil {
		spuo.SetBasePath(*s)
	}
	return spuo
}

// ClearBasePath clears the value of the "base_path" field.
func (spuo *StoragePolicyUpdateOne) ClearBasePath() *StoragePolicyUpdateOne {
	spuo.mutation.ClearBasePath()
	return spuo
}

// SetVirtualPath sets the "virtual_path" field.
func (spuo *StoragePolicyUpdateOne) SetVirtualPath(s string) *StoragePolicyUpdateOne {
	spuo.mutation.SetVirtualPath(s)
	return spuo
}

// SetNillableVirtualPath sets the "virtual_path" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableVirtualPath(s *string) *StoragePolicyUpdateOne {
	if s != nil {
		spuo.SetVirtualPath(*s)
	}
	return spuo
}

// ClearVirtualPath clears the value of the "virtual_path" field.
func (spuo *StoragePolicyUpdateOne) ClearVirtualPath() *StoragePolicyUpdateOne {
	spuo.mutation.ClearVirtualPath()
	return spuo
}

// SetSettings sets the "settings" field.
func (spuo *StoragePolicyUpdateOne) SetSettings(mps model.StoragePolicySettings) *StoragePolicyUpdateOne {
	spuo.mutation.SetSettings(mps)
	return spuo
}

// ClearSettings clears the value of the "settings" field.
func (spuo *StoragePolicyUpdateOne) ClearSettings() *StoragePolicyUpdateOne {
	spuo.mutation.ClearSettings()
	return spuo
}

// SetNodeID sets the "node_id" field.
func (spuo *StoragePolicyUpdateOne) SetNodeID(u uint) *StoragePolicyUpdateOne {
	spuo.mutation.ResetNodeID()
	spuo.mutation.SetNodeID(u)
	return spuo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (spuo *StoragePolicyUpdateOne) SetNillableNodeID(u *uint) *StoragePolicyUpdateOne {
	if u != nil {
		spuo.SetNodeID(*u)
	}
	return spuo
}

// AddNodeID adds u to the "node_id" field.
func (spuo *StoragePolicyUpdateOne) AddNodeID(u int) *StoragePolicyUpdateOne {
	spuo.mutation.AddNodeID(u)
	return spuo
}

// ClearNodeID clears the value of the "node_id" field.
func (spuo *StoragePolicyUpdateOne) ClearNodeID() *StoragePolicyUpdateOne {
	spuo.mutation.ClearNodeID()
	return spuo
}

// Mutation returns the StoragePolicyMutation object of the builder.
func (spuo *StoragePolicyUpdateOne) Mutation() *StoragePolicyMutation {
	return spuo.mutation
}

// Where appends a list predicates to the StoragePolicyUpdate builder.
func (spuo *StoragePolicyUpdateOne) Where(ps ...predicate.StoragePolicy) *StoragePolicyUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *StoragePolicyUpdateOne) Select(field string, fields ...string) *StoragePolicyUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated StoragePolicy entity.
func (spuo *StoragePolicyUpdateOne) Save(ctx context.Context) (*StoragePolicy, error) {
	if err := spuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *StoragePolicyUpdateOne) SaveX(ctx context.Context) *StoragePolicy {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *StoragePolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *StoragePolicyUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *StoragePolicyUpdateOne) defaults() error {
	if _, ok := spuo.mutation.UpdatedAt(); !ok {
		if storagepolicy.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized storagepolicy.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := storagepolicy.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (spuo *StoragePolicyUpdateOne) check() error {
	if v, ok := spuo.mutation.Name(); ok {
		if err := storagepolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.name": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.GetType(); ok {
		if err := storagepolicy.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.type": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Flag(); ok {
		if err := storagepolicy.FlagValidator(v); err != nil {
			return &ValidationError{Name: "flag", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.flag": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Server(); ok {
		if err := storagepolicy.ServerValidator(v); err != nil {
			return &ValidationError{Name: "server", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.server": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.BucketName(); ok {
		if err := storagepolicy.BucketNameValidator(v); err != nil {
			return &ValidationError{Name: "bucket_name", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.bucket_name": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.BasePath(); ok {
		if err := storagepolicy.BasePathValidator(v); err != nil {
			return &ValidationError{Name: "base_path", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.base_path": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.VirtualPath(); ok {
		if err := storagepolicy.VirtualPathValidator(v); err != nil {
			return &ValidationError{Name: "virtual_path", err: fmt.Errorf(`ent: validator failed for field "StoragePolicy.virtual_path": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spuo *StoragePolicyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StoragePolicyUpdateOne {
	spuo.modifiers = append(spuo.modifiers, modifiers...)
	return spuo
}

func (spuo *StoragePolicyUpdateOne) sqlSave(ctx context.Context) (_node *StoragePolicy, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(storagepolicy.Table, storagepolicy.Columns, sqlgraph.NewFieldSpec(storagepolicy.FieldID, field.TypeUint))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StoragePolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storagepolicy.FieldID)
		for _, f := range fields {
			if !storagepolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storagepolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.DeletedAt(); ok {
		_spec.SetField(storagepolicy.FieldDeletedAt, field.TypeTime, value)
	}
	if spuo.mutation.DeletedAtCleared() {
		_spec.ClearField(storagepolicy.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(storagepolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spuo.mutation.Name(); ok {
		_spec.SetField(storagepolicy.FieldName, field.TypeString, value)
	}
	if value, ok := spuo.mutation.GetType(); ok {
		_spec.SetField(storagepolicy.FieldType, field.TypeString, value)
	}
	if value, ok := spuo.mutation.Flag(); ok {
		_spec.SetField(storagepolicy.FieldFlag, field.TypeString, value)
	}
	if spuo.mutation.FlagCleared() {
		_spec.ClearField(storagepolicy.FieldFlag, field.TypeString)
	}
	if value, ok := spuo.mutation.Server(); ok {
		_spec.SetField(storagepolicy.FieldServer, field.TypeString, value)
	}
	if spuo.mutation.ServerCleared() {
		_spec.ClearField(storagepolicy.FieldServer, field.TypeString)
	}
	if value, ok := spuo.mutation.BucketName(); ok {
		_spec.SetField(storagepolicy.FieldBucketName, field.TypeString, value)
	}
	if spuo.mutation.BucketNameCleared() {
		_spec.ClearField(storagepolicy.FieldBucketName, field.TypeString)
	}
	if value, ok := spuo.mutation.IsPrivate(); ok {
		_spec.SetField(storagepolicy.FieldIsPrivate, field.TypeBool, value)
	}
	if spuo.mutation.IsPrivateCleared() {
		_spec.ClearField(storagepolicy.FieldIsPrivate, field.TypeBool)
	}
	if value, ok := spuo.mutation.AccessKey(); ok {
		_spec.SetField(storagepolicy.FieldAccessKey, field.TypeString, value)
	}
	if spuo.mutation.AccessKeyCleared() {
		_spec.ClearField(storagepolicy.FieldAccessKey, field.TypeString)
	}
	if value, ok := spuo.mutation.SecretKey(); ok {
		_spec.SetField(storagepolicy.FieldSecretKey, field.TypeString, value)
	}
	if spuo.mutation.SecretKeyCleared() {
		_spec.ClearField(storagepolicy.FieldSecretKey, field.TypeString)
	}
	if value, ok := spuo.mutation.MaxSize(); ok {
		_spec.SetField(storagepolicy.FieldMaxSize, field.TypeInt64, value)
	}
	if value, ok := spuo.mutation.AddedMaxSize(); ok {
		_spec.AddField(storagepolicy.FieldMaxSize, field.TypeInt64, value)
	}
	if spuo.mutation.MaxSizeCleared() {
		_spec.ClearField(storagepolicy.FieldMaxSize, field.TypeInt64)
	}
	if value, ok := spuo.mutation.BasePath(); ok {
		_spec.SetField(storagepolicy.FieldBasePath, field.TypeString, value)
	}
	if spuo.mutation.BasePathCleared() {
		_spec.ClearField(storagepolicy.FieldBasePath, field.TypeString)
	}
	if value, ok := spuo.mutation.VirtualPath(); ok {
		_spec.SetField(storagepolicy.FieldVirtualPath, field.TypeString, value)
	}
	if spuo.mutation.VirtualPathCleared() {
		_spec.ClearField(storagepolicy.FieldVirtualPath, field.TypeString)
	}
	if value, ok := spuo.mutation.Settings(); ok {
		_spec.SetField(storagepolicy.FieldSettings, field.TypeOther, value)
	}
	if spuo.mutation.SettingsCleared() {
		_spec.ClearField(storagepolicy.FieldSettings, field.TypeOther)
	}
	if value, ok := spuo.mutation.NodeID(); ok {
		_spec.SetField(storagepolicy.FieldNodeID, field.TypeUint, value)
	}
	if value, ok := spuo.mutation.AddedNodeID(); ok {
		_spec.AddField(storagepolicy.FieldNodeID, field.TypeUint, value)
	}
	if spuo.mutation.NodeIDCleared() {
		_spec.ClearField(storagepolicy.FieldNodeID, field.TypeUint)
	}
	_spec.AddModifiers(spuo.modifiers...)
	_node = &StoragePolicy{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storagepolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
