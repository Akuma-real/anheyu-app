// Code generated by ent, DO NOT EDIT.

package urlstat

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.URLStat {
	return predicate.URLStat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.URLStat {
	return predicate.URLStat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.URLStat {
	return predicate.URLStat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.URLStat {
	return predicate.URLStat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.URLStat {
	return predicate.URLStat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.URLStat {
	return predicate.URLStat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.URLStat {
	return predicate.URLStat(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldUpdatedAt, v))
}

// URLPath applies equality check predicate on the "url_path" field. It's identical to URLPathEQ.
func URLPath(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldURLPath, v))
}

// PageTitle applies equality check predicate on the "page_title" field. It's identical to PageTitleEQ.
func PageTitle(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldPageTitle, v))
}

// TotalViews applies equality check predicate on the "total_views" field. It's identical to TotalViewsEQ.
func TotalViews(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldTotalViews, v))
}

// UniqueViews applies equality check predicate on the "unique_views" field. It's identical to UniqueViewsEQ.
func UniqueViews(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldUniqueViews, v))
}

// BounceCount applies equality check predicate on the "bounce_count" field. It's identical to BounceCountEQ.
func BounceCount(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldBounceCount, v))
}

// AvgDuration applies equality check predicate on the "avg_duration" field. It's identical to AvgDurationEQ.
func AvgDuration(v float64) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldAvgDuration, v))
}

// LastVisitedAt applies equality check predicate on the "last_visited_at" field. It's identical to LastVisitedAtEQ.
func LastVisitedAt(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldLastVisitedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldLTE(FieldUpdatedAt, v))
}

// URLPathEQ applies the EQ predicate on the "url_path" field.
func URLPathEQ(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldURLPath, v))
}

// URLPathNEQ applies the NEQ predicate on the "url_path" field.
func URLPathNEQ(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldNEQ(FieldURLPath, v))
}

// URLPathIn applies the In predicate on the "url_path" field.
func URLPathIn(vs ...string) predicate.URLStat {
	return predicate.URLStat(sql.FieldIn(FieldURLPath, vs...))
}

// URLPathNotIn applies the NotIn predicate on the "url_path" field.
func URLPathNotIn(vs ...string) predicate.URLStat {
	return predicate.URLStat(sql.FieldNotIn(FieldURLPath, vs...))
}

// URLPathGT applies the GT predicate on the "url_path" field.
func URLPathGT(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldGT(FieldURLPath, v))
}

// URLPathGTE applies the GTE predicate on the "url_path" field.
func URLPathGTE(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldGTE(FieldURLPath, v))
}

// URLPathLT applies the LT predicate on the "url_path" field.
func URLPathLT(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldLT(FieldURLPath, v))
}

// URLPathLTE applies the LTE predicate on the "url_path" field.
func URLPathLTE(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldLTE(FieldURLPath, v))
}

// URLPathContains applies the Contains predicate on the "url_path" field.
func URLPathContains(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldContains(FieldURLPath, v))
}

// URLPathHasPrefix applies the HasPrefix predicate on the "url_path" field.
func URLPathHasPrefix(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldHasPrefix(FieldURLPath, v))
}

// URLPathHasSuffix applies the HasSuffix predicate on the "url_path" field.
func URLPathHasSuffix(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldHasSuffix(FieldURLPath, v))
}

// URLPathEqualFold applies the EqualFold predicate on the "url_path" field.
func URLPathEqualFold(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldEqualFold(FieldURLPath, v))
}

// URLPathContainsFold applies the ContainsFold predicate on the "url_path" field.
func URLPathContainsFold(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldContainsFold(FieldURLPath, v))
}

// PageTitleEQ applies the EQ predicate on the "page_title" field.
func PageTitleEQ(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldPageTitle, v))
}

// PageTitleNEQ applies the NEQ predicate on the "page_title" field.
func PageTitleNEQ(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldNEQ(FieldPageTitle, v))
}

// PageTitleIn applies the In predicate on the "page_title" field.
func PageTitleIn(vs ...string) predicate.URLStat {
	return predicate.URLStat(sql.FieldIn(FieldPageTitle, vs...))
}

// PageTitleNotIn applies the NotIn predicate on the "page_title" field.
func PageTitleNotIn(vs ...string) predicate.URLStat {
	return predicate.URLStat(sql.FieldNotIn(FieldPageTitle, vs...))
}

// PageTitleGT applies the GT predicate on the "page_title" field.
func PageTitleGT(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldGT(FieldPageTitle, v))
}

// PageTitleGTE applies the GTE predicate on the "page_title" field.
func PageTitleGTE(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldGTE(FieldPageTitle, v))
}

// PageTitleLT applies the LT predicate on the "page_title" field.
func PageTitleLT(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldLT(FieldPageTitle, v))
}

// PageTitleLTE applies the LTE predicate on the "page_title" field.
func PageTitleLTE(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldLTE(FieldPageTitle, v))
}

// PageTitleContains applies the Contains predicate on the "page_title" field.
func PageTitleContains(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldContains(FieldPageTitle, v))
}

// PageTitleHasPrefix applies the HasPrefix predicate on the "page_title" field.
func PageTitleHasPrefix(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldHasPrefix(FieldPageTitle, v))
}

// PageTitleHasSuffix applies the HasSuffix predicate on the "page_title" field.
func PageTitleHasSuffix(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldHasSuffix(FieldPageTitle, v))
}

// PageTitleIsNil applies the IsNil predicate on the "page_title" field.
func PageTitleIsNil() predicate.URLStat {
	return predicate.URLStat(sql.FieldIsNull(FieldPageTitle))
}

// PageTitleNotNil applies the NotNil predicate on the "page_title" field.
func PageTitleNotNil() predicate.URLStat {
	return predicate.URLStat(sql.FieldNotNull(FieldPageTitle))
}

// PageTitleEqualFold applies the EqualFold predicate on the "page_title" field.
func PageTitleEqualFold(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldEqualFold(FieldPageTitle, v))
}

// PageTitleContainsFold applies the ContainsFold predicate on the "page_title" field.
func PageTitleContainsFold(v string) predicate.URLStat {
	return predicate.URLStat(sql.FieldContainsFold(FieldPageTitle, v))
}

// TotalViewsEQ applies the EQ predicate on the "total_views" field.
func TotalViewsEQ(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldTotalViews, v))
}

// TotalViewsNEQ applies the NEQ predicate on the "total_views" field.
func TotalViewsNEQ(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldNEQ(FieldTotalViews, v))
}

// TotalViewsIn applies the In predicate on the "total_views" field.
func TotalViewsIn(vs ...int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldIn(FieldTotalViews, vs...))
}

// TotalViewsNotIn applies the NotIn predicate on the "total_views" field.
func TotalViewsNotIn(vs ...int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldNotIn(FieldTotalViews, vs...))
}

// TotalViewsGT applies the GT predicate on the "total_views" field.
func TotalViewsGT(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldGT(FieldTotalViews, v))
}

// TotalViewsGTE applies the GTE predicate on the "total_views" field.
func TotalViewsGTE(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldGTE(FieldTotalViews, v))
}

// TotalViewsLT applies the LT predicate on the "total_views" field.
func TotalViewsLT(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldLT(FieldTotalViews, v))
}

// TotalViewsLTE applies the LTE predicate on the "total_views" field.
func TotalViewsLTE(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldLTE(FieldTotalViews, v))
}

// UniqueViewsEQ applies the EQ predicate on the "unique_views" field.
func UniqueViewsEQ(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldUniqueViews, v))
}

// UniqueViewsNEQ applies the NEQ predicate on the "unique_views" field.
func UniqueViewsNEQ(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldNEQ(FieldUniqueViews, v))
}

// UniqueViewsIn applies the In predicate on the "unique_views" field.
func UniqueViewsIn(vs ...int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldIn(FieldUniqueViews, vs...))
}

// UniqueViewsNotIn applies the NotIn predicate on the "unique_views" field.
func UniqueViewsNotIn(vs ...int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldNotIn(FieldUniqueViews, vs...))
}

// UniqueViewsGT applies the GT predicate on the "unique_views" field.
func UniqueViewsGT(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldGT(FieldUniqueViews, v))
}

// UniqueViewsGTE applies the GTE predicate on the "unique_views" field.
func UniqueViewsGTE(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldGTE(FieldUniqueViews, v))
}

// UniqueViewsLT applies the LT predicate on the "unique_views" field.
func UniqueViewsLT(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldLT(FieldUniqueViews, v))
}

// UniqueViewsLTE applies the LTE predicate on the "unique_views" field.
func UniqueViewsLTE(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldLTE(FieldUniqueViews, v))
}

// BounceCountEQ applies the EQ predicate on the "bounce_count" field.
func BounceCountEQ(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldBounceCount, v))
}

// BounceCountNEQ applies the NEQ predicate on the "bounce_count" field.
func BounceCountNEQ(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldNEQ(FieldBounceCount, v))
}

// BounceCountIn applies the In predicate on the "bounce_count" field.
func BounceCountIn(vs ...int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldIn(FieldBounceCount, vs...))
}

// BounceCountNotIn applies the NotIn predicate on the "bounce_count" field.
func BounceCountNotIn(vs ...int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldNotIn(FieldBounceCount, vs...))
}

// BounceCountGT applies the GT predicate on the "bounce_count" field.
func BounceCountGT(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldGT(FieldBounceCount, v))
}

// BounceCountGTE applies the GTE predicate on the "bounce_count" field.
func BounceCountGTE(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldGTE(FieldBounceCount, v))
}

// BounceCountLT applies the LT predicate on the "bounce_count" field.
func BounceCountLT(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldLT(FieldBounceCount, v))
}

// BounceCountLTE applies the LTE predicate on the "bounce_count" field.
func BounceCountLTE(v int64) predicate.URLStat {
	return predicate.URLStat(sql.FieldLTE(FieldBounceCount, v))
}

// AvgDurationEQ applies the EQ predicate on the "avg_duration" field.
func AvgDurationEQ(v float64) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldAvgDuration, v))
}

// AvgDurationNEQ applies the NEQ predicate on the "avg_duration" field.
func AvgDurationNEQ(v float64) predicate.URLStat {
	return predicate.URLStat(sql.FieldNEQ(FieldAvgDuration, v))
}

// AvgDurationIn applies the In predicate on the "avg_duration" field.
func AvgDurationIn(vs ...float64) predicate.URLStat {
	return predicate.URLStat(sql.FieldIn(FieldAvgDuration, vs...))
}

// AvgDurationNotIn applies the NotIn predicate on the "avg_duration" field.
func AvgDurationNotIn(vs ...float64) predicate.URLStat {
	return predicate.URLStat(sql.FieldNotIn(FieldAvgDuration, vs...))
}

// AvgDurationGT applies the GT predicate on the "avg_duration" field.
func AvgDurationGT(v float64) predicate.URLStat {
	return predicate.URLStat(sql.FieldGT(FieldAvgDuration, v))
}

// AvgDurationGTE applies the GTE predicate on the "avg_duration" field.
func AvgDurationGTE(v float64) predicate.URLStat {
	return predicate.URLStat(sql.FieldGTE(FieldAvgDuration, v))
}

// AvgDurationLT applies the LT predicate on the "avg_duration" field.
func AvgDurationLT(v float64) predicate.URLStat {
	return predicate.URLStat(sql.FieldLT(FieldAvgDuration, v))
}

// AvgDurationLTE applies the LTE predicate on the "avg_duration" field.
func AvgDurationLTE(v float64) predicate.URLStat {
	return predicate.URLStat(sql.FieldLTE(FieldAvgDuration, v))
}

// LastVisitedAtEQ applies the EQ predicate on the "last_visited_at" field.
func LastVisitedAtEQ(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldEQ(FieldLastVisitedAt, v))
}

// LastVisitedAtNEQ applies the NEQ predicate on the "last_visited_at" field.
func LastVisitedAtNEQ(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldNEQ(FieldLastVisitedAt, v))
}

// LastVisitedAtIn applies the In predicate on the "last_visited_at" field.
func LastVisitedAtIn(vs ...time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldIn(FieldLastVisitedAt, vs...))
}

// LastVisitedAtNotIn applies the NotIn predicate on the "last_visited_at" field.
func LastVisitedAtNotIn(vs ...time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldNotIn(FieldLastVisitedAt, vs...))
}

// LastVisitedAtGT applies the GT predicate on the "last_visited_at" field.
func LastVisitedAtGT(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldGT(FieldLastVisitedAt, v))
}

// LastVisitedAtGTE applies the GTE predicate on the "last_visited_at" field.
func LastVisitedAtGTE(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldGTE(FieldLastVisitedAt, v))
}

// LastVisitedAtLT applies the LT predicate on the "last_visited_at" field.
func LastVisitedAtLT(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldLT(FieldLastVisitedAt, v))
}

// LastVisitedAtLTE applies the LTE predicate on the "last_visited_at" field.
func LastVisitedAtLTE(v time.Time) predicate.URLStat {
	return predicate.URLStat(sql.FieldLTE(FieldLastVisitedAt, v))
}

// LastVisitedAtIsNil applies the IsNil predicate on the "last_visited_at" field.
func LastVisitedAtIsNil() predicate.URLStat {
	return predicate.URLStat(sql.FieldIsNull(FieldLastVisitedAt))
}

// LastVisitedAtNotNil applies the NotNil predicate on the "last_visited_at" field.
func LastVisitedAtNotNil() predicate.URLStat {
	return predicate.URLStat(sql.FieldNotNull(FieldLastVisitedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.URLStat) predicate.URLStat {
	return predicate.URLStat(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.URLStat) predicate.URLStat {
	return predicate.URLStat(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.URLStat) predicate.URLStat {
	return predicate.URLStat(sql.NotPredicates(p))
}
