// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/anzhiyu-c/anheyu-app/ent/entity"
	"github.com/anzhiyu-c/anheyu-app/ent/file"
	"github.com/anzhiyu-c/anheyu-app/ent/fileentity"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileEntityUpdate is the builder for updating FileEntity entities.
type FileEntityUpdate struct {
	config
	hooks     []Hook
	mutation  *FileEntityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FileEntityUpdate builder.
func (feu *FileEntityUpdate) Where(ps ...predicate.FileEntity) *FileEntityUpdate {
	feu.mutation.Where(ps...)
	return feu
}

// SetDeletedAt sets the "deleted_at" field.
func (feu *FileEntityUpdate) SetDeletedAt(t time.Time) *FileEntityUpdate {
	feu.mutation.SetDeletedAt(t)
	return feu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (feu *FileEntityUpdate) SetNillableDeletedAt(t *time.Time) *FileEntityUpdate {
	if t != nil {
		feu.SetDeletedAt(*t)
	}
	return feu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (feu *FileEntityUpdate) ClearDeletedAt() *FileEntityUpdate {
	feu.mutation.ClearDeletedAt()
	return feu
}

// SetUpdatedAt sets the "updated_at" field.
func (feu *FileEntityUpdate) SetUpdatedAt(t time.Time) *FileEntityUpdate {
	feu.mutation.SetUpdatedAt(t)
	return feu
}

// SetFileID sets the "file_id" field.
func (feu *FileEntityUpdate) SetFileID(u uint) *FileEntityUpdate {
	feu.mutation.SetFileID(u)
	return feu
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (feu *FileEntityUpdate) SetNillableFileID(u *uint) *FileEntityUpdate {
	if u != nil {
		feu.SetFileID(*u)
	}
	return feu
}

// SetEntityID sets the "entity_id" field.
func (feu *FileEntityUpdate) SetEntityID(u uint) *FileEntityUpdate {
	feu.mutation.SetEntityID(u)
	return feu
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (feu *FileEntityUpdate) SetNillableEntityID(u *uint) *FileEntityUpdate {
	if u != nil {
		feu.SetEntityID(*u)
	}
	return feu
}

// SetVersion sets the "version" field.
func (feu *FileEntityUpdate) SetVersion(s string) *FileEntityUpdate {
	feu.mutation.SetVersion(s)
	return feu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (feu *FileEntityUpdate) SetNillableVersion(s *string) *FileEntityUpdate {
	if s != nil {
		feu.SetVersion(*s)
	}
	return feu
}

// ClearVersion clears the value of the "version" field.
func (feu *FileEntityUpdate) ClearVersion() *FileEntityUpdate {
	feu.mutation.ClearVersion()
	return feu
}

// SetIsCurrent sets the "is_current" field.
func (feu *FileEntityUpdate) SetIsCurrent(b bool) *FileEntityUpdate {
	feu.mutation.SetIsCurrent(b)
	return feu
}

// SetNillableIsCurrent sets the "is_current" field if the given value is not nil.
func (feu *FileEntityUpdate) SetNillableIsCurrent(b *bool) *FileEntityUpdate {
	if b != nil {
		feu.SetIsCurrent(*b)
	}
	return feu
}

// SetUploadedByUserID sets the "uploaded_by_user_id" field.
func (feu *FileEntityUpdate) SetUploadedByUserID(u uint64) *FileEntityUpdate {
	feu.mutation.ResetUploadedByUserID()
	feu.mutation.SetUploadedByUserID(u)
	return feu
}

// SetNillableUploadedByUserID sets the "uploaded_by_user_id" field if the given value is not nil.
func (feu *FileEntityUpdate) SetNillableUploadedByUserID(u *uint64) *FileEntityUpdate {
	if u != nil {
		feu.SetUploadedByUserID(*u)
	}
	return feu
}

// AddUploadedByUserID adds u to the "uploaded_by_user_id" field.
func (feu *FileEntityUpdate) AddUploadedByUserID(u int64) *FileEntityUpdate {
	feu.mutation.AddUploadedByUserID(u)
	return feu
}

// ClearUploadedByUserID clears the value of the "uploaded_by_user_id" field.
func (feu *FileEntityUpdate) ClearUploadedByUserID() *FileEntityUpdate {
	feu.mutation.ClearUploadedByUserID()
	return feu
}

// SetFile sets the "file" edge to the File entity.
func (feu *FileEntityUpdate) SetFile(f *File) *FileEntityUpdate {
	return feu.SetFileID(f.ID)
}

// SetEntity sets the "entity" edge to the Entity entity.
func (feu *FileEntityUpdate) SetEntity(e *Entity) *FileEntityUpdate {
	return feu.SetEntityID(e.ID)
}

// Mutation returns the FileEntityMutation object of the builder.
func (feu *FileEntityUpdate) Mutation() *FileEntityMutation {
	return feu.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (feu *FileEntityUpdate) ClearFile() *FileEntityUpdate {
	feu.mutation.ClearFile()
	return feu
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (feu *FileEntityUpdate) ClearEntity() *FileEntityUpdate {
	feu.mutation.ClearEntity()
	return feu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (feu *FileEntityUpdate) Save(ctx context.Context) (int, error) {
	if err := feu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, feu.sqlSave, feu.mutation, feu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (feu *FileEntityUpdate) SaveX(ctx context.Context) int {
	affected, err := feu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (feu *FileEntityUpdate) Exec(ctx context.Context) error {
	_, err := feu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (feu *FileEntityUpdate) ExecX(ctx context.Context) {
	if err := feu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (feu *FileEntityUpdate) defaults() error {
	if _, ok := feu.mutation.UpdatedAt(); !ok {
		if fileentity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fileentity.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fileentity.UpdateDefaultUpdatedAt()
		feu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (feu *FileEntityUpdate) check() error {
	if v, ok := feu.mutation.Version(); ok {
		if err := fileentity.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "FileEntity.version": %w`, err)}
		}
	}
	if feu.mutation.FileCleared() && len(feu.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FileEntity.file"`)
	}
	if feu.mutation.EntityCleared() && len(feu.mutation.EntityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FileEntity.entity"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (feu *FileEntityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileEntityUpdate {
	feu.modifiers = append(feu.modifiers, modifiers...)
	return feu
}

func (feu *FileEntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := feu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fileentity.Table, fileentity.Columns, sqlgraph.NewFieldSpec(fileentity.FieldID, field.TypeUint))
	if ps := feu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := feu.mutation.DeletedAt(); ok {
		_spec.SetField(fileentity.FieldDeletedAt, field.TypeTime, value)
	}
	if feu.mutation.DeletedAtCleared() {
		_spec.ClearField(fileentity.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := feu.mutation.UpdatedAt(); ok {
		_spec.SetField(fileentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := feu.mutation.Version(); ok {
		_spec.SetField(fileentity.FieldVersion, field.TypeString, value)
	}
	if feu.mutation.VersionCleared() {
		_spec.ClearField(fileentity.FieldVersion, field.TypeString)
	}
	if value, ok := feu.mutation.IsCurrent(); ok {
		_spec.SetField(fileentity.FieldIsCurrent, field.TypeBool, value)
	}
	if value, ok := feu.mutation.UploadedByUserID(); ok {
		_spec.SetField(fileentity.FieldUploadedByUserID, field.TypeUint64, value)
	}
	if value, ok := feu.mutation.AddedUploadedByUserID(); ok {
		_spec.AddField(fileentity.FieldUploadedByUserID, field.TypeUint64, value)
	}
	if feu.mutation.UploadedByUserIDCleared() {
		_spec.ClearField(fileentity.FieldUploadedByUserID, field.TypeUint64)
	}
	if feu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileentity.FileTable,
			Columns: []string{fileentity.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileentity.FileTable,
			Columns: []string{fileentity.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if feu.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileentity.EntityTable,
			Columns: []string{fileentity.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feu.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileentity.EntityTable,
			Columns: []string{fileentity.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(feu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, feu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	feu.mutation.done = true
	return n, nil
}

// FileEntityUpdateOne is the builder for updating a single FileEntity entity.
type FileEntityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FileEntityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (feuo *FileEntityUpdateOne) SetDeletedAt(t time.Time) *FileEntityUpdateOne {
	feuo.mutation.SetDeletedAt(t)
	return feuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (feuo *FileEntityUpdateOne) SetNillableDeletedAt(t *time.Time) *FileEntityUpdateOne {
	if t != nil {
		feuo.SetDeletedAt(*t)
	}
	return feuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (feuo *FileEntityUpdateOne) ClearDeletedAt() *FileEntityUpdateOne {
	feuo.mutation.ClearDeletedAt()
	return feuo
}

// SetUpdatedAt sets the "updated_at" field.
func (feuo *FileEntityUpdateOne) SetUpdatedAt(t time.Time) *FileEntityUpdateOne {
	feuo.mutation.SetUpdatedAt(t)
	return feuo
}

// SetFileID sets the "file_id" field.
func (feuo *FileEntityUpdateOne) SetFileID(u uint) *FileEntityUpdateOne {
	feuo.mutation.SetFileID(u)
	return feuo
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (feuo *FileEntityUpdateOne) SetNillableFileID(u *uint) *FileEntityUpdateOne {
	if u != nil {
		feuo.SetFileID(*u)
	}
	return feuo
}

// SetEntityID sets the "entity_id" field.
func (feuo *FileEntityUpdateOne) SetEntityID(u uint) *FileEntityUpdateOne {
	feuo.mutation.SetEntityID(u)
	return feuo
}

// SetNillableEntityID sets the "entity_id" field if the given value is not nil.
func (feuo *FileEntityUpdateOne) SetNillableEntityID(u *uint) *FileEntityUpdateOne {
	if u != nil {
		feuo.SetEntityID(*u)
	}
	return feuo
}

// SetVersion sets the "version" field.
func (feuo *FileEntityUpdateOne) SetVersion(s string) *FileEntityUpdateOne {
	feuo.mutation.SetVersion(s)
	return feuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (feuo *FileEntityUpdateOne) SetNillableVersion(s *string) *FileEntityUpdateOne {
	if s != nil {
		feuo.SetVersion(*s)
	}
	return feuo
}

// ClearVersion clears the value of the "version" field.
func (feuo *FileEntityUpdateOne) ClearVersion() *FileEntityUpdateOne {
	feuo.mutation.ClearVersion()
	return feuo
}

// SetIsCurrent sets the "is_current" field.
func (feuo *FileEntityUpdateOne) SetIsCurrent(b bool) *FileEntityUpdateOne {
	feuo.mutation.SetIsCurrent(b)
	return feuo
}

// SetNillableIsCurrent sets the "is_current" field if the given value is not nil.
func (feuo *FileEntityUpdateOne) SetNillableIsCurrent(b *bool) *FileEntityUpdateOne {
	if b != nil {
		feuo.SetIsCurrent(*b)
	}
	return feuo
}

// SetUploadedByUserID sets the "uploaded_by_user_id" field.
func (feuo *FileEntityUpdateOne) SetUploadedByUserID(u uint64) *FileEntityUpdateOne {
	feuo.mutation.ResetUploadedByUserID()
	feuo.mutation.SetUploadedByUserID(u)
	return feuo
}

// SetNillableUploadedByUserID sets the "uploaded_by_user_id" field if the given value is not nil.
func (feuo *FileEntityUpdateOne) SetNillableUploadedByUserID(u *uint64) *FileEntityUpdateOne {
	if u != nil {
		feuo.SetUploadedByUserID(*u)
	}
	return feuo
}

// AddUploadedByUserID adds u to the "uploaded_by_user_id" field.
func (feuo *FileEntityUpdateOne) AddUploadedByUserID(u int64) *FileEntityUpdateOne {
	feuo.mutation.AddUploadedByUserID(u)
	return feuo
}

// ClearUploadedByUserID clears the value of the "uploaded_by_user_id" field.
func (feuo *FileEntityUpdateOne) ClearUploadedByUserID() *FileEntityUpdateOne {
	feuo.mutation.ClearUploadedByUserID()
	return feuo
}

// SetFile sets the "file" edge to the File entity.
func (feuo *FileEntityUpdateOne) SetFile(f *File) *FileEntityUpdateOne {
	return feuo.SetFileID(f.ID)
}

// SetEntity sets the "entity" edge to the Entity entity.
func (feuo *FileEntityUpdateOne) SetEntity(e *Entity) *FileEntityUpdateOne {
	return feuo.SetEntityID(e.ID)
}

// Mutation returns the FileEntityMutation object of the builder.
func (feuo *FileEntityUpdateOne) Mutation() *FileEntityMutation {
	return feuo.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (feuo *FileEntityUpdateOne) ClearFile() *FileEntityUpdateOne {
	feuo.mutation.ClearFile()
	return feuo
}

// ClearEntity clears the "entity" edge to the Entity entity.
func (feuo *FileEntityUpdateOne) ClearEntity() *FileEntityUpdateOne {
	feuo.mutation.ClearEntity()
	return feuo
}

// Where appends a list predicates to the FileEntityUpdate builder.
func (feuo *FileEntityUpdateOne) Where(ps ...predicate.FileEntity) *FileEntityUpdateOne {
	feuo.mutation.Where(ps...)
	return feuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (feuo *FileEntityUpdateOne) Select(field string, fields ...string) *FileEntityUpdateOne {
	feuo.fields = append([]string{field}, fields...)
	return feuo
}

// Save executes the query and returns the updated FileEntity entity.
func (feuo *FileEntityUpdateOne) Save(ctx context.Context) (*FileEntity, error) {
	if err := feuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, feuo.sqlSave, feuo.mutation, feuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (feuo *FileEntityUpdateOne) SaveX(ctx context.Context) *FileEntity {
	node, err := feuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (feuo *FileEntityUpdateOne) Exec(ctx context.Context) error {
	_, err := feuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (feuo *FileEntityUpdateOne) ExecX(ctx context.Context) {
	if err := feuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (feuo *FileEntityUpdateOne) defaults() error {
	if _, ok := feuo.mutation.UpdatedAt(); !ok {
		if fileentity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fileentity.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fileentity.UpdateDefaultUpdatedAt()
		feuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (feuo *FileEntityUpdateOne) check() error {
	if v, ok := feuo.mutation.Version(); ok {
		if err := fileentity.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "FileEntity.version": %w`, err)}
		}
	}
	if feuo.mutation.FileCleared() && len(feuo.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FileEntity.file"`)
	}
	if feuo.mutation.EntityCleared() && len(feuo.mutation.EntityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FileEntity.entity"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (feuo *FileEntityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileEntityUpdateOne {
	feuo.modifiers = append(feuo.modifiers, modifiers...)
	return feuo
}

func (feuo *FileEntityUpdateOne) sqlSave(ctx context.Context) (_node *FileEntity, err error) {
	if err := feuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fileentity.Table, fileentity.Columns, sqlgraph.NewFieldSpec(fileentity.FieldID, field.TypeUint))
	id, ok := feuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileEntity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := feuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fileentity.FieldID)
		for _, f := range fields {
			if !fileentity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fileentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := feuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := feuo.mutation.DeletedAt(); ok {
		_spec.SetField(fileentity.FieldDeletedAt, field.TypeTime, value)
	}
	if feuo.mutation.DeletedAtCleared() {
		_spec.ClearField(fileentity.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := feuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fileentity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := feuo.mutation.Version(); ok {
		_spec.SetField(fileentity.FieldVersion, field.TypeString, value)
	}
	if feuo.mutation.VersionCleared() {
		_spec.ClearField(fileentity.FieldVersion, field.TypeString)
	}
	if value, ok := feuo.mutation.IsCurrent(); ok {
		_spec.SetField(fileentity.FieldIsCurrent, field.TypeBool, value)
	}
	if value, ok := feuo.mutation.UploadedByUserID(); ok {
		_spec.SetField(fileentity.FieldUploadedByUserID, field.TypeUint64, value)
	}
	if value, ok := feuo.mutation.AddedUploadedByUserID(); ok {
		_spec.AddField(fileentity.FieldUploadedByUserID, field.TypeUint64, value)
	}
	if feuo.mutation.UploadedByUserIDCleared() {
		_spec.ClearField(fileentity.FieldUploadedByUserID, field.TypeUint64)
	}
	if feuo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileentity.FileTable,
			Columns: []string{fileentity.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feuo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileentity.FileTable,
			Columns: []string{fileentity.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if feuo.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileentity.EntityTable,
			Columns: []string{fileentity.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := feuo.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fileentity.EntityTable,
			Columns: []string{fileentity.EntityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(feuo.modifiers...)
	_node = &FileEntity{config: feuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, feuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fileentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	feuo.mutation.done = true
	return _node, nil
}
